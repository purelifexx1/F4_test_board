
F4_tool_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800da80  0800da80  0001da80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddf8  0800ddf8  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddf8  0800ddf8  0001ddf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de00  0800de00  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800de00  0800de00  0001de00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800de14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000218  0800e028  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001df4  0800e028  00021df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f6e7  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b96  00000000  00000000  0004f92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c58  00000000  00000000  000544c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001aa0  00000000  00000000  00056120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a105  00000000  00000000  00057bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017fe0  00000000  00000000  00081cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df580  00000000  00000000  00099ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  001792a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000218 	.word	0x20000218
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800da68 	.word	0x0800da68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000021c 	.word	0x2000021c
 80001c4:	0800da68 	.word	0x0800da68

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_uldivmod>:
 8000ad4:	b953      	cbnz	r3, 8000aec <__aeabi_uldivmod+0x18>
 8000ad6:	b94a      	cbnz	r2, 8000aec <__aeabi_uldivmod+0x18>
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	bf08      	it	eq
 8000adc:	2800      	cmpeq	r0, #0
 8000ade:	bf1c      	itt	ne
 8000ae0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ae4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae8:	f000 b972 	b.w	8000dd0 <__aeabi_idiv0>
 8000aec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af4:	f000 f806 	bl	8000b04 <__udivmoddi4>
 8000af8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <__udivmoddi4>:
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	9e08      	ldr	r6, [sp, #32]
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d14b      	bne.n	8000baa <__udivmoddi4+0xa6>
 8000b12:	428a      	cmp	r2, r1
 8000b14:	4615      	mov	r5, r2
 8000b16:	d967      	bls.n	8000be8 <__udivmoddi4+0xe4>
 8000b18:	fab2 f282 	clz	r2, r2
 8000b1c:	b14a      	cbz	r2, 8000b32 <__udivmoddi4+0x2e>
 8000b1e:	f1c2 0720 	rsb	r7, r2, #32
 8000b22:	fa01 f302 	lsl.w	r3, r1, r2
 8000b26:	fa20 f707 	lsr.w	r7, r0, r7
 8000b2a:	4095      	lsls	r5, r2
 8000b2c:	ea47 0803 	orr.w	r8, r7, r3
 8000b30:	4094      	lsls	r4, r2
 8000b32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b36:	0c23      	lsrs	r3, r4, #16
 8000b38:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b3c:	fa1f fc85 	uxth.w	ip, r5
 8000b40:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b48:	fb07 f10c 	mul.w	r1, r7, ip
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x60>
 8000b50:	18eb      	adds	r3, r5, r3
 8000b52:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b56:	f080 811b 	bcs.w	8000d90 <__udivmoddi4+0x28c>
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	f240 8118 	bls.w	8000d90 <__udivmoddi4+0x28c>
 8000b60:	3f02      	subs	r7, #2
 8000b62:	442b      	add	r3, r5
 8000b64:	1a5b      	subs	r3, r3, r1
 8000b66:	b2a4      	uxth	r4, r4
 8000b68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b74:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b78:	45a4      	cmp	ip, r4
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x8c>
 8000b7c:	192c      	adds	r4, r5, r4
 8000b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b82:	f080 8107 	bcs.w	8000d94 <__udivmoddi4+0x290>
 8000b86:	45a4      	cmp	ip, r4
 8000b88:	f240 8104 	bls.w	8000d94 <__udivmoddi4+0x290>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	442c      	add	r4, r5
 8000b90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b94:	eba4 040c 	sub.w	r4, r4, ip
 8000b98:	2700      	movs	r7, #0
 8000b9a:	b11e      	cbz	r6, 8000ba4 <__udivmoddi4+0xa0>
 8000b9c:	40d4      	lsrs	r4, r2
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d909      	bls.n	8000bc2 <__udivmoddi4+0xbe>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	f000 80eb 	beq.w	8000d8a <__udivmoddi4+0x286>
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bba:	4638      	mov	r0, r7
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	fab3 f783 	clz	r7, r3
 8000bc6:	2f00      	cmp	r7, #0
 8000bc8:	d147      	bne.n	8000c5a <__udivmoddi4+0x156>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d302      	bcc.n	8000bd4 <__udivmoddi4+0xd0>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	f200 80fa 	bhi.w	8000dc8 <__udivmoddi4+0x2c4>
 8000bd4:	1a84      	subs	r4, r0, r2
 8000bd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	4698      	mov	r8, r3
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d0e0      	beq.n	8000ba4 <__udivmoddi4+0xa0>
 8000be2:	e9c6 4800 	strd	r4, r8, [r6]
 8000be6:	e7dd      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000be8:	b902      	cbnz	r2, 8000bec <__udivmoddi4+0xe8>
 8000bea:	deff      	udf	#255	; 0xff
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f040 808f 	bne.w	8000d14 <__udivmoddi4+0x210>
 8000bf6:	1b49      	subs	r1, r1, r5
 8000bf8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfc:	fa1f f885 	uxth.w	r8, r5
 8000c00:	2701      	movs	r7, #1
 8000c02:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c10:	fb08 f10c 	mul.w	r1, r8, ip
 8000c14:	4299      	cmp	r1, r3
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x124>
 8000c18:	18eb      	adds	r3, r5, r3
 8000c1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x122>
 8000c20:	4299      	cmp	r1, r3
 8000c22:	f200 80cd 	bhi.w	8000dc0 <__udivmoddi4+0x2bc>
 8000c26:	4684      	mov	ip, r0
 8000c28:	1a59      	subs	r1, r3, r1
 8000c2a:	b2a3      	uxth	r3, r4
 8000c2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c30:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c38:	fb08 f800 	mul.w	r8, r8, r0
 8000c3c:	45a0      	cmp	r8, r4
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x14c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x14a>
 8000c48:	45a0      	cmp	r8, r4
 8000c4a:	f200 80b6 	bhi.w	8000dba <__udivmoddi4+0x2b6>
 8000c4e:	4618      	mov	r0, r3
 8000c50:	eba4 0408 	sub.w	r4, r4, r8
 8000c54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c58:	e79f      	b.n	8000b9a <__udivmoddi4+0x96>
 8000c5a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c5e:	40bb      	lsls	r3, r7
 8000c60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c64:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c68:	fa01 f407 	lsl.w	r4, r1, r7
 8000c6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c70:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c78:	4325      	orrs	r5, r4
 8000c7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c7e:	0c2c      	lsrs	r4, r5, #16
 8000c80:	fb08 3319 	mls	r3, r8, r9, r3
 8000c84:	fa1f fa8e 	uxth.w	sl, lr
 8000c88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c8c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c90:	429c      	cmp	r4, r3
 8000c92:	fa02 f207 	lsl.w	r2, r2, r7
 8000c96:	fa00 f107 	lsl.w	r1, r0, r7
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b0>
 8000c9c:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca4:	f080 8087 	bcs.w	8000db6 <__udivmoddi4+0x2b2>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f240 8084 	bls.w	8000db6 <__udivmoddi4+0x2b2>
 8000cae:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb2:	4473      	add	r3, lr
 8000cb4:	1b1b      	subs	r3, r3, r4
 8000cb6:	b2ad      	uxth	r5, r5
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc8:	45a2      	cmp	sl, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1da>
 8000ccc:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd4:	d26b      	bcs.n	8000dae <__udivmoddi4+0x2aa>
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	d969      	bls.n	8000dae <__udivmoddi4+0x2aa>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4474      	add	r4, lr
 8000cde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce6:	eba4 040a 	sub.w	r4, r4, sl
 8000cea:	454c      	cmp	r4, r9
 8000cec:	46c2      	mov	sl, r8
 8000cee:	464b      	mov	r3, r9
 8000cf0:	d354      	bcc.n	8000d9c <__udivmoddi4+0x298>
 8000cf2:	d051      	beq.n	8000d98 <__udivmoddi4+0x294>
 8000cf4:	2e00      	cmp	r6, #0
 8000cf6:	d069      	beq.n	8000dcc <__udivmoddi4+0x2c8>
 8000cf8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cfc:	eb64 0403 	sbc.w	r4, r4, r3
 8000d00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d04:	40fd      	lsrs	r5, r7
 8000d06:	40fc      	lsrs	r4, r7
 8000d08:	ea4c 0505 	orr.w	r5, ip, r5
 8000d0c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d10:	2700      	movs	r7, #0
 8000d12:	e747      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f703 	lsr.w	r7, r0, r3
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	fa21 f303 	lsr.w	r3, r1, r3
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	4338      	orrs	r0, r7
 8000d2c:	0c01      	lsrs	r1, r0, #16
 8000d2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d32:	fa1f f885 	uxth.w	r8, r5
 8000d36:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3e:	fb07 f308 	mul.w	r3, r7, r8
 8000d42:	428b      	cmp	r3, r1
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x256>
 8000d4a:	1869      	adds	r1, r5, r1
 8000d4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d50:	d22f      	bcs.n	8000db2 <__udivmoddi4+0x2ae>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d92d      	bls.n	8000db2 <__udivmoddi4+0x2ae>
 8000d56:	3f02      	subs	r7, #2
 8000d58:	4429      	add	r1, r5
 8000d5a:	1acb      	subs	r3, r1, r3
 8000d5c:	b281      	uxth	r1, r0
 8000d5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d62:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb00 f308 	mul.w	r3, r0, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x27e>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d78:	d217      	bcs.n	8000daa <__udivmoddi4+0x2a6>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d915      	bls.n	8000daa <__udivmoddi4+0x2a6>
 8000d7e:	3802      	subs	r0, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1ac9      	subs	r1, r1, r3
 8000d84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d88:	e73b      	b.n	8000c02 <__udivmoddi4+0xfe>
 8000d8a:	4637      	mov	r7, r6
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e709      	b.n	8000ba4 <__udivmoddi4+0xa0>
 8000d90:	4607      	mov	r7, r0
 8000d92:	e6e7      	b.n	8000b64 <__udivmoddi4+0x60>
 8000d94:	4618      	mov	r0, r3
 8000d96:	e6fb      	b.n	8000b90 <__udivmoddi4+0x8c>
 8000d98:	4541      	cmp	r1, r8
 8000d9a:	d2ab      	bcs.n	8000cf4 <__udivmoddi4+0x1f0>
 8000d9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da0:	eb69 020e 	sbc.w	r2, r9, lr
 8000da4:	3801      	subs	r0, #1
 8000da6:	4613      	mov	r3, r2
 8000da8:	e7a4      	b.n	8000cf4 <__udivmoddi4+0x1f0>
 8000daa:	4660      	mov	r0, ip
 8000dac:	e7e9      	b.n	8000d82 <__udivmoddi4+0x27e>
 8000dae:	4618      	mov	r0, r3
 8000db0:	e795      	b.n	8000cde <__udivmoddi4+0x1da>
 8000db2:	4667      	mov	r7, ip
 8000db4:	e7d1      	b.n	8000d5a <__udivmoddi4+0x256>
 8000db6:	4681      	mov	r9, r0
 8000db8:	e77c      	b.n	8000cb4 <__udivmoddi4+0x1b0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	442c      	add	r4, r5
 8000dbe:	e747      	b.n	8000c50 <__udivmoddi4+0x14c>
 8000dc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc4:	442b      	add	r3, r5
 8000dc6:	e72f      	b.n	8000c28 <__udivmoddi4+0x124>
 8000dc8:	4638      	mov	r0, r7
 8000dca:	e708      	b.n	8000bde <__udivmoddi4+0xda>
 8000dcc:	4637      	mov	r7, r6
 8000dce:	e6e9      	b.n	8000ba4 <__udivmoddi4+0xa0>

08000dd0 <__aeabi_idiv0>:
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop

08000dd4 <_ZN3lcdC1Ev>:
#include "lcd.h"


#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

lcd::lcd(){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

}
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <_ZN3lcd12lcd_send_cmdEc>:
void lcd::lcd_send_cmd (char cmd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	f023 030f 	bic.w	r3, r3, #15
 8000dfe:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f043 030c 	orr.w	r3, r3, #12
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	f043 030c 	orr.w	r3, r3, #12
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e24:	7bbb      	ldrb	r3, [r7, #14]
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e2e:	f107 0208 	add.w	r2, r7, #8
 8000e32:	2364      	movs	r3, #100	; 0x64
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2304      	movs	r3, #4
 8000e38:	214e      	movs	r1, #78	; 0x4e
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <_ZN3lcd12lcd_send_cmdEc+0x5c>)
 8000e3c:	f003 fe74 	bl	8004b28 <HAL_I2C_Master_Transmit>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000380 	.word	0x20000380

08000e4c <_ZN3lcd13lcd_send_dataEc>:

void lcd::lcd_send_data (char data)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	f023 030f 	bic.w	r3, r3, #15
 8000e5e:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	f043 030d 	orr.w	r3, r3, #13
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	f043 0309 	orr.w	r3, r3, #9
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	f043 030d 	orr.w	r3, r3, #13
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	f043 0309 	orr.w	r3, r3, #9
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e8e:	f107 0208 	add.w	r2, r7, #8
 8000e92:	2364      	movs	r3, #100	; 0x64
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2304      	movs	r3, #4
 8000e98:	214e      	movs	r1, #78	; 0x4e
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <_ZN3lcd13lcd_send_dataEc+0x5c>)
 8000e9c:	f003 fe44 	bl	8004b28 <HAL_I2C_Master_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000380 	.word	0x20000380

08000eac <_ZN3lcd8lcd_initEv>:

void lcd::lcd_init (void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000eb4:	2133      	movs	r1, #51	; 0x33
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff98 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	lcd_send_cmd (0x32);
 8000ebc:	2132      	movs	r1, #50	; 0x32
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff94 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000ec4:	2032      	movs	r0, #50	; 0x32
 8000ec6:	f002 fb31 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000eca:	2128      	movs	r1, #40	; 0x28
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff8d 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000ed2:	2032      	movs	r0, #50	; 0x32
 8000ed4:	f002 fb2a 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff86 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000ee0:	2032      	movs	r0, #50	; 0x32
 8000ee2:	f002 fb23 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000ee6:	2106      	movs	r1, #6
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff7f 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000eee:	2032      	movs	r0, #50	; 0x32
 8000ef0:	f002 fb1c 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff78 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000efc:	2032      	movs	r0, #50	; 0x32
 8000efe:	f002 fb15 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000f02:	2102      	movs	r1, #2
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff71 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
	HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f002 fb0e 	bl	800352c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff6a 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZN3lcd15lcd_send_stringEPc>:

void lcd::lcd_send_string (char *str)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	while (*str) lcd_send_data (*str++);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d008      	beq.n	8000f44 <_ZN3lcd15lcd_send_stringEPc+0x24>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	1c5a      	adds	r2, r3, #1
 8000f36:	603a      	str	r2, [r7, #0]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff85 	bl	8000e4c <_ZN3lcd13lcd_send_dataEc>
 8000f42:	e7f2      	b.n	8000f2a <_ZN3lcd15lcd_send_stringEPc+0xa>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN3lcd17lcd_clear_displayEv>:

void lcd::lcd_clear_display (void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	lcd_send_cmd (0x01); //clear display
 8000f54:	2101      	movs	r1, #1
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff48 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN3lcd11lcd_goto_XYEii>:

void lcd::lcd_goto_XY (int row, int col)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	uint8_t pos_Addr;
	if(row == 1)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <_ZN3lcd11lcd_goto_XYEii+0x24>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	337f      	adds	r3, #127	; 0x7f
 8000f84:	75fb      	strb	r3, [r7, #23]
 8000f86:	e008      	b.n	8000f9a <_ZN3lcd11lcd_goto_XYEii+0x36>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3340      	adds	r3, #64	; 0x40
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	75fb      	strb	r3, [r7, #23]
	}
	lcd_send_cmd(pos_Addr);
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ff24 	bl	8000dec <_ZN3lcd12lcd_send_cmdEc>
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_Z41__static_initialization_and_destruction_0ii>:
lcd LCD;
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d107      	bne.n	8000fcc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d102      	bne.n	8000fcc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000fc8:	f7ff ff04 	bl	8000dd4 <_ZN3lcdC1Ev>
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000234 	.word	0x20000234

08000fd8 <_GLOBAL__sub_I__ZN3lcdC2Ev>:
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f7ff ffe3 	bl	8000fac <_Z41__static_initialization_and_destruction_0ii>
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f002 fa2c 	bl	8003448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f816 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 fa00 	bl	80013f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff8:	f000 f9d6 	bl	80013a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ffc:	f000 f8fa 	bl	80011f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001000:	f000 f9a8 	bl	8001354 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001004:	f000 f8c8 	bl	8001198 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001008:	f00a fe08 	bl	800bc1c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800100c:	f000 f872 	bl	80010f4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001010:	f000 f926 	bl	8001260 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
setup();
 8001014:	f000 fa94 	bl	8001540 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001018:	f000 fb14 	bl	8001644 <loop>
 800101c:	e7fc      	b.n	8001018 <main+0x30>
	...

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	; 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2230      	movs	r2, #48	; 0x30
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00c fc14 	bl	800d85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <SystemClock_Config+0xcc>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <SystemClock_Config+0xcc>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <SystemClock_Config+0xcc>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <SystemClock_Config+0xd0>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <SystemClock_Config+0xd0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001086:	2302      	movs	r3, #2
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001090:	2304      	movs	r3, #4
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001094:	23a8      	movs	r3, #168	; 0xa8
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001098:	2302      	movs	r3, #2
 800109a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800109c:	2307      	movs	r3, #7
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 f9c9 	bl	800643c <HAL_RCC_OscConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b0:	f000 fa36 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b4:	230f      	movs	r3, #15
 80010b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b8:	2302      	movs	r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2105      	movs	r1, #5
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fc22 	bl	800691c <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010de:	f000 fa1f 	bl	8001520 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	; 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fa:	463b      	mov	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_ADC1_Init+0x98>)
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <MX_ADC1_Init+0x9c>)
 800110a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_ADC1_Init+0x98>)
 800110e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <MX_ADC1_Init+0x98>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_ADC1_Init+0x98>)
 8001122:	2201      	movs	r2, #1
 8001124:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_ADC1_Init+0x98>)
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <MX_ADC1_Init+0xa0>)
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <MX_ADC1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_ADC1_Init+0x98>)
 8001142:	2201      	movs	r2, #1
 8001144:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_ADC1_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_ADC1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_ADC1_Init+0x98>)
 8001156:	f002 fa0b 	bl	8003570 <HAL_ADC_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001160:	f000 f9de 	bl	8001520 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001164:	2304      	movs	r3, #4
 8001166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800116c:	2307      	movs	r3, #7
 800116e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_ADC1_Init+0x98>)
 8001176:	f002 fb13 	bl	80037a0 <HAL_ADC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001180:	f000 f9ce 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200003d4 	.word	0x200003d4
 8001190:	40012000 	.word	0x40012000
 8001194:	0f000001 	.word	0x0f000001

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f003 fb6f 	bl	80048b8 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 f99e 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000380 	.word	0x20000380
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_SPI1_Init+0x64>)
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <MX_SPI1_Init+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_SPI1_Init+0x64>)
 8001220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001224:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_SPI1_Init+0x64>)
 8001228:	2218      	movs	r2, #24
 800122a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_SPI1_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_SPI1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_SPI1_Init+0x64>)
 8001240:	220a      	movs	r2, #10
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_SPI1_Init+0x64>)
 8001246:	f005 fd5b 	bl	8006d00 <HAL_SPI_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001250:	f000 f966 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000047c 	.word	0x2000047c
 800125c:	40013000 	.word	0x40013000

08001260 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_TIM4_Init+0xec>)
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <MX_TIM4_Init+0xf0>)
 8001286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_TIM4_Init+0xec>)
 800128a:	2213      	movs	r2, #19
 800128c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_TIM4_Init+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM4_Init+0xec>)
 8001296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800129a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM4_Init+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM4_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_TIM4_Init+0xec>)
 80012aa:	f006 fa7d 	bl	80077a8 <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012b4:	f000 f934 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_TIM4_Init+0xec>)
 80012c8:	f006 fe14 	bl	8007ef4 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012d2:	f000 f925 	bl	8001520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_TIM4_Init+0xec>)
 80012ee:	f006 fac5 	bl	800787c <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012f8:	f000 f912 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2204      	movs	r2, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_TIM4_Init+0xec>)
 8001304:	f006 faba 	bl	800787c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800130e:	f000 f907 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2208      	movs	r2, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM4_Init+0xec>)
 800131a:	f006 faaf 	bl	800787c <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001324:	f000 f8fc 	bl	8001520 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	220c      	movs	r2, #12
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM4_Init+0xec>)
 8001330:	f006 faa4 	bl	800787c <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800133a:	f000 f8f1 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM4_Init+0xec>)
 8001340:	f001 fea8 	bl	8003094 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000340 	.word	0x20000340
 8001350:	40000800 	.word	0x40000800

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f006 fe2e 	bl	8007fec <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f8c3 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200004d4 	.word	0x200004d4
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_DMA_Init+0x4c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <MX_DMA_Init+0x4c>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <MX_DMA_Init+0x4c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2010      	movs	r0, #16
 80013d0:	f002 fcdf 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013d4:	2010      	movs	r0, #16
 80013d6:	f002 fcf8 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2011      	movs	r0, #17
 80013e0:	f002 fcd7 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013e4:	2011      	movs	r0, #17
 80013e6:	f002 fcf0 	bl	8003dca <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a3f      	ldr	r2, [pc, #252]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a38      	ldr	r2, [pc, #224]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b36      	ldr	r3, [pc, #216]	; (8001514 <MX_GPIO_Init+0x11c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b32      	ldr	r3, [pc, #200]	; (8001514 <MX_GPIO_Init+0x11c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a2a      	ldr	r2, [pc, #168]	; (8001514 <MX_GPIO_Init+0x11c>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a23      	ldr	r2, [pc, #140]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <MX_GPIO_Init+0x11c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2108      	movs	r1, #8
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <MX_GPIO_Init+0x120>)
 80014a0:	f003 f9f0 	bl	8004884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80014a4:	2308      	movs	r3, #8
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4817      	ldr	r0, [pc, #92]	; (8001518 <MX_GPIO_Init+0x120>)
 80014bc:	f003 f830 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BT_Pin */
  GPIO_InitStruct.Pin = USER_BT_Pin;
 80014c0:	2301      	movs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BT_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_GPIO_Init+0x124>)
 80014d4:	f003 f824 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : INC_Pin ENTER_Pin */
  GPIO_InitStruct.Pin = INC_Pin|ENTER_Pin;
 80014d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <MX_GPIO_Init+0x120>)
 80014ee:	f003 f817 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEC_Pin */
  GPIO_InitStruct.Pin = DEC_Pin;
 80014f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEC_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_GPIO_Init+0x120>)
 8001508:	f003 f80a 	bl	8004520 <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40020000 	.word	0x40020000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001526:	e7fe      	b.n	8001526 <Error_Handler+0x6>

08001528 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <setup>:
		"USB"
};
char test_string[] = "I2C test ok     ";
std::vector<char> moving_string;

void setup(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001546:	2100      	movs	r1, #0
 8001548:	4830      	ldr	r0, [pc, #192]	; (800160c <setup+0xcc>)
 800154a:	f006 f959 	bl	8007800 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800154e:	2104      	movs	r1, #4
 8001550:	482e      	ldr	r0, [pc, #184]	; (800160c <setup+0xcc>)
 8001552:	f006 f955 	bl	8007800 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001556:	2108      	movs	r1, #8
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <setup+0xcc>)
 800155a:	f006 f951 	bl	8007800 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800155e:	210c      	movs	r1, #12
 8001560:	482a      	ldr	r0, [pc, #168]	; (800160c <setup+0xcc>)
 8001562:	f006 f94d 	bl	8007800 <HAL_TIM_PWM_Start>
	task1.set_callback(task1_handler);
 8001566:	492a      	ldr	r1, [pc, #168]	; (8001610 <setup+0xd0>)
 8001568:	482a      	ldr	r0, [pc, #168]	; (8001614 <setup+0xd4>)
 800156a:	f001 fc43 	bl	8002df4 <_ZN8schedule12set_callbackEPFvvE>
	task2.set_callback(task2_handler);
 800156e:	492a      	ldr	r1, [pc, #168]	; (8001618 <setup+0xd8>)
 8001570:	482a      	ldr	r0, [pc, #168]	; (800161c <setup+0xdc>)
 8001572:	f001 fc3f 	bl	8002df4 <_ZN8schedule12set_callbackEPFvvE>
	task3.set_callback(task3_handler);
 8001576:	492a      	ldr	r1, [pc, #168]	; (8001620 <setup+0xe0>)
 8001578:	482a      	ldr	r0, [pc, #168]	; (8001624 <setup+0xe4>)
 800157a:	f001 fc3b 	bl	8002df4 <_ZN8schedule12set_callbackEPFvvE>
	task1.start_timer();
 800157e:	4825      	ldr	r0, [pc, #148]	; (8001614 <setup+0xd4>)
 8001580:	f001 fc28 	bl	8002dd4 <_ZN8schedule11start_timerEv>
	task2.start_timer();
 8001584:	4825      	ldr	r0, [pc, #148]	; (800161c <setup+0xdc>)
 8001586:	f001 fc25 	bl	8002dd4 <_ZN8schedule11start_timerEv>
	task3.start_timer();
 800158a:	4826      	ldr	r0, [pc, #152]	; (8001624 <setup+0xe4>)
 800158c:	f001 fc22 	bl	8002dd4 <_ZN8schedule11start_timerEv>
	HAL_ADC_Start(&hadc1);
 8001590:	4825      	ldr	r0, [pc, #148]	; (8001628 <setup+0xe8>)
 8001592:	f002 f831 	bl	80035f8 <HAL_ADC_Start>
	send[0] = 0x20;
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <setup+0xec>)
 8001598:	2220      	movs	r2, #32
 800159a:	701a      	strb	r2, [r3, #0]
	send[1] = 0x67;
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <setup+0xec>)
 800159e:	2267      	movs	r2, #103	; 0x67
 80015a0:	705a      	strb	r2, [r3, #1]
	SPI_WRITE(send, 2, 50);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2108      	movs	r1, #8
 80015a6:	4822      	ldr	r0, [pc, #136]	; (8001630 <setup+0xf0>)
 80015a8:	f003 f96c 	bl	8004884 <HAL_GPIO_WritePin>
 80015ac:	2332      	movs	r3, #50	; 0x32
 80015ae:	2202      	movs	r2, #2
 80015b0:	491e      	ldr	r1, [pc, #120]	; (800162c <setup+0xec>)
 80015b2:	4820      	ldr	r0, [pc, #128]	; (8001634 <setup+0xf4>)
 80015b4:	f005 fc08 	bl	8006dc8 <HAL_SPI_Transmit>
 80015b8:	2201      	movs	r2, #1
 80015ba:	2108      	movs	r1, #8
 80015bc:	481c      	ldr	r0, [pc, #112]	; (8001630 <setup+0xf0>)
 80015be:	f003 f961 	bl	8004884 <HAL_GPIO_WritePin>
	delay(10);
 80015c2:	200a      	movs	r0, #10
 80015c4:	f001 ffb2 	bl	800352c <HAL_Delay>
	LCD.lcd_init();
 80015c8:	481b      	ldr	r0, [pc, #108]	; (8001638 <setup+0xf8>)
 80015ca:	f7ff fc6f 	bl	8000eac <_ZN3lcd8lcd_initEv>
	for(int i = 0; i < strlen(test_string); i++){
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	481a      	ldr	r0, [pc, #104]	; (800163c <setup+0xfc>)
 80015d4:	f7fe fdf8 	bl	80001c8 <strlen>
 80015d8:	4602      	mov	r2, r0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d90a      	bls.n	80015f6 <setup+0xb6>
		moving_string.push_back(test_string[i]);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <setup+0xfc>)
 80015e4:	4413      	add	r3, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	4815      	ldr	r0, [pc, #84]	; (8001640 <setup+0x100>)
 80015ea:	f000 fd16 	bl	800201a <_ZNSt6vectorIcSaIcEE9push_backERKc>
	for(int i = 0; i < strlen(test_string); i++){
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	e7ed      	b.n	80015d2 <setup+0x92>
	}
	moving_string.push_back(0);
 80015f6:	2300      	movs	r3, #0
 80015f8:	70fb      	strb	r3, [r7, #3]
 80015fa:	1cfb      	adds	r3, r7, #3
 80015fc:	4619      	mov	r1, r3
 80015fe:	4810      	ldr	r0, [pc, #64]	; (8001640 <setup+0x100>)
 8001600:	f000 fd3b 	bl	800207a <_ZNSt6vectorIcSaIcEE9push_backEOc>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000340 	.word	0x20000340
 8001610:	0800166d 	.word	0x0800166d
 8001614:	20000238 	.word	0x20000238
 8001618:	08001d6d 	.word	0x08001d6d
 800161c:	20000248 	.word	0x20000248
 8001620:	080018b9 	.word	0x080018b9
 8001624:	20000258 	.word	0x20000258
 8001628:	200003d4 	.word	0x200003d4
 800162c:	2000026c 	.word	0x2000026c
 8001630:	40021000 	.word	0x40021000
 8001634:	2000047c 	.word	0x2000047c
 8001638:	20000234 	.word	0x20000234
 800163c:	2000001c 	.word	0x2000001c
 8001640:	200002c0 	.word	0x200002c0

08001644 <loop>:

void loop(){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	task1.looping();
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <loop+0x1c>)
 800164a:	f001 fbe1 	bl	8002e10 <_ZN8schedule7loopingEv>
	task2.looping();
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <loop+0x20>)
 8001650:	f001 fbde 	bl	8002e10 <_ZN8schedule7loopingEv>
	task3.looping();
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <loop+0x24>)
 8001656:	f001 fbdb 	bl	8002e10 <_ZN8schedule7loopingEv>


}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000238 	.word	0x20000238
 8001664:	20000248 	.word	0x20000248
 8001668:	20000258 	.word	0x20000258

0800166c <task1_handler>:

void task1_handler(){ //display task
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
    LCD.lcd_clear_display();
 8001672:	487d      	ldr	r0, [pc, #500]	; (8001868 <task1_handler+0x1fc>)
 8001674:	f7ff fc6a 	bl	8000f4c <_ZN3lcd17lcd_clear_displayEv>
    delay(5);
 8001678:	2005      	movs	r0, #5
 800167a:	f001 ff57 	bl	800352c <HAL_Delay>
    LCD.lcd_goto_XY(2, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2102      	movs	r1, #2
 8001682:	4879      	ldr	r0, [pc, #484]	; (8001868 <task1_handler+0x1fc>)
 8001684:	f7ff fc6e 	bl	8000f64 <_ZN3lcd11lcd_goto_XYEii>
    delay(5);
 8001688:	2005      	movs	r0, #5
 800168a:	f001 ff4f 	bl	800352c <HAL_Delay>
    LCD.lcd_send_string("Mode:");
 800168e:	4977      	ldr	r1, [pc, #476]	; (800186c <task1_handler+0x200>)
 8001690:	4875      	ldr	r0, [pc, #468]	; (8001868 <task1_handler+0x1fc>)
 8001692:	f7ff fc45 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
    LCD.lcd_send_string(Mode_Status_String[current_test_mode]);
 8001696:	4b76      	ldr	r3, [pc, #472]	; (8001870 <task1_handler+0x204>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b75      	ldr	r3, [pc, #468]	; (8001874 <task1_handler+0x208>)
 800169e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4870      	ldr	r0, [pc, #448]	; (8001868 <task1_handler+0x1fc>)
 80016a6:	f7ff fc3b 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
	switch(current_test_mode){
 80016aa:	4b71      	ldr	r3, [pc, #452]	; (8001870 <task1_handler+0x204>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	f200 80d2 	bhi.w	8001858 <task1_handler+0x1ec>
 80016b4:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <task1_handler+0x50>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016d9 	.word	0x080016d9
 80016c0:	08001711 	.word	0x08001711
 80016c4:	0800171b 	.word	0x0800171b
 80016c8:	0800172d 	.word	0x0800172d
 80016cc:	08001759 	.word	0x08001759
 80016d0:	080017e5 	.word	0x080017e5
 80016d4:	08001847 	.word	0x08001847
		case MODE_GPIO :
			if(GPIO_current_test_mode == MODE_1){
 80016d8:	4b67      	ldr	r3, [pc, #412]	; (8001878 <task1_handler+0x20c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d108      	bne.n	80016f2 <task1_handler+0x86>
				task3.set_cycle(250);
 80016e0:	21fa      	movs	r1, #250	; 0xfa
 80016e2:	4866      	ldr	r0, [pc, #408]	; (800187c <task1_handler+0x210>)
 80016e4:	f001 fb68 	bl	8002db8 <_ZN8schedule9set_cycleEm>
				LCD.lcd_send_data('1');
 80016e8:	2131      	movs	r1, #49	; 0x31
 80016ea:	485f      	ldr	r0, [pc, #380]	; (8001868 <task1_handler+0x1fc>)
 80016ec:	f7ff fbae 	bl	8000e4c <_ZN3lcd13lcd_send_dataEc>
			}else if(GPIO_current_test_mode == MODE_2){
				task3.set_cycle(500);
				LCD.lcd_send_data('2');
			}
		break;
 80016f0:	e0b4      	b.n	800185c <task1_handler+0x1f0>
			}else if(GPIO_current_test_mode == MODE_2){
 80016f2:	4b61      	ldr	r3, [pc, #388]	; (8001878 <task1_handler+0x20c>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	f040 80b0 	bne.w	800185c <task1_handler+0x1f0>
				task3.set_cycle(500);
 80016fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001700:	485e      	ldr	r0, [pc, #376]	; (800187c <task1_handler+0x210>)
 8001702:	f001 fb59 	bl	8002db8 <_ZN8schedule9set_cycleEm>
				LCD.lcd_send_data('2');
 8001706:	2132      	movs	r1, #50	; 0x32
 8001708:	4857      	ldr	r0, [pc, #348]	; (8001868 <task1_handler+0x1fc>)
 800170a:	f7ff fb9f 	bl	8000e4c <_ZN3lcd13lcd_send_dataEc>
		break;
 800170e:	e0a5      	b.n	800185c <task1_handler+0x1f0>
		case MODE_PWM  :
			task3.set_cycle(1);
 8001710:	2101      	movs	r1, #1
 8001712:	485a      	ldr	r0, [pc, #360]	; (800187c <task1_handler+0x210>)
 8001714:	f001 fb50 	bl	8002db8 <_ZN8schedule9set_cycleEm>
		break;
 8001718:	e0a1      	b.n	800185e <task1_handler+0x1f2>
		case MODE_UART :{
			task3.set_cycle(1000);
 800171a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800171e:	4857      	ldr	r0, [pc, #348]	; (800187c <task1_handler+0x210>)
 8001720:	f001 fb4a 	bl	8002db8 <_ZN8schedule9set_cycleEm>
			state_value = true;
 8001724:	4b56      	ldr	r3, [pc, #344]	; (8001880 <task1_handler+0x214>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
		}
		break;
 800172a:	e098      	b.n	800185e <task1_handler+0x1f2>
		case MODE_I2C  :{
			task3.set_cycle(200);
 800172c:	21c8      	movs	r1, #200	; 0xc8
 800172e:	4853      	ldr	r0, [pc, #332]	; (800187c <task1_handler+0x210>)
 8001730:	f001 fb42 	bl	8002db8 <_ZN8schedule9set_cycleEm>
			LCD.lcd_goto_XY(1, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2101      	movs	r1, #1
 8001738:	484b      	ldr	r0, [pc, #300]	; (8001868 <task1_handler+0x1fc>)
 800173a:	f7ff fc13 	bl	8000f64 <_ZN3lcd11lcd_goto_XYEii>
			delay(2);
 800173e:	2002      	movs	r0, #2
 8001740:	f001 fef4 	bl	800352c <HAL_Delay>
			char *temper = &moving_string[0];
 8001744:	2100      	movs	r1, #0
 8001746:	484f      	ldr	r0, [pc, #316]	; (8001884 <task1_handler+0x218>)
 8001748:	f000 fca8 	bl	800209c <_ZNSt6vectorIcSaIcEEixEj>
 800174c:	6078      	str	r0, [r7, #4]
			LCD.lcd_send_string(temper);
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4845      	ldr	r0, [pc, #276]	; (8001868 <task1_handler+0x1fc>)
 8001752:	f7ff fbe5 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
		}
		break;
 8001756:	e082      	b.n	800185e <task1_handler+0x1f2>
		case MODE_SPI  :{
			task3.set_cycle(100);
 8001758:	2164      	movs	r1, #100	; 0x64
 800175a:	4848      	ldr	r0, [pc, #288]	; (800187c <task1_handler+0x210>)
 800175c:	f001 fb2c 	bl	8002db8 <_ZN8schedule9set_cycleEm>
			LCD.lcd_send_string(" Z:");
 8001760:	4949      	ldr	r1, [pc, #292]	; (8001888 <task1_handler+0x21c>)
 8001762:	4841      	ldr	r0, [pc, #260]	; (8001868 <task1_handler+0x1fc>)
 8001764:	f7ff fbdc 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			d2s(accZ, convert_number);
 8001768:	4b48      	ldr	r3, [pc, #288]	; (800188c <task1_handler+0x220>)
 800176a:	ed93 7b00 	vldr	d7, [r3]
 800176e:	4848      	ldr	r0, [pc, #288]	; (8001890 <task1_handler+0x224>)
 8001770:	eeb0 0a47 	vmov.f32	s0, s14
 8001774:	eef0 0a67 	vmov.f32	s1, s15
 8001778:	f000 fb76 	bl	8001e68 <d2s>
			LCD.lcd_send_string((char*)convert_number);
 800177c:	4944      	ldr	r1, [pc, #272]	; (8001890 <task1_handler+0x224>)
 800177e:	483a      	ldr	r0, [pc, #232]	; (8001868 <task1_handler+0x1fc>)
 8001780:	f7ff fbce 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			delay(2);
 8001784:	2002      	movs	r0, #2
 8001786:	f001 fed1 	bl	800352c <HAL_Delay>
			LCD.lcd_goto_XY(1, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	4836      	ldr	r0, [pc, #216]	; (8001868 <task1_handler+0x1fc>)
 8001790:	f7ff fbe8 	bl	8000f64 <_ZN3lcd11lcd_goto_XYEii>
			delay(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f001 fec9 	bl	800352c <HAL_Delay>
			LCD.lcd_send_string("X:");
 800179a:	493e      	ldr	r1, [pc, #248]	; (8001894 <task1_handler+0x228>)
 800179c:	4832      	ldr	r0, [pc, #200]	; (8001868 <task1_handler+0x1fc>)
 800179e:	f7ff fbbf 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			d2s(accX, convert_number);
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <task1_handler+0x22c>)
 80017a4:	ed93 7b00 	vldr	d7, [r3]
 80017a8:	4839      	ldr	r0, [pc, #228]	; (8001890 <task1_handler+0x224>)
 80017aa:	eeb0 0a47 	vmov.f32	s0, s14
 80017ae:	eef0 0a67 	vmov.f32	s1, s15
 80017b2:	f000 fb59 	bl	8001e68 <d2s>
			LCD.lcd_send_string((char*)convert_number);
 80017b6:	4936      	ldr	r1, [pc, #216]	; (8001890 <task1_handler+0x224>)
 80017b8:	482b      	ldr	r0, [pc, #172]	; (8001868 <task1_handler+0x1fc>)
 80017ba:	f7ff fbb1 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			LCD.lcd_send_string(" Y:");
 80017be:	4937      	ldr	r1, [pc, #220]	; (800189c <task1_handler+0x230>)
 80017c0:	4829      	ldr	r0, [pc, #164]	; (8001868 <task1_handler+0x1fc>)
 80017c2:	f7ff fbad 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			d2s(accY, convert_number);
 80017c6:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <task1_handler+0x234>)
 80017c8:	ed93 7b00 	vldr	d7, [r3]
 80017cc:	4830      	ldr	r0, [pc, #192]	; (8001890 <task1_handler+0x224>)
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f000 fb47 	bl	8001e68 <d2s>
			LCD.lcd_send_string((char*)convert_number);
 80017da:	492d      	ldr	r1, [pc, #180]	; (8001890 <task1_handler+0x224>)
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <task1_handler+0x1fc>)
 80017de:	f7ff fb9f 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>

		}
		break;
 80017e2:	e03c      	b.n	800185e <task1_handler+0x1f2>
		case MODE_ADC  :{
			task3.set_cycle(100);
 80017e4:	2164      	movs	r1, #100	; 0x64
 80017e6:	4825      	ldr	r0, [pc, #148]	; (800187c <task1_handler+0x210>)
 80017e8:	f001 fae6 	bl	8002db8 <_ZN8schedule9set_cycleEm>
			LCD.lcd_goto_XY(1, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2101      	movs	r1, #1
 80017f0:	481d      	ldr	r0, [pc, #116]	; (8001868 <task1_handler+0x1fc>)
 80017f2:	f7ff fbb7 	bl	8000f64 <_ZN3lcd11lcd_goto_XYEii>
			delay(2);
 80017f6:	2002      	movs	r0, #2
 80017f8:	f001 fe98 	bl	800352c <HAL_Delay>
			LCD.lcd_send_string("Vtage value:");
 80017fc:	4929      	ldr	r1, [pc, #164]	; (80018a4 <task1_handler+0x238>)
 80017fe:	481a      	ldr	r0, [pc, #104]	; (8001868 <task1_handler+0x1fc>)
 8001800:	f7ff fb8e 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
			double voltage = adc_value/4096.0*3.0;
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <task1_handler+0x23c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe27 	bl	800045c <__aeabi_ui2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <task1_handler+0x240>)
 8001814:	f7fe ffc6 	bl	80007a4 <__aeabi_ddiv>
 8001818:	4603      	mov	r3, r0
 800181a:	460c      	mov	r4, r1
 800181c:	4618      	mov	r0, r3
 800181e:	4621      	mov	r1, r4
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <task1_handler+0x244>)
 8001826:	f7fe fe93 	bl	8000550 <__aeabi_dmul>
 800182a:	4603      	mov	r3, r0
 800182c:	460c      	mov	r4, r1
 800182e:	e9c7 3402 	strd	r3, r4, [r7, #8]
			d2s(voltage, convert_number);
 8001832:	4817      	ldr	r0, [pc, #92]	; (8001890 <task1_handler+0x224>)
 8001834:	ed97 0b02 	vldr	d0, [r7, #8]
 8001838:	f000 fb16 	bl	8001e68 <d2s>
			LCD.lcd_send_string((char*)convert_number);
 800183c:	4914      	ldr	r1, [pc, #80]	; (8001890 <task1_handler+0x224>)
 800183e:	480a      	ldr	r0, [pc, #40]	; (8001868 <task1_handler+0x1fc>)
 8001840:	f7ff fb6e 	bl	8000f20 <_ZN3lcd15lcd_send_stringEPc>
		}
	    break;
 8001844:	e00b      	b.n	800185e <task1_handler+0x1f2>
		case MODE_USB  :{
			task3.set_cycle(1000);
 8001846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800184a:	480c      	ldr	r0, [pc, #48]	; (800187c <task1_handler+0x210>)
 800184c:	f001 fab4 	bl	8002db8 <_ZN8schedule9set_cycleEm>
			state_value = true;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <task1_handler+0x214>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001856:	e002      	b.n	800185e <task1_handler+0x1f2>

		default		   :
		break;
 8001858:	bf00      	nop
 800185a:	e000      	b.n	800185e <task1_handler+0x1f2>
		break;
 800185c:	bf00      	nop
	}

}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	bf00      	nop
 8001868:	20000234 	.word	0x20000234
 800186c:	0800daa4 	.word	0x0800daa4
 8001870:	20000268 	.word	0x20000268
 8001874:	20000000 	.word	0x20000000
 8001878:	20000269 	.word	0x20000269
 800187c:	20000258 	.word	0x20000258
 8001880:	200002a8 	.word	0x200002a8
 8001884:	200002c0 	.word	0x200002c0
 8001888:	0800daac 	.word	0x0800daac
 800188c:	200002a0 	.word	0x200002a0
 8001890:	200002ac 	.word	0x200002ac
 8001894:	0800dab0 	.word	0x0800dab0
 8001898:	20000290 	.word	0x20000290
 800189c:	0800dab4 	.word	0x0800dab4
 80018a0:	20000298 	.word	0x20000298
 80018a4:	0800dab8 	.word	0x0800dab8
 80018a8:	20000280 	.word	0x20000280
 80018ac:	40b00000 	.word	0x40b00000
 80018b0:	40080000 	.word	0x40080000
 80018b4:	00000000 	.word	0x00000000

080018b8 <task3_handler>:
void task3_handler(){
 80018b8:	b590      	push	{r4, r7, lr}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
	switch(current_test_mode){
 80018be:	4bb0      	ldr	r3, [pc, #704]	; (8001b80 <task3_handler+0x2c8>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	f200 8235 	bhi.w	8001d32 <task3_handler+0x47a>
 80018c8:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <task3_handler+0x18>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018ed 	.word	0x080018ed
 80018d4:	080019d9 	.word	0x080019d9
 80018d8:	08001a5f 	.word	0x08001a5f
 80018dc:	08001a75 	.word	0x08001a75
 80018e0:	08001acb 	.word	0x08001acb
 80018e4:	08001d25 	.word	0x08001d25
 80018e8:	08001d33 	.word	0x08001d33
		case MODE_GPIO :
			if(GPIO_current_test_mode == MODE_1){
 80018ec:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <task3_handler+0x2cc>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d13c      	bne.n	800196e <task3_handler+0xb6>
				ALL_LED_SET(0);
 80018f4:	4ba4      	ldr	r3, [pc, #656]	; (8001b88 <task3_handler+0x2d0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	4ba3      	ldr	r3, [pc, #652]	; (8001b88 <task3_handler+0x2d0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001900:	4ba1      	ldr	r3, [pc, #644]	; (8001b88 <task3_handler+0x2d0>)
 8001902:	2200      	movs	r2, #0
 8001904:	63da      	str	r2, [r3, #60]	; 0x3c
 8001906:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <task3_handler+0x2d0>)
 8001908:	2200      	movs	r2, #0
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
				switch(count){
 800190c:	4b9f      	ldr	r3, [pc, #636]	; (8001b8c <task3_handler+0x2d4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d81f      	bhi.n	8001954 <task3_handler+0x9c>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <task3_handler+0x64>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001937 	.word	0x08001937
 8001924:	08001941 	.word	0x08001941
 8001928:	0800194b 	.word	0x0800194b
				case 0:
					PD12_SET(1024);
 800192c:	4b96      	ldr	r3, [pc, #600]	; (8001b88 <task3_handler+0x2d0>)
 800192e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8001934:	e00e      	b.n	8001954 <task3_handler+0x9c>
				case 1:
					PD13_SET(1024);
 8001936:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <task3_handler+0x2d0>)
 8001938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
					break;
 800193e:	e009      	b.n	8001954 <task3_handler+0x9c>
				case 2:
					PD14_SET(1024);
 8001940:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <task3_handler+0x2d0>)
 8001942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
					break;
 8001948:	e004      	b.n	8001954 <task3_handler+0x9c>
				case 3:
					PD15_SET(1024);
 800194a:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <task3_handler+0x2d0>)
 800194c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 8001952:	bf00      	nop
				}
				count = (count+1)%4;
 8001954:	4b8d      	ldr	r3, [pc, #564]	; (8001b8c <task3_handler+0x2d4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	425a      	negs	r2, r3
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	bf58      	it	pl
 8001966:	4253      	negpl	r3, r2
 8001968:	4a88      	ldr	r2, [pc, #544]	; (8001b8c <task3_handler+0x2d4>)
 800196a:	6013      	str	r3, [r2, #0]
					ALL_LED_SET(1024);
					break;
				}
				count = (count+1)%2;
			}
		break;
 800196c:	e1e3      	b.n	8001d36 <task3_handler+0x47e>
			}else if(GPIO_current_test_mode == MODE_2){
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <task3_handler+0x2cc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	f040 81df 	bne.w	8001d36 <task3_handler+0x47e>
				switch(count){
 8001978:	4b84      	ldr	r3, [pc, #528]	; (8001b8c <task3_handler+0x2d4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <task3_handler+0xce>
 8001980:	2b01      	cmp	r3, #1
 8001982:	d00d      	beq.n	80019a0 <task3_handler+0xe8>
 8001984:	e01d      	b.n	80019c2 <task3_handler+0x10a>
					ALL_LED_SET(0);
 8001986:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <task3_handler+0x2d0>)
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
 800198c:	4b7e      	ldr	r3, [pc, #504]	; (8001b88 <task3_handler+0x2d0>)
 800198e:	2200      	movs	r2, #0
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
 8001992:	4b7d      	ldr	r3, [pc, #500]	; (8001b88 <task3_handler+0x2d0>)
 8001994:	2200      	movs	r2, #0
 8001996:	63da      	str	r2, [r3, #60]	; 0x3c
 8001998:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <task3_handler+0x2d0>)
 800199a:	2200      	movs	r2, #0
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 800199e:	e010      	b.n	80019c2 <task3_handler+0x10a>
					ALL_LED_SET(1024);
 80019a0:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <task3_handler+0x2d0>)
 80019a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
 80019a8:	4b77      	ldr	r3, [pc, #476]	; (8001b88 <task3_handler+0x2d0>)
 80019aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <task3_handler+0x2d0>)
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <task3_handler+0x2d0>)
 80019ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
					break;
 80019c0:	bf00      	nop
				count = (count+1)%2;
 80019c2:	4b72      	ldr	r3, [pc, #456]	; (8001b8c <task3_handler+0x2d4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	bfb8      	it	lt
 80019d0:	425b      	neglt	r3, r3
 80019d2:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <task3_handler+0x2d4>)
 80019d4:	6013      	str	r3, [r2, #0]
		break;
 80019d6:	e1ae      	b.n	8001d36 <task3_handler+0x47e>
		case MODE_PWM  :{
			ALL_LED_SET(count);
 80019d8:	4b6c      	ldr	r3, [pc, #432]	; (8001b8c <task3_handler+0x2d4>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <task3_handler+0x2d0>)
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <task3_handler+0x2d4>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <task3_handler+0x2d0>)
 80019e6:	639a      	str	r2, [r3, #56]	; 0x38
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <task3_handler+0x2d4>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <task3_handler+0x2d0>)
 80019ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <task3_handler+0x2d4>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <task3_handler+0x2d0>)
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
			count = 512 + (int)(512*sin(2*3.14159*0.5*step_value));
 80019f8:	4b65      	ldr	r3, [pc, #404]	; (8001b90 <task3_handler+0x2d8>)
 80019fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fe:	a35a      	add	r3, pc, #360	; (adr r3, 8001b68 <task3_handler+0x2b0>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fda4 	bl	8000550 <__aeabi_dmul>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	ec44 3b17 	vmov	d7, r3, r4
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f00a feaa 	bl	800c770 <sin>
 8001a1c:	ec51 0b10 	vmov	r0, r1, d0
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001a28:	f7fe fd92 	bl	8000550 <__aeabi_dmul>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4618      	mov	r0, r3
 8001a32:	4621      	mov	r1, r4
 8001a34:	f7ff f826 	bl	8000a84 <__aeabi_d2iz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a3e:	4a53      	ldr	r2, [pc, #332]	; (8001b8c <task3_handler+0x2d4>)
 8001a40:	6013      	str	r3, [r2, #0]
			step_value += 0.001;
 8001a42:	4b53      	ldr	r3, [pc, #332]	; (8001b90 <task3_handler+0x2d8>)
 8001a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a48:	a349      	add	r3, pc, #292	; (adr r3, 8001b70 <task3_handler+0x2b8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fbc9 	bl	80001e4 <__adddf3>
 8001a52:	4603      	mov	r3, r0
 8001a54:	460c      	mov	r4, r1
 8001a56:	4a4e      	ldr	r2, [pc, #312]	; (8001b90 <task3_handler+0x2d8>)
 8001a58:	e9c2 3400 	strd	r3, r4, [r2]
		}
		break;
 8001a5c:	e170      	b.n	8001d40 <task3_handler+0x488>
		case MODE_UART :{
			if(state_value == true){
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	; (8001b94 <task3_handler+0x2dc>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8169 	beq.w	8001d3a <task3_handler+0x482>
				UART_WRITE((uint8_t*)"Testing OK\r\n", sizeof("Testing OK\r\n")-1);
 8001a68:	220c      	movs	r2, #12
 8001a6a:	494b      	ldr	r1, [pc, #300]	; (8001b98 <task3_handler+0x2e0>)
 8001a6c:	484b      	ldr	r0, [pc, #300]	; (8001b9c <task3_handler+0x2e4>)
 8001a6e:	f006 fb0b 	bl	8008088 <HAL_UART_Transmit_DMA>
			}
		}
		break;
 8001a72:	e162      	b.n	8001d3a <task3_handler+0x482>
		case MODE_I2C  :{
			char temper_value = moving_string.at(0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	484a      	ldr	r0, [pc, #296]	; (8001ba0 <task3_handler+0x2e8>)
 8001a78:	f000 fb1f 	bl	80020ba <_ZNSt6vectorIcSaIcEE2atEj>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	72fb      	strb	r3, [r7, #11]
			moving_string.erase(moving_string.begin());
 8001a82:	4847      	ldr	r0, [pc, #284]	; (8001ba0 <task3_handler+0x2e8>)
 8001a84:	f000 fb2b 	bl	80020de <_ZNSt6vectorIcSaIcEE5beginEv>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	1d3a      	adds	r2, r7, #4
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fb33 	bl	80020fe <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	4841      	ldr	r0, [pc, #260]	; (8001ba0 <task3_handler+0x2e8>)
 8001a9c:	f000 fb40 	bl	8002120 <_ZNSt6vectorIcSaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS1_EE>
			moving_string[moving_string.size() - 1] = temper_value;
 8001aa0:	483f      	ldr	r0, [pc, #252]	; (8001ba0 <task3_handler+0x2e8>)
 8001aa2:	f000 fb64 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	483c      	ldr	r0, [pc, #240]	; (8001ba0 <task3_handler+0x2e8>)
 8001aae:	f000 faf5 	bl	800209c <_ZNSt6vectorIcSaIcEEixEj>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	7afb      	ldrb	r3, [r7, #11]
 8001ab6:	7013      	strb	r3, [r2, #0]
			moving_string.push_back(0);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72bb      	strb	r3, [r7, #10]
 8001abc:	f107 030a 	add.w	r3, r7, #10
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4837      	ldr	r0, [pc, #220]	; (8001ba0 <task3_handler+0x2e8>)
 8001ac4:	f000 fad9 	bl	800207a <_ZNSt6vectorIcSaIcEE9push_backEOc>
		}
		break;
 8001ac8:	e13a      	b.n	8001d40 <task3_handler+0x488>
		case MODE_SPI  :{
			send[0] = 0x28 | 0x80;
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <task3_handler+0x2ec>)
 8001acc:	22a8      	movs	r2, #168	; 0xa8
 8001ace:	701a      	strb	r2, [r3, #0]
			send[1] = 0x29 | 0x80;
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <task3_handler+0x2ec>)
 8001ad2:	22a9      	movs	r2, #169	; 0xa9
 8001ad4:	705a      	strb	r2, [r3, #1]
			send[2] = 0x2a | 0x80;
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <task3_handler+0x2ec>)
 8001ad8:	22aa      	movs	r2, #170	; 0xaa
 8001ada:	709a      	strb	r2, [r3, #2]
			send[3] = 0x2b | 0x80;
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <task3_handler+0x2ec>)
 8001ade:	22ab      	movs	r2, #171	; 0xab
 8001ae0:	70da      	strb	r2, [r3, #3]
			send[4] = 0x2c | 0x80;
 8001ae2:	4b30      	ldr	r3, [pc, #192]	; (8001ba4 <task3_handler+0x2ec>)
 8001ae4:	22ac      	movs	r2, #172	; 0xac
 8001ae6:	711a      	strb	r2, [r3, #4]
			send[5] = 0x2d | 0x80;
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <task3_handler+0x2ec>)
 8001aea:	22ad      	movs	r2, #173	; 0xad
 8001aec:	715a      	strb	r2, [r3, #5]
			SPI_RECEIVE(send, receive, 6, 50);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2108      	movs	r1, #8
 8001af2:	482d      	ldr	r0, [pc, #180]	; (8001ba8 <task3_handler+0x2f0>)
 8001af4:	f002 fec6 	bl	8004884 <HAL_GPIO_WritePin>
 8001af8:	2332      	movs	r3, #50	; 0x32
 8001afa:	2206      	movs	r2, #6
 8001afc:	4929      	ldr	r1, [pc, #164]	; (8001ba4 <task3_handler+0x2ec>)
 8001afe:	482b      	ldr	r0, [pc, #172]	; (8001bac <task3_handler+0x2f4>)
 8001b00:	f005 f962 	bl	8006dc8 <HAL_SPI_Transmit>
 8001b04:	2332      	movs	r3, #50	; 0x32
 8001b06:	2206      	movs	r2, #6
 8001b08:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <task3_handler+0x2f8>)
 8001b0a:	4828      	ldr	r0, [pc, #160]	; (8001bac <task3_handler+0x2f4>)
 8001b0c:	f005 fa90 	bl	8007030 <HAL_SPI_Receive>
 8001b10:	2201      	movs	r2, #1
 8001b12:	2108      	movs	r1, #8
 8001b14:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <task3_handler+0x2f0>)
 8001b16:	f002 feb5 	bl	8004884 <HAL_GPIO_WritePin>
			int temper = receive[0] << 8 | receive[1];
 8001b1a:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <task3_handler+0x2f8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <task3_handler+0x2f8>)
 8001b22:	7852      	ldrb	r2, [r2, #1]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
			if(temper >= 0 && temper <= 32767) {
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db44      	blt.n	8001bb8 <task3_handler+0x300>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b34:	da40      	bge.n	8001bb8 <task3_handler+0x300>
				accZ = -temper*2.0/32767;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	425b      	negs	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc9e 	bl	800047c <__aeabi_i2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	f7fe fb4e 	bl	80001e4 <__adddf3>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	460c      	mov	r4, r1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4621      	mov	r1, r4
 8001b50:	a309      	add	r3, pc, #36	; (adr r3, 8001b78 <task3_handler+0x2c0>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fe25 	bl	80007a4 <__aeabi_ddiv>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <task3_handler+0x2fc>)
 8001b60:	e9c2 3400 	strd	r3, r4, [r2]
 8001b64:	e04b      	b.n	8001bfe <task3_handler+0x346>
 8001b66:	bf00      	nop
 8001b68:	f01b866e 	.word	0xf01b866e
 8001b6c:	400921f9 	.word	0x400921f9
 8001b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b74:	3f50624d 	.word	0x3f50624d
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40dfffc0 	.word	0x40dfffc0
 8001b80:	20000268 	.word	0x20000268
 8001b84:	20000269 	.word	0x20000269
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	2000027c 	.word	0x2000027c
 8001b90:	20000288 	.word	0x20000288
 8001b94:	200002a8 	.word	0x200002a8
 8001b98:	0800dac8 	.word	0x0800dac8
 8001b9c:	200004d4 	.word	0x200004d4
 8001ba0:	200002c0 	.word	0x200002c0
 8001ba4:	2000026c 	.word	0x2000026c
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	2000047c 	.word	0x2000047c
 8001bb0:	20000274 	.word	0x20000274
 8001bb4:	200002a0 	.word	0x200002a0
			}else if(temper <= 65535 && temper >=32768){
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	da1e      	bge.n	8001bfe <task3_handler+0x346>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc6:	db1a      	blt.n	8001bfe <task3_handler+0x346>
				accZ = 2.0 - (temper-32767)/16384.0;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001bce:	3b7f      	subs	r3, #127	; 0x7f
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc53 	bl	800047c <__aeabi_i2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <task3_handler+0x498>)
 8001bdc:	f7fe fde2 	bl	80007a4 <__aeabi_ddiv>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	461a      	mov	r2, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	f04f 0000 	mov.w	r0, #0
 8001bec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bf0:	f7fe faf6 	bl	80001e0 <__aeabi_dsub>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <task3_handler+0x49c>)
 8001bfa:	e9c2 3400 	strd	r3, r4, [r2]
			}

			temper = receive[2] << 8 | receive[3];
 8001bfe:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <task3_handler+0x4a0>)
 8001c00:	789b      	ldrb	r3, [r3, #2]
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <task3_handler+0x4a0>)
 8001c06:	78d2      	ldrb	r2, [r2, #3]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
			if(temper >= 0 && temper <= 32767) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	db1b      	blt.n	8001c4a <task3_handler+0x392>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c18:	da17      	bge.n	8001c4a <task3_handler+0x392>
				accY = -temper*2.0/32767;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc2c 	bl	800047c <__aeabi_i2d>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	f7fe fadc 	bl	80001e4 <__adddf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	4618      	mov	r0, r3
 8001c32:	4621      	mov	r1, r4
 8001c34:	a344      	add	r3, pc, #272	; (adr r3, 8001d48 <task3_handler+0x490>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fdb3 	bl	80007a4 <__aeabi_ddiv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460c      	mov	r4, r1
 8001c42:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <task3_handler+0x4a4>)
 8001c44:	e9c2 3400 	strd	r3, r4, [r2]
 8001c48:	e022      	b.n	8001c90 <task3_handler+0x3d8>
			}else if(temper <= 65535 && temper >=32768){
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c50:	da1e      	bge.n	8001c90 <task3_handler+0x3d8>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c58:	db1a      	blt.n	8001c90 <task3_handler+0x3d8>
				accY = 2.0 - (temper-32767)/16384.0;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001c60:	3b7f      	subs	r3, #127	; 0x7f
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc0a 	bl	800047c <__aeabi_i2d>
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <task3_handler+0x498>)
 8001c6e:	f7fe fd99 	bl	80007a4 <__aeabi_ddiv>
 8001c72:	4603      	mov	r3, r0
 8001c74:	460c      	mov	r4, r1
 8001c76:	461a      	mov	r2, r3
 8001c78:	4623      	mov	r3, r4
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c82:	f7fe faad 	bl	80001e0 <__aeabi_dsub>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <task3_handler+0x4a4>)
 8001c8c:	e9c2 3400 	strd	r3, r4, [r2]
			}

			temper = receive[4] << 8 | receive[5];
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <task3_handler+0x4a0>)
 8001c92:	791b      	ldrb	r3, [r3, #4]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <task3_handler+0x4a0>)
 8001c98:	7952      	ldrb	r2, [r2, #5]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
			if(temper >= 0 && temper <= 32767) {
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db1b      	blt.n	8001cdc <task3_handler+0x424>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001caa:	da17      	bge.n	8001cdc <task3_handler+0x424>
				accX = -temper*2.0/32767;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	425b      	negs	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fbe3 	bl	800047c <__aeabi_i2d>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	f7fe fa93 	bl	80001e4 <__adddf3>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	a320      	add	r3, pc, #128	; (adr r3, 8001d48 <task3_handler+0x490>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fd6a 	bl	80007a4 <__aeabi_ddiv>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <task3_handler+0x4a8>)
 8001cd6:	e9c2 3400 	strd	r3, r4, [r2]
			}else if(temper <= 65535 && temper >=32768){
				accX = 2.0 - (temper-32767)/16384.0;
			}
		}
		break;
 8001cda:	e030      	b.n	8001d3e <task3_handler+0x486>
			}else if(temper <= 65535 && temper >=32768){
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	da2c      	bge.n	8001d3e <task3_handler+0x486>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cea:	db28      	blt.n	8001d3e <task3_handler+0x486>
				accX = 2.0 - (temper-32767)/16384.0;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001cf2:	3b7f      	subs	r3, #127	; 0x7f
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fbc1 	bl	800047c <__aeabi_i2d>
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <task3_handler+0x498>)
 8001d00:	f7fe fd50 	bl	80007a4 <__aeabi_ddiv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	460c      	mov	r4, r1
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	f04f 0000 	mov.w	r0, #0
 8001d10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d14:	f7fe fa64 	bl	80001e0 <__aeabi_dsub>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <task3_handler+0x4a8>)
 8001d1e:	e9c2 3400 	strd	r3, r4, [r2]
		break;
 8001d22:	e00c      	b.n	8001d3e <task3_handler+0x486>
		case MODE_ADC  :{
			adc_value = HAL_ADC_GetValue(&hadc1);
 8001d24:	480f      	ldr	r0, [pc, #60]	; (8001d64 <task3_handler+0x4ac>)
 8001d26:	f001 fd2d 	bl	8003784 <HAL_ADC_GetValue>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <task3_handler+0x4b0>)
 8001d2e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001d30:	e006      	b.n	8001d40 <task3_handler+0x488>
			}
		}
		break;

		default		   :
		break;
 8001d32:	bf00      	nop
 8001d34:	e004      	b.n	8001d40 <task3_handler+0x488>
		break;
 8001d36:	bf00      	nop
 8001d38:	e002      	b.n	8001d40 <task3_handler+0x488>
		break;
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <task3_handler+0x488>
		break;
 8001d3e:	bf00      	nop
	}
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40dfffc0 	.word	0x40dfffc0
 8001d50:	40d00000 	.word	0x40d00000
 8001d54:	200002a0 	.word	0x200002a0
 8001d58:	20000274 	.word	0x20000274
 8001d5c:	20000298 	.word	0x20000298
 8001d60:	20000290 	.word	0x20000290
 8001d64:	200003d4 	.word	0x200003d4
 8001d68:	20000280 	.word	0x20000280

08001d6c <task2_handler>:

void task2_handler(){ //button handler
 8001d6c:	b598      	push	{r3, r4, r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if(READ_INC_BT == 1){
 8001d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d74:	4834      	ldr	r0, [pc, #208]	; (8001e48 <task2_handler+0xdc>)
 8001d76:	f002 fd6d 	bl	8004854 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	bf0c      	ite	eq
 8001d80:	2301      	moveq	r3, #1
 8001d82:	2300      	movne	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <task2_handler+0x5a>
		count = 0;step_value = 0;state_value = false;
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <task2_handler+0xe0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <task2_handler+0xe4>)
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f04f 0400 	mov.w	r4, #0
 8001d9a:	e9c2 3400 	strd	r3, r4, [r2]
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <task2_handler+0xe8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
		current_test_mode = (Mode_Status_TypeDef)((current_test_mode + 1)%7);
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <task2_handler+0xec>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <task2_handler+0xf0>)
 8001dac:	fb83 1302 	smull	r1, r3, r3, r2
 8001db0:	4413      	add	r3, r2
 8001db2:	1099      	asrs	r1, r3, #2
 8001db4:	17d3      	asrs	r3, r2, #31
 8001db6:	1ac9      	subs	r1, r1, r3
 8001db8:	460b      	mov	r3, r1
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	1a5b      	subs	r3, r3, r1
 8001dbe:	1ad1      	subs	r1, r2, r3
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <task2_handler+0xec>)
 8001dc4:	701a      	strb	r2, [r3, #0]
	}
	if(READ_DEC_BT == 1){
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	481f      	ldr	r0, [pc, #124]	; (8001e48 <task2_handler+0xdc>)
 8001dcc:	f002 fd42 	bl	8004854 <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2301      	moveq	r3, #1
 8001dd8:	2300      	movne	r3, #0
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d018      	beq.n	8001e12 <task2_handler+0xa6>
		count = 0;step_value = 0;state_value = false;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <task2_handler+0xe0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <task2_handler+0xe4>)
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	f04f 0400 	mov.w	r4, #0
 8001df0:	e9c2 3400 	strd	r3, r4, [r2]
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <task2_handler+0xe8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
		current_test_mode = (Mode_Status_TypeDef)((current_test_mode == 0)?MODE_USB:(current_test_mode - 1));
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <task2_handler+0xec>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <task2_handler+0xa0>
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <task2_handler+0xec>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e000      	b.n	8001e0e <task2_handler+0xa2>
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <task2_handler+0xec>)
 8001e10:	7013      	strb	r3, [r2, #0]
	}

	if(READ_USER_BT == 1){
 8001e12:	2101      	movs	r1, #1
 8001e14:	4812      	ldr	r0, [pc, #72]	; (8001e60 <task2_handler+0xf4>)
 8001e16:	f002 fd1d 	bl	8004854 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <task2_handler+0xd6>
		GPIO_current_test_mode = (GPIO_current_test_mode == MODE_1)?MODE_2:MODE_1;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <task2_handler+0xf8>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <task2_handler+0xca>
 8001e32:	2201      	movs	r2, #1
 8001e34:	e000      	b.n	8001e38 <task2_handler+0xcc>
 8001e36:	2200      	movs	r2, #0
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <task2_handler+0xf8>)
 8001e3a:	701a      	strb	r2, [r3, #0]
		count = 0;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <task2_handler+0xe0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
	}

}
 8001e42:	bf00      	nop
 8001e44:	bd98      	pop	{r3, r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	2000027c 	.word	0x2000027c
 8001e50:	20000288 	.word	0x20000288
 8001e54:	200002a8 	.word	0x200002a8
 8001e58:	20000268 	.word	0x20000268
 8001e5c:	92492493 	.word	0x92492493
 8001e60:	40020000 	.word	0x40020000
 8001e64:	20000269 	.word	0x20000269

08001e68 <d2s>:

void d2s(double number, uint8_t *output){ //number smaller than 10
 8001e68:	b5b0      	push	{r4, r5, r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001e72:	6078      	str	r0, [r7, #4]
	if(number > 0){
 8001e74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f7fe fdf6 	bl	8000a70 <__aeabi_dcmpgt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d052      	beq.n	8001f30 <d2s+0xc8>
		output[0] = '0' + (int)(number);
 8001e8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4621      	mov	r1, r4
 8001e92:	f7fe fdf7 	bl	8000a84 <__aeabi_d2iz>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	3330      	adds	r3, #48	; 0x30
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	701a      	strb	r2, [r3, #0]
		output[1] = '.';
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	222e      	movs	r2, #46	; 0x2e
 8001ea8:	701a      	strb	r2, [r3, #0]
		output[2] = '0' + ((int)(number*10))%10;
 8001eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <d2s+0x18c>)
 8001eb4:	f7fe fb4c 	bl	8000550 <__aeabi_dmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	f7fe fde0 	bl	8000a84 <__aeabi_d2iz>
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <d2s+0x190>)
 8001ec8:	fb83 2301 	smull	r2, r3, r3, r1
 8001ecc:	109a      	asrs	r2, r3, #2
 8001ece:	17cb      	asrs	r3, r1, #31
 8001ed0:	1ad2      	subs	r2, r2, r3
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	1aca      	subs	r2, r1, r3
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	3230      	adds	r2, #48	; 0x30
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	701a      	strb	r2, [r3, #0]
		output[3] = '0' + ((int)(number*100))%10;
 8001ee8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <d2s+0x194>)
 8001ef2:	f7fe fb2d 	bl	8000550 <__aeabi_dmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	460c      	mov	r4, r1
 8001efa:	4618      	mov	r0, r3
 8001efc:	4621      	mov	r1, r4
 8001efe:	f7fe fdc1 	bl	8000a84 <__aeabi_d2iz>
 8001f02:	4601      	mov	r1, r0
 8001f04:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <d2s+0x190>)
 8001f06:	fb83 2301 	smull	r2, r3, r3, r1
 8001f0a:	109a      	asrs	r2, r3, #2
 8001f0c:	17cb      	asrs	r3, r1, #31
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	1aca      	subs	r2, r1, r3
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	3230      	adds	r2, #48	; 0x30
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]
		output[4] = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
		output[3] = '0' + ((int)(number1*10))%10;
		output[4] = '0' + ((int)(number1*100))%10;
		output[5] = 0;
	}

}
 8001f2e:	e05c      	b.n	8001fea <d2s+0x182>
		double number1 = fabs(number);
 8001f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f34:	4614      	mov	r4, r2
 8001f36:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001f3a:	e9c7 4504 	strd	r4, r5, [r7, #16]
		output[0] = '-';
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	222d      	movs	r2, #45	; 0x2d
 8001f42:	701a      	strb	r2, [r3, #0]
		output[1] = '0' + (int)(number1);
 8001f44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	f7fe fd9a 	bl	8000a84 <__aeabi_d2iz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	3230      	adds	r2, #48	; 0x30
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	701a      	strb	r2, [r3, #0]
		output[2] = '.';
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3302      	adds	r3, #2
 8001f62:	222e      	movs	r2, #46	; 0x2e
 8001f64:	701a      	strb	r2, [r3, #0]
		output[3] = '0' + ((int)(number1*10))%10;
 8001f66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b21      	ldr	r3, [pc, #132]	; (8001ff4 <d2s+0x18c>)
 8001f70:	f7fe faee 	bl	8000550 <__aeabi_dmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	460c      	mov	r4, r1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f7fe fd82 	bl	8000a84 <__aeabi_d2iz>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <d2s+0x190>)
 8001f84:	fb83 2301 	smull	r2, r3, r3, r1
 8001f88:	109a      	asrs	r2, r3, #2
 8001f8a:	17cb      	asrs	r3, r1, #31
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	1aca      	subs	r2, r1, r3
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	3230      	adds	r2, #48	; 0x30
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	701a      	strb	r2, [r3, #0]
		output[4] = '0' + ((int)(number1*100))%10;
 8001fa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <d2s+0x194>)
 8001fae:	f7fe facf 	bl	8000550 <__aeabi_dmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f7fe fd63 	bl	8000a84 <__aeabi_d2iz>
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <d2s+0x190>)
 8001fc2:	fb83 2301 	smull	r2, r3, r3, r1
 8001fc6:	109a      	asrs	r2, r3, #2
 8001fc8:	17cb      	asrs	r3, r1, #31
 8001fca:	1ad2      	subs	r2, r2, r3
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	1aca      	subs	r2, r1, r3
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	3230      	adds	r2, #48	; 0x30
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]
		output[5] = 0;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40240000 	.word	0x40240000
 8001ff8:	66666667 	.word	0x66666667
 8001ffc:	40590000 	.word	0x40590000

08002000 <_ZNSt6vectorIcSaIcEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f8cb 	bl	80021a6 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_ZNSt6vectorIcSaIcEE9push_backERKc>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	d00c      	beq.n	800204a <_ZNSt6vectorIcSaIcEE9push_backERKc+0x30>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f000 f8e5 	bl	8002208 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002048:	e008      	b.n	800205c <_ZNSt6vectorIcSaIcEE9push_backERKc+0x42>
	  _M_realloc_insert(end(), __x);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8ef 	bl	800222e <_ZNSt6vectorIcSaIcEE3endEv>
 8002050:	4603      	mov	r3, r0
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f8fa 	bl	8002250 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
      }
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <_ZNSt6vectorIcSaIcEE9push_backEOc>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002084:	6838      	ldr	r0, [r7, #0]
 8002086:	f7ff ffed 	bl	8002064 <_ZSt4moveIRcEONSt16remove_referenceIT_E4typeEOS2_>
 800208a:	4603      	mov	r3, r0
 800208c:	4619      	mov	r1, r3
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f971 	bl	8002376 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEEvDpOT_>
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZNSt6vectorIcSaIcEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	4413      	add	r3, r2
      }
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_ZNSt6vectorIcSaIcEE2atEj>:
      at(size_type __n)
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f984 	bl	80023d4 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj>
	return (*this)[__n];
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffe4 	bl	800209c <_ZNSt6vectorIcSaIcEEixEj>
 80020d4:	4603      	mov	r3, r0
      }
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <_ZNSt6vectorIcSaIcEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f990 	bl	8002414 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1IPcEERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameIS9_S8_E7__valueES5_E6__typeEEE>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f000 f993 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 800210e:	4603      	mov	r3, r0
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZNSt6vectorIcSaIcEE5eraseEN9__gnu_cxx17__normal_iteratorIPKcS1_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffd7 	bl	80020de <_ZNSt6vectorIcSaIcEE5beginEv>
 8002130:	4603      	mov	r3, r0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f988 	bl	800244a <_ZNKSt6vectorIcSaIcEE6cbeginEv>
 800213a:	4603      	mov	r3, r0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	f107 020c 	add.w	r2, r7, #12
 8002142:	463b      	mov	r3, r7
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f993 	bl	8002472 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800214c:	4602      	mov	r2, r0
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f9a1 	bl	800249c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800215a:	4603      	mov	r3, r0
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f9b3 	bl	80024ca <_ZNSt6vectorIcSaIcEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPcS1_EE>
 8002164:	4603      	mov	r3, r0
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f00a fa37 	bl	800c60a <_ZNSaIcED1Ev>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_ZNSt12_Vector_baseIcSaIcEEC1Ev>:
      _Vector_base()
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f9c6 	bl	8002542 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80021d0:	461a      	mov	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80021d8:	461a      	mov	r2, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9c6 	bl	800256c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
		      - this->_M_impl._M_start); }
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ffd3 	bl	800218e <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implD1Ev>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ffec 	bl	80021f2 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	68b9      	ldr	r1, [r7, #8]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f9b6 	bl	8002592 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_ZNSt6vectorIcSaIcEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1d1a      	adds	r2, r3, #4
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f8e7 	bl	8002414 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 800225c:	4a3f      	ldr	r2, [pc, #252]	; (800235c <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJRKcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x10c>)
 800225e:	2101      	movs	r1, #1
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f9af 	bl	80025c4 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff ff38 	bl	80020de <_ZNSt6vectorIcSaIcEE5beginEv>
 800226e:	4603      	mov	r3, r0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	f107 0214 	add.w	r2, r7, #20
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f9e9 	bl	8002654 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8002282:	4603      	mov	r3, r0
 8002284:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9f7 	bl	800267e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 8002290:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8002296:	68fc      	ldr	r4, [r7, #12]
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	18d5      	adds	r5, r2, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa7 	bl	80021f2 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4629      	mov	r1, r5
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ffac 	bl	8002208 <_ZNSt16allocator_traitsISaIcEE9constructIcJRKcEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681c      	ldr	r4, [r3, #0]
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f8b9 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80022c2:	4603      	mov	r3, r0
 80022c4:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f9ec 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80022ce:	4603      	mov	r3, r0
	  __new_finish
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	4629      	mov	r1, r5
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 f9f1 	bl	80026bc <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 80022da:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f8a4 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80022ec:	4603      	mov	r3, r0
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f9d5 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80022fc:	4603      	mov	r3, r0
	  __new_finish
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4629      	mov	r1, r5
 8002302:	4620      	mov	r0, r4
 8002304:	f000 f9da 	bl	80026bc <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8002308:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681c      	ldr	r4, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f9c6 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 800231a:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800231c:	461a      	mov	r2, r3
 800231e:	4629      	mov	r1, r5
 8002320:	4620      	mov	r0, r4
 8002322:	f000 f9f1 	bl	8002708 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8002330:	461a      	mov	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1ad3      	subs	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8002338:	461a      	mov	r2, r3
 800233a:	f000 f917 	bl	800256c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	441a      	add	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	609a      	str	r2, [r3, #8]
    }
 8002354:	bf00      	nop
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bdb0      	pop	{r4, r5, r7, pc}
 800235c:	0800dad8 	.word	0x0800dad8

08002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8002376:	b5b0      	push	{r4, r5, r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d011      	beq.n	80023b0 <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800238c:	687c      	ldr	r4, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685d      	ldr	r5, [r3, #4]
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	f7ff ffe4 	bl	8002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4629      	mov	r1, r5
 800239e:	4620      	mov	r0, r4
 80023a0:	f000 f9c0 	bl	8002724 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	605a      	str	r2, [r3, #4]
      }
 80023ae:	e00c      	b.n	80023ca <_ZNSt6vectorIcSaIcEE12emplace_backIJcEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff3c 	bl	800222e <_ZNSt6vectorIcSaIcEE3endEv>
 80023b6:	4604      	mov	r4, r0
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f7ff ffd1 	bl	8002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4621      	mov	r1, r4
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f9c1 	bl	800274c <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>
      }
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023d4 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fec5 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80023e4:	4602      	mov	r2, r0
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf2c      	ite	cs
 80023ec:	2301      	movcs	r3, #1
 80023ee:	2300      	movcc	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff feb9 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	4803      	ldr	r0, [pc, #12]	; (8002410 <_ZNKSt6vectorIcSaIcEE14_M_range_checkEj+0x3c>)
 8002404:	f00a f90b 	bl	800c61e <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	0800daf4 	.word	0x0800daf4

08002414 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>:
      __normal_iterator
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_ZNKSt6vectorIcSaIcEE6cbeginEv>:
      cbegin() const noexcept
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	4611      	mov	r1, r2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f9fa 	bl	800285c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_ZN9__gnu_cxxmiIPKcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002472:	b590      	push	{r4, r7, lr}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f9fd 	bl	800287c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 8002482:	4603      	mov	r3, r0
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461c      	mov	r4, r3
 8002488:	6838      	ldr	r0, [r7, #0]
 800248a:	f000 f9f7 	bl	800287c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>
 800248e:	4603      	mov	r3, r0
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	1ae3      	subs	r3, r4, r3
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}

0800249c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	f107 020c 	add.w	r2, r7, #12
 80024b4:	f107 0308 	add.w	r3, r7, #8
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff ffaa 	bl	8002414 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZNSt6vectorIcSaIcEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPcS1_EE>:
    vector<_Tp, _Alloc>::
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80024d4:	463b      	mov	r3, r7
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ffdf 	bl	800249c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 80024de:	4603      	mov	r3, r0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fea3 	bl	800222e <_ZNSt6vectorIcSaIcEE3endEv>
 80024e8:	4603      	mov	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	f107 020c 	add.w	r2, r7, #12
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f9cb 	bl	8002892 <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <_ZNSt6vectorIcSaIcEE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPcS1_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8002502:	463b      	mov	r3, r7
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ffc8 	bl	800249c <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEplEi>
 800250c:	4604      	mov	r4, r0
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fe8d 	bl	800222e <_ZNSt6vectorIcSaIcEE3endEv>
 8002514:	4603      	mov	r3, r0
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	4620      	mov	r0, r4
 800251c:	f000 f9d1 	bl	80028c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>
      --this->_M_impl._M_finish;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f000 f8db 	bl	80026ee <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>
      return __position;
 8002538:	683b      	ldr	r3, [r7, #0]
    }
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}

08002542 <_ZNSt12_Vector_baseIcSaIcEE12_Vector_implC1Ev>:
	_Vector_impl()
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f00a f85c 	bl	800c608 <_ZNSaIcEC1Ev>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
	{ }
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>:
      _M_deallocate(pointer __p, size_t __n)
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
	if (__p)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f9b4 	bl	80028f2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
      }
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002592:	b590      	push	{r4, r7, lr}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fe27 	bl	80021f2 <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 80025a4:	4603      	mov	r3, r0
 80025a6:	781c      	ldrb	r4, [r3, #0]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	2001      	movs	r0, #1
 80025ae:	f7fe ffbb 	bl	8001528 <_ZnwjPv>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJRKcEEEvPT_DpOT0_+0x2a>
 80025b8:	4622      	mov	r2, r4
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd90      	pop	{r4, r7, pc}

080025c4 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f99d 	bl	8002910 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 80025d6:	4604      	mov	r4, r0
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff fdc8 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 80025de:	4603      	mov	r3, r0
 80025e0:	1ae2      	subs	r2, r4, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	bf34      	ite	cc
 80025e8:	2301      	movcc	r3, #1
 80025ea:	2300      	movcs	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00a f80f 	bl	800c618 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fdb7 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8002600:	4604      	mov	r4, r0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fdb3 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 8002608:	4603      	mov	r3, r0
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	f107 0208 	add.w	r2, r7, #8
 8002610:	f107 0310 	add.w	r3, r7, #16
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f98b 	bl	8002932 <_ZSt3maxIjERKT_S2_S2_>
 800261c:	4603      	mov	r3, r0
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4423      	add	r3, r4
 8002622:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7ff fda2 	bl	800216e <_ZNKSt6vectorIcSaIcEE4sizeEv>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4293      	cmp	r3, r2
 8002630:	d306      	bcc.n	8002640 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x7c>
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f96c 	bl	8002910 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 8002638:	4602      	mov	r2, r0
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4293      	cmp	r3, r2
 800263e:	d904      	bls.n	800264a <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x86>
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f965 	bl	8002910 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>
 8002646:	4603      	mov	r3, r0
 8002648:	e000      	b.n	800264c <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc+0x88>
 800264a:	697b      	ldr	r3, [r7, #20]
      }
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002654:	b590      	push	{r4, r7, lr}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fee8 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002664:	4603      	mov	r3, r0
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461c      	mov	r4, r3
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f7ff fee2 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002670:	4603      	mov	r3, r0
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1ae3      	subs	r3, r4, r3
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}

0800267e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x1e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6839      	ldr	r1, [r7, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f961 	bl	800295a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 8002698:	4603      	mov	r3, r0
 800269a:	e000      	b.n	800269e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj+0x20>
 800269c:	2300      	movs	r3, #0
      }
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f954 	bl	8002978 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80026d0:	4604      	mov	r4, r0
 80026d2:	68b8      	ldr	r0, [r7, #8]
 80026d4:	f000 f950 	bl	8002978 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>
 80026d8:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4620      	mov	r0, r4
 80026e0:	f000 f959 	bl	8002996 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>
 80026e4:	4603      	mov	r3, r0
    }
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <_ZNSt16allocator_traitsISaIcEE7destroyIcEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f95c 	bl	80029b8 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f959 	bl	80029ce <_ZSt8_DestroyIPcEvT_S1_>
    }
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fe15 	bl	8002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f953 	bl	80029e8 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJcEEEvPT_DpOT0_>
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800274c:	b5b0      	push	{r4, r5, r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <_ZNSt6vectorIcSaIcEE17_M_realloc_insertIJcEEEvN9__gnu_cxx17__normal_iteratorIPcS1_EEDpOT_+0x10c>)
 800275a:	2101      	movs	r1, #1
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff ff31 	bl	80025c4 <_ZNKSt6vectorIcSaIcEE12_M_check_lenEjPKc>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff fcba 	bl	80020de <_ZNSt6vectorIcSaIcEE5beginEv>
 800276a:	4603      	mov	r3, r0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	f107 0214 	add.w	r2, r7, #20
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff6b 	bl	8002654 <_ZN9__gnu_cxxmiIPcSt6vectorIcSaIcEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800277e:	4603      	mov	r3, r0
 8002780:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff79 	bl	800267e <_ZNSt12_Vector_baseIcSaIcEE11_M_allocateEj>
 800278c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8002792:	68fc      	ldr	r4, [r7, #12]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	18d5      	adds	r5, r2, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fde0 	bl	8002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4629      	mov	r1, r5
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff ffbc 	bl	8002724 <_ZNSt16allocator_traitsISaIcEE9constructIcJcEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681c      	ldr	r4, [r3, #0]
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fe3b 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80027be:	4603      	mov	r3, r0
 80027c0:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff6e 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80027ca:	4603      	mov	r3, r0
	  __new_finish
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	4629      	mov	r1, r5
 80027d0:	4620      	mov	r0, r4
 80027d2:	f7ff ff73 	bl	80026bc <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 80027d6:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	3301      	adds	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fe26 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80027e8:	4603      	mov	r3, r0
 80027ea:	681c      	ldr	r4, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff57 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 80027f8:	4603      	mov	r3, r0
	  __new_finish
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4629      	mov	r1, r5
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ff5c 	bl	80026bc <_ZSt34__uninitialized_move_if_noexcept_aIPcS0_SaIcEET0_T_S3_S2_RT1_>
 8002804:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681c      	ldr	r4, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff48 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002816:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002818:	461a      	mov	r2, r3
 800281a:	4629      	mov	r1, r5
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff73 	bl	8002708 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1ad3      	subs	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8002834:	461a      	mov	r2, r3
 8002836:	f7ff fe99 	bl	800256c <_ZNSt12_Vector_baseIcSaIcEE13_M_deallocateEPcj>
      this->_M_impl._M_start = __new_start;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	441a      	add	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]
    }
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bdb0      	pop	{r4, r5, r7, pc}
 8002858:	0800dad8 	.word	0x0800dad8

0800285c <_ZN9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_ZNK9__gnu_cxx17__normal_iteratorIPKcSt6vectorIcSaIcEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_ZN9__gnu_cxxneIPcSt6vectorIcSaIcEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002892:	b590      	push	{r4, r7, lr}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fdc9 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	681c      	ldr	r4, [r3, #0]
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f7ff fdc4 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	429c      	cmp	r4, r3
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd90      	pop	{r4, r7, pc}

080028c2 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET0_T_S8_S7_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return std::__copy_move_a2<true>(std::__miter_base(__first),
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f8a3 	bl	8002a1a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEET_S7_>
 80028d4:	4604      	mov	r4, r0
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	f000 f89f 	bl	8002a1a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEET_S7_>
 80028dc:	4603      	mov	r3, r0
				       std::__miter_base(__last), __result);
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 f8a4 	bl	8002a30 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET1_T0_S8_S7_>
 80028e8:	4603      	mov	r3, r0
    }
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8ba 	bl	8002a7c <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZNKSt6vectorIcSaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8c7 	bl	8002aae <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002920:	4603      	mov	r3, r0
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f8b7 	bl	8002a96 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 8002928:	4603      	mov	r3, r0
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d201      	bcs.n	800294c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	e000      	b.n	800294e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800294c:	687b      	ldr	r3, [r7, #4]
    }
 800294e:	4618      	mov	r0, r3
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002964:	2200      	movs	r2, #0
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f8ab 	bl	8002ac4 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZSt32__make_move_if_noexcept_iteratorIcSt13move_iteratorIPcEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002980:	f107 030c 	add.w	r3, r7, #12
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f8b8 	bl	8002afc <_ZNSt13move_iteratorIPcEC1ES0_>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPcES1_cET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f8b6 	bl	8002b1a <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZN9__gnu_cxx13new_allocatorIcE7destroyIcEEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_ZSt8_DestroyIPcEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f8af 	bl	8002b3e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>
    }
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJcEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fcb3 	bl	8002360 <_ZSt7forwardIcEOT_RNSt16remove_referenceIS0_E4typeE>
 80029fa:	4603      	mov	r3, r0
 80029fc:	781c      	ldrb	r4, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4619      	mov	r1, r3
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fe fd90 	bl	8001528 <_ZnwjPv>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <_ZN9__gnu_cxx13new_allocatorIcE9constructIcJcEEEvPT_DpOT0_+0x2a>
 8002a0e:	4622      	mov	r2, r4
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}

08002a1a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEEET_S7_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_ZSt14__copy_move_a2ILb1EN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEES6_ET1_T0_S8_S7_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f889 	bl	8002b54 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8002a42:	4604      	mov	r4, r0
 8002a44:	68b8      	ldr	r0, [r7, #8]
 8002a46:	f000 f885 	bl	8002b54 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8002a4a:	4605      	mov	r5, r0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f881 	bl	8002b54 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4629      	mov	r1, r5
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f000 f889 	bl	8002b70 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 8002a62:	f107 0214 	add.w	r2, r7, #20
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fcd1 	bl	8002414 <_ZN9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEEC1ERKS1_>
 8002a72:	693b      	ldr	r3, [r7, #16]
    }
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bdb0      	pop	{r4, r5, r7, pc}

08002a7c <_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcj>:
      deallocate(pointer __p, size_type)
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002a88:	68b8      	ldr	r0, [r7, #8]
 8002a8a:	f009 fdbb 	bl	800c604 <_ZdlPv>
      }
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f878 	bl	8002b94 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_ZNKSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f85f 	bl	8002b94 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4293      	cmp	r3, r2
 8002adc:	bf8c      	ite	hi
 8002ade:	2301      	movhi	r3, #1
 8002ae0:	2300      	movls	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <_ZN9__gnu_cxx13new_allocatorIcE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ae8:	f009 fd90 	bl	800c60c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	f009 fd6f 	bl	800c5d0 <_Znwj>
 8002af2:	4603      	mov	r3, r0
      }
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_ZNSt13move_iteratorIPcEC1ES0_>:
      move_iterator(iterator_type __i)
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <_ZSt18uninitialized_copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f83c 	bl	8002bac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>
 8002b34:	4603      	mov	r3, r0
    }
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_ZNSt12_Destroy_auxILb1EE9__destroyIPcEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <_ZSt12__niter_baseIPcSt6vectorIcSaIcEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fc68 	bl	8002434 <_ZNK9__gnu_cxx17__normal_iteratorIPcSt6vectorIcSaIcEEE4baseEv>
 8002b64:	4603      	mov	r3, r0
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f821 	bl	8002bcc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>
 8002b8a:	4603      	mov	r3, r0
    }
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPcES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f81f 	bl	8002c00 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIcEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	461a      	mov	r2, r3
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f00a fe1c 	bl	800d82a <memmove>
	  return __result + _Num;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
	}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_ZSt4copyISt13move_iteratorIPcES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f80f 	bl	8002c30 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002c12:	4604      	mov	r4, r0
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f000 f80b 	bl	8002c30 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002c1a:	4603      	mov	r3, r0
	       __result));
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4620      	mov	r0, r4
 8002c22:	f000 f816 	bl	8002c52 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>
 8002c26:	4603      	mov	r3, r0
    }
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}

08002c30 <_ZSt12__miter_baseIPcEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f825 	bl	8002c8a <_ZNKSt13move_iteratorIPcE4baseEv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f82d 	bl	8002ca2 <_ZSt12__miter_baseIPcET_S1_>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <_ZSt14__copy_move_a2ILb1EPcS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002c52:	b5b0      	push	{r4, r5, r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f82a 	bl	8002cb8 <_ZSt12__niter_baseIPcET_S1_>
 8002c64:	4604      	mov	r4, r0
 8002c66:	68b8      	ldr	r0, [r7, #8]
 8002c68:	f000 f826 	bl	8002cb8 <_ZSt12__niter_baseIPcET_S1_>
 8002c6c:	4605      	mov	r5, r0
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f822 	bl	8002cb8 <_ZSt12__niter_baseIPcET_S1_>
 8002c74:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8002c76:	461a      	mov	r2, r3
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff ff78 	bl	8002b70 <_ZSt13__copy_move_aILb1EPcS0_ET1_T0_S2_S1_>
 8002c80:	4603      	mov	r3, r0
    }
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdb0      	pop	{r4, r5, r7, pc}

08002c8a <_ZNKSt13move_iteratorIPcE4baseEv>:
      base() const
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_ZSt12__miter_baseIPcET_S1_>:
    __miter_base(_Iterator __it)
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_ZSt12__niter_baseIPcET_S1_>:
    __niter_base(_Iterator __it)
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <_Z41__static_initialization_and_destruction_0ii>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d114      	bne.n	8002d0a <_Z41__static_initialization_and_destruction_0ii+0x3a>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10f      	bne.n	8002d0a <_Z41__static_initialization_and_destruction_0ii+0x3a>
schedule task1(300); //display
 8002cea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002cee:	480e      	ldr	r0, [pc, #56]	; (8002d28 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002cf0:	f000 f84d 	bl	8002d8e <_ZN8scheduleC1Em>
schedule task2(200); //button
 8002cf4:	21c8      	movs	r1, #200	; 0xc8
 8002cf6:	480d      	ldr	r0, [pc, #52]	; (8002d2c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002cf8:	f000 f849 	bl	8002d8e <_ZN8scheduleC1Em>
schedule task3(250); //mode handler
 8002cfc:	21fa      	movs	r1, #250	; 0xfa
 8002cfe:	480c      	ldr	r0, [pc, #48]	; (8002d30 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002d00:	f000 f845 	bl	8002d8e <_ZN8scheduleC1Em>
std::vector<char> moving_string;
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002d06:	f7ff f97b 	bl	8002000 <_ZNSt6vectorIcSaIcEEC1Ev>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d102      	bne.n	8002d20 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002d1a:	4806      	ldr	r0, [pc, #24]	; (8002d34 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002d1c:	f000 f80c 	bl	8002d38 <_ZNSt6vectorIcSaIcEED1Ev>
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000238 	.word	0x20000238
 8002d2c:	20000248 	.word	0x20000248
 8002d30:	20000258 	.word	0x20000258
 8002d34:	200002c0 	.word	0x200002c0

08002d38 <_ZNSt6vectorIcSaIcEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681c      	ldr	r4, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fcab 	bl	80026a6 <_ZNSt12_Vector_baseIcSaIcEE19_M_get_Tp_allocatorEv>
 8002d50:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002d52:	461a      	mov	r2, r3
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff fcd6 	bl	8002708 <_ZSt8_DestroyIPccEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa2e 	bl	80021c0 <_ZNSt12_Vector_baseIcSaIcEED1Ev>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bdb0      	pop	{r4, r5, r7, pc}

08002d6e <_GLOBAL__sub_I_task1>:
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7ff ffaa 	bl	8002cd0 <_Z41__static_initialization_and_destruction_0ii>
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_GLOBAL__sub_D_task1>:
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff ffa2 	bl	8002cd0 <_Z41__static_initialization_and_destruction_0ii>
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_ZN8scheduleC1Em>:
 *      Author: Admin
 */

#include "schedule.h"

schedule::schedule(uint32_t Timer)
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	731a      	strb	r2, [r3, #12]
{
  T = Timer;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	605a      	str	r2, [r3, #4]
}
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_ZN8schedule9set_cycleEm>:
void schedule::set_cycle(uint32_t Timer)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	T = Timer;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_ZN8schedule11start_timerEv>:
void schedule::start_timer()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  t = HAL_GetTick();
 8002ddc:	f000 fb9a 	bl	8003514 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]
  enable = true;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	731a      	strb	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZN8schedule12set_callbackEPFvvE>:
void schedule::stop_timer()
{
  enable = false;
}
void schedule::set_callback(Callback)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  this->callback_function = callback_function;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZN8schedule7loopingEv>:

void schedule::looping()
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if((uint32_t)(HAL_GetTick() - t) >= T && enable == true) {
 8002e18:	f000 fb7c 	bl	8003514 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d305      	bcc.n	8002e38 <_ZN8schedule7loopingEv+0x28>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7b1b      	ldrb	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <_ZN8schedule7loopingEv+0x28>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <_ZN8schedule7loopingEv+0x2a>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <_ZN8schedule7loopingEv+0x3e>
    t = HAL_GetTick();
 8002e3e:	f000 fb69 	bl	8003514 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
    this->callback_function();
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4798      	blx	r3
  }
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_MspInit+0x4c>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_ADC_MspInit+0x7c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d127      	bne.n	8002f1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_ADC_MspInit+0x80>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f02:	2310      	movs	r3, #16
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f06:	2303      	movs	r3, #3
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	; (8002f2c <HAL_ADC_MspInit+0x84>)
 8002f16:	f001 fb03 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3728      	adds	r7, #40	; 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40012000 	.word	0x40012000
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40020000 	.word	0x40020000

08002f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_I2C_MspInit+0x84>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12c      	bne.n	8002fac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002f6e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f74:	2312      	movs	r3, #18
 8002f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f80:	2304      	movs	r3, #4
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480c      	ldr	r0, [pc, #48]	; (8002fbc <HAL_I2C_MspInit+0x8c>)
 8002f8c:	f001 fac8 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_I2C_MspInit+0x88>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	; 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40005400 	.word	0x40005400
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020400 	.word	0x40020400

08002fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_SPI_MspInit+0x84>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d12b      	bne.n	800303a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a10      	ldr	r2, [pc, #64]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800301a:	23e0      	movs	r3, #224	; 0xe0
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003026:	2303      	movs	r3, #3
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800302a:	2305      	movs	r3, #5
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8003036:	f001 fa73 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800303a:	bf00      	nop
 800303c:	3728      	adds	r7, #40	; 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40013000 	.word	0x40013000
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000

08003050 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <HAL_TIM_PWM_MspInit+0x3c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d10d      	bne.n	800307e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_TIM_PWM_MspInit+0x40>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40000800 	.word	0x40000800
 8003090:	40023800 	.word	0x40023800

08003094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a12      	ldr	r2, [pc, #72]	; (80030fc <HAL_TIM_MspPostInit+0x68>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d11e      	bne.n	80030f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030c0:	f043 0308 	orr.w	r3, r3, #8
 80030c4:	6313      	str	r3, [r2, #48]	; 0x30
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_TIM_MspPostInit+0x6c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80030d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80030d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030e4:	2302      	movs	r3, #2
 80030e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4619      	mov	r1, r3
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <HAL_TIM_MspPostInit+0x70>)
 80030f0:	f001 fa16 	bl	8004520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030f4:	bf00      	nop
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40000800 	.word	0x40000800
 8003100:	40023800 	.word	0x40023800
 8003104:	40020c00 	.word	0x40020c00

08003108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 0314 	add.w	r3, r7, #20
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a4c      	ldr	r2, [pc, #304]	; (8003258 <HAL_UART_MspInit+0x150>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f040 8091 	bne.w	800324e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_UART_MspInit+0x154>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a49      	ldr	r2, [pc, #292]	; (800325c <HAL_UART_MspInit+0x154>)
 8003136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313a:	6413      	str	r3, [r2, #64]	; 0x40
 800313c:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_UART_MspInit+0x154>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_UART_MspInit+0x154>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a42      	ldr	r2, [pc, #264]	; (800325c <HAL_UART_MspInit+0x154>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_UART_MspInit+0x154>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003164:	230c      	movs	r3, #12
 8003166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003174:	2307      	movs	r3, #7
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	4619      	mov	r1, r3
 800317e:	4838      	ldr	r0, [pc, #224]	; (8003260 <HAL_UART_MspInit+0x158>)
 8003180:	f001 f9ce 	bl	8004520 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003184:	4b37      	ldr	r3, [pc, #220]	; (8003264 <HAL_UART_MspInit+0x15c>)
 8003186:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_UART_MspInit+0x160>)
 8003188:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_UART_MspInit+0x15c>)
 800318c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003190:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_UART_MspInit+0x15c>)
 8003194:	2240      	movs	r2, #64	; 0x40
 8003196:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_UART_MspInit+0x15c>)
 800319a:	2200      	movs	r2, #0
 800319c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031b8:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031c4:	4827      	ldr	r0, [pc, #156]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031c6:	f000 fe1b 	bl	8003e00 <HAL_DMA_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80031d0:	f7fe f9a6 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_UART_MspInit+0x15c>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_UART_MspInit+0x164>)
 80031e2:	4a23      	ldr	r2, [pc, #140]	; (8003270 <HAL_UART_MspInit+0x168>)
 80031e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80031e6:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_UART_MspInit+0x164>)
 80031e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ee:	4b1f      	ldr	r3, [pc, #124]	; (800326c <HAL_UART_MspInit+0x164>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_UART_MspInit+0x164>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fa:	4b1c      	ldr	r3, [pc, #112]	; (800326c <HAL_UART_MspInit+0x164>)
 80031fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003200:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_UART_MspInit+0x164>)
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003208:	4b18      	ldr	r3, [pc, #96]	; (800326c <HAL_UART_MspInit+0x164>)
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_UART_MspInit+0x164>)
 8003210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003214:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_UART_MspInit+0x164>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_UART_MspInit+0x164>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003222:	4812      	ldr	r0, [pc, #72]	; (800326c <HAL_UART_MspInit+0x164>)
 8003224:	f000 fdec 	bl	8003e00 <HAL_DMA_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800322e:	f7fe f977 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a0d      	ldr	r2, [pc, #52]	; (800326c <HAL_UART_MspInit+0x164>)
 8003236:	635a      	str	r2, [r3, #52]	; 0x34
 8003238:	4a0c      	ldr	r2, [pc, #48]	; (800326c <HAL_UART_MspInit+0x164>)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	2026      	movs	r0, #38	; 0x26
 8003244:	f000 fda5 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003248:	2026      	movs	r0, #38	; 0x26
 800324a:	f000 fdbe 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40004400 	.word	0x40004400
 800325c:	40023800 	.word	0x40023800
 8003260:	40020000 	.word	0x40020000
 8003264:	2000041c 	.word	0x2000041c
 8003268:	400260a0 	.word	0x400260a0
 800326c:	200002e0 	.word	0x200002e0
 8003270:	40026088 	.word	0x40026088

08003274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003278:	e7fe      	b.n	8003278 <NMI_Handler+0x4>

0800327a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800327e:	e7fe      	b.n	800327e <HardFault_Handler+0x4>

08003280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003284:	e7fe      	b.n	8003284 <MemManage_Handler+0x4>

08003286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328a:	e7fe      	b.n	800328a <BusFault_Handler+0x4>

0800328c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <UsageFault_Handler+0x4>

08003292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c0:	f000 f914 	bl	80034ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <DMA1_Stream5_IRQHandler+0x10>)
 80032ce:	f000 febf 	bl	8004050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200002e0 	.word	0x200002e0

080032dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <DMA1_Stream6_IRQHandler+0x10>)
 80032e2:	f000 feb5 	bl	8004050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000041c 	.word	0x2000041c

080032f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <USART2_IRQHandler+0x10>)
 80032f6:	f004 ff33 	bl	8008160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200004d4 	.word	0x200004d4

08003304 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <OTG_FS_IRQHandler+0x10>)
 800330a:	f002 f864 	bl	80053d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200019e8 	.word	0x200019e8

08003318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	return 1;
 800331c:	2301      	movs	r3, #1
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_kill>:

int _kill(int pid, int sig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003332:	f00a fa35 	bl	800d7a0 <__errno>
 8003336:	4602      	mov	r2, r0
 8003338:	2316      	movs	r3, #22
 800333a:	6013      	str	r3, [r2, #0]
	return -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_exit>:

void _exit (int status)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003350:	f04f 31ff 	mov.w	r1, #4294967295
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ffe7 	bl	8003328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800335a:	e7fe      	b.n	800335a <_exit+0x12>

0800335c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <_sbrk+0x5c>)
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <_sbrk+0x60>)
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <_sbrk+0x64>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <_sbrk+0x64>)
 800337a:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <_sbrk+0x68>)
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d207      	bcs.n	800339c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800338c:	f00a fa08 	bl	800d7a0 <__errno>
 8003390:	4602      	mov	r2, r0
 8003392:	230c      	movs	r3, #12
 8003394:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e009      	b.n	80033b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <_sbrk+0x64>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <_sbrk+0x64>)
 80033ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ae:	68fb      	ldr	r3, [r7, #12]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20020000 	.word	0x20020000
 80033bc:	00000400 	.word	0x00000400
 80033c0:	200002cc 	.word	0x200002cc
 80033c4:	20001df8 	.word	0x20001df8

080033c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <SystemInit+0x28>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <SystemInit+0x28>)
 80033d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <SystemInit+0x28>)
 80033de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033e2:	609a      	str	r2, [r3, #8]
#endif
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800342c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033fa:	e003      	b.n	8003404 <LoopCopyDataInit>

080033fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003400:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003402:	3104      	adds	r1, #4

08003404 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003404:	480b      	ldr	r0, [pc, #44]	; (8003434 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003408:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800340a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800340c:	d3f6      	bcc.n	80033fc <CopyDataInit>
  ldr  r2, =_sbss
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003410:	e002      	b.n	8003418 <LoopFillZerobss>

08003412 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003412:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003414:	f842 3b04 	str.w	r3, [r2], #4

08003418 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800341a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800341c:	d3f9      	bcc.n	8003412 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800341e:	f7ff ffd3 	bl	80033c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003422:	f00a f9c3 	bl	800d7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003426:	f7fd fddf 	bl	8000fe8 <main>
  bx  lr    
 800342a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800342c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003430:	0800de14 	.word	0x0800de14
  ldr  r0, =_sdata
 8003434:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003438:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 800343c:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8003440:	20001df4 	.word	0x20001df4

08003444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003444:	e7fe      	b.n	8003444 <ADC_IRQHandler>
	...

08003448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <HAL_Init+0x40>)
 8003452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_Init+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_Init+0x40>)
 800345e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_Init+0x40>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_Init+0x40>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003470:	2003      	movs	r0, #3
 8003472:	f000 fc83 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003476:	2000      	movs	r0, #0
 8003478:	f000 f808 	bl	800348c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800347c:	f7ff fcec 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00

0800348c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_InitTick+0x54>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_InitTick+0x58>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4619      	mov	r1, r3
 800349e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fc9b 	bl	8003de6 <HAL_SYSTICK_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00e      	b.n	80034d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d80a      	bhi.n	80034d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	f000 fc63 	bl	8003d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034cc:	4a06      	ldr	r2, [pc, #24]	; (80034e8 <HAL_InitTick+0x5c>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000030 	.word	0x20000030
 80034e4:	20000038 	.word	0x20000038
 80034e8:	20000034 	.word	0x20000034

080034ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_IncTick+0x20>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_IncTick+0x24>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_IncTick+0x24>)
 80034fe:	6013      	str	r3, [r2, #0]
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000038 	.word	0x20000038
 8003510:	20000514 	.word	0x20000514

08003514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_GetTick+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000514 	.word	0x20000514

0800352c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7ff ffee 	bl	8003514 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d005      	beq.n	8003552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_Delay+0x40>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003552:	bf00      	nop
 8003554:	f7ff ffde 	bl	8003514 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d8f7      	bhi.n	8003554 <HAL_Delay+0x28>
  {
  }
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000038 	.word	0x20000038

08003570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e033      	b.n	80035ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fc8a 	bl	8002ea8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b6:	f023 0302 	bic.w	r3, r3, #2
 80035ba:	f043 0202 	orr.w	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa0e 	bl	80039e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
 80035de:	e001      	b.n	80035e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_ADC_Start+0x1a>
 800360e:	2302      	movs	r3, #2
 8003610:	e0a5      	b.n	800375e <HAL_ADC_Start+0x166>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d018      	beq.n	800365a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003638:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_ADC_Start+0x174>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4c      	ldr	r2, [pc, #304]	; (8003770 <HAL_ADC_Start+0x178>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0c9a      	lsrs	r2, r3, #18
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800364c:	e002      	b.n	8003654 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3b01      	subs	r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f9      	bne.n	800364e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d179      	bne.n	800375c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003692:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	d106      	bne.n	80036b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f023 0206 	bic.w	r2, r3, #6
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
 80036b4:	e002      	b.n	80036bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_ADC_Start+0x17c>)
 80036c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80036d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d12a      	bne.n	8003734 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_ADC_Start+0x180>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d015      	beq.n	8003714 <HAL_ADC_Start+0x11c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_ADC_Start+0x184>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d105      	bne.n	80036fe <HAL_ADC_Start+0x106>
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_ADC_Start+0x17c>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_ADC_Start+0x188>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d129      	bne.n	800375c <HAL_ADC_Start+0x164>
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_ADC_Start+0x17c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2b0f      	cmp	r3, #15
 8003712:	d823      	bhi.n	800375c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11c      	bne.n	800375c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	e013      	b.n	800375c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_ADC_Start+0x180>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10e      	bne.n	800375c <HAL_ADC_Start+0x164>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d107      	bne.n	800375c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800375a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000030 	.word	0x20000030
 8003770:	431bde83 	.word	0x431bde83
 8003774:	40012300 	.word	0x40012300
 8003778:	40012000 	.word	0x40012000
 800377c:	40012100 	.word	0x40012100
 8003780:	40012200 	.word	0x40012200

08003784 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x1c>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e105      	b.n	80039c8 <HAL_ADC_ConfigChannel+0x228>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b09      	cmp	r3, #9
 80037ca:	d925      	bls.n	8003818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	3b1e      	subs	r3, #30
 80037e2:	2207      	movs	r2, #7
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43da      	mvns	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	400a      	ands	r2, r1
 80037f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4618      	mov	r0, r3
 8003804:	4603      	mov	r3, r0
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4403      	add	r3, r0
 800380a:	3b1e      	subs	r3, #30
 800380c:	409a      	lsls	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e022      	b.n	800385e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	2207      	movs	r2, #7
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	400a      	ands	r2, r1
 800383a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6919      	ldr	r1, [r3, #16]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	4618      	mov	r0, r3
 800384e:	4603      	mov	r3, r0
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4403      	add	r3, r0
 8003854:	409a      	lsls	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d824      	bhi.n	80038b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	221f      	movs	r2, #31
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	400a      	ands	r2, r1
 8003886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	4618      	mov	r0, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	3b05      	subs	r3, #5
 80038a2:	fa00 f203 	lsl.w	r2, r0, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	635a      	str	r2, [r3, #52]	; 0x34
 80038ae:	e04c      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d824      	bhi.n	8003902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b23      	subs	r3, #35	; 0x23
 80038ca:	221f      	movs	r2, #31
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b23      	subs	r3, #35	; 0x23
 80038f4:	fa00 f203 	lsl.w	r2, r0, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003900:	e023      	b.n	800394a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	3b41      	subs	r3, #65	; 0x41
 8003914:	221f      	movs	r2, #31
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	400a      	ands	r2, r1
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	3b41      	subs	r3, #65	; 0x41
 800393e:	fa00 f203 	lsl.w	r2, r0, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_ADC_ConfigChannel+0x234>)
 800394c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_ADC_ConfigChannel+0x238>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d109      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1cc>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b12      	cmp	r3, #18
 800395e:	d105      	bne.n	800396c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_ADC_ConfigChannel+0x238>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d123      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d003      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x1e6>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b11      	cmp	r3, #17
 8003984:	d11b      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b10      	cmp	r3, #16
 8003998:	d111      	bne.n	80039be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_ADC_ConfigChannel+0x23c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <HAL_ADC_ConfigChannel+0x240>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	0c9a      	lsrs	r2, r3, #18
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b0:	e002      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f9      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40012300 	.word	0x40012300
 80039d8:	40012000 	.word	0x40012000
 80039dc:	20000030 	.word	0x20000030
 80039e0:	431bde83 	.word	0x431bde83

080039e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039ec:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <ADC_Init+0x1f0>)
 80039ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <ADC_Init+0x1f4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6899      	ldr	r1, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	e00f      	b.n	8003ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0202 	bic.w	r2, r2, #2
 8003af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7e1b      	ldrb	r3, [r3, #24]
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	035a      	lsls	r2, r3, #13
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e007      	b.n	8003b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	051a      	lsls	r2, r3, #20
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b9a:	025a      	lsls	r2, r3, #9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	029a      	lsls	r2, r3, #10
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012300 	.word	0x40012300
 8003bd8:	0f000001 	.word	0x0f000001

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff3e 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff8e 	bl	8003cd0 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff31 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa2 	bl	8003d38 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e0c:	f7ff fb82 	bl	8003514 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e099      	b.n	8003f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0201 	bic.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e3c:	e00f      	b.n	8003e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e3e:	f7ff fb69 	bl	8003514 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d908      	bls.n	8003e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2203      	movs	r2, #3
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e078      	b.n	8003f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e8      	bne.n	8003e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4b38      	ldr	r3, [pc, #224]	; (8003f58 <HAL_DMA_Init+0x158>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d107      	bne.n	8003ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0307 	bic.w	r3, r3, #7
 8003ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d117      	bne.n	8003f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00e      	beq.n	8003f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa91 	bl	800442c <DMA_CheckFifoParam>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2240      	movs	r2, #64	; 0x40
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e016      	b.n	8003f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fa48 	bl	80043c0 <DMA_CalcBaseAndBitshift>
 8003f30:	4603      	mov	r3, r0
 8003f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	223f      	movs	r2, #63	; 0x3f
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	f010803f 	.word	0xf010803f

08003f5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_DMA_Start_IT+0x26>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e040      	b.n	8004004 <HAL_DMA_Start_IT+0xa8>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d12f      	bne.n	8003ff6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f9da 	bl	8004364 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	223f      	movs	r2, #63	; 0x3f
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0216 	orr.w	r2, r2, #22
 8003fca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0208 	orr.w	r2, r2, #8
 8003fe2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	e005      	b.n	8004002 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ffe:	2302      	movs	r3, #2
 8004000:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d004      	beq.n	800402a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e00c      	b.n	8004044 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2205      	movs	r2, #5
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800405c:	4b92      	ldr	r3, [pc, #584]	; (80042a8 <HAL_DMA_IRQHandler+0x258>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a92      	ldr	r2, [pc, #584]	; (80042ac <HAL_DMA_IRQHandler+0x25c>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0a9b      	lsrs	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	2208      	movs	r2, #8
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01a      	beq.n	80040bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	2208      	movs	r2, #8
 80040aa:	409a      	lsls	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2201      	movs	r2, #1
 80040e0:	409a      	lsls	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f043 0202 	orr.w	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f6:	2204      	movs	r2, #4
 80040f8:	409a      	lsls	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d012      	beq.n	8004128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	2204      	movs	r2, #4
 8004116:	409a      	lsls	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	f043 0204 	orr.w	r2, r3, #4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	2210      	movs	r2, #16
 800412e:	409a      	lsls	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4013      	ands	r3, r2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d043      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d03c      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	2210      	movs	r2, #16
 800414c:	409a      	lsls	r2, r3
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d018      	beq.n	8004192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d024      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
 800417e:	e01f      	b.n	80041c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01b      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
 8004190:	e016      	b.n	80041c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d107      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0208 	bic.w	r2, r2, #8
 80041ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2220      	movs	r2, #32
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 808e 	beq.w	80042ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8086 	beq.w	80042ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2220      	movs	r2, #32
 80041e8:	409a      	lsls	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	d136      	bne.n	8004268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0216 	bic.w	r2, r2, #22
 8004208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_DMA_IRQHandler+0x1da>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0208 	bic.w	r2, r2, #8
 8004238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423e:	223f      	movs	r2, #63	; 0x3f
 8004240:	409a      	lsls	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d07d      	beq.n	800435a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
        }
        return;
 8004266:	e078      	b.n	800435a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01c      	beq.n	80042b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004288:	2b00      	cmp	r3, #0
 800428a:	d030      	beq.n	80042ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e02b      	b.n	80042ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d027      	beq.n	80042ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	4798      	blx	r3
 80042a6:	e022      	b.n	80042ee <HAL_DMA_IRQHandler+0x29e>
 80042a8:	20000030 	.word	0x20000030
 80042ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0210 	bic.w	r2, r2, #16
 80042cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d032      	beq.n	800435c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d022      	beq.n	8004348 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2205      	movs	r2, #5
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3301      	adds	r3, #1
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d307      	bcc.n	8004336 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f2      	bne.n	800431a <HAL_DMA_IRQHandler+0x2ca>
 8004334:	e000      	b.n	8004338 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004336:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
 8004358:	e000      	b.n	800435c <HAL_DMA_IRQHandler+0x30c>
        return;
 800435a:	bf00      	nop
    }
  }
}
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop

08004364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004380:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d108      	bne.n	80043a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043a2:	e007      	b.n	80043b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	3b10      	subs	r3, #16
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <DMA_CalcBaseAndBitshift+0x64>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <DMA_CalcBaseAndBitshift+0x68>)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2b03      	cmp	r3, #3
 80043ec:	d909      	bls.n	8004402 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004400:	e007      	b.n	8004412 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	aaaaaaab 	.word	0xaaaaaaab
 8004428:	0800dba0 	.word	0x0800dba0

0800442c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11f      	bne.n	8004486 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d855      	bhi.n	80044f8 <DMA_CheckFifoParam+0xcc>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <DMA_CheckFifoParam+0x28>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004465 	.word	0x08004465
 8004458:	08004477 	.word	0x08004477
 800445c:	08004465 	.word	0x08004465
 8004460:	080044f9 	.word	0x080044f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d045      	beq.n	80044fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004474:	e042      	b.n	80044fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800447e:	d13f      	bne.n	8004500 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004484:	e03c      	b.n	8004500 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448e:	d121      	bne.n	80044d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d836      	bhi.n	8004504 <DMA_CheckFifoParam+0xd8>
 8004496:	a201      	add	r2, pc, #4	; (adr r2, 800449c <DMA_CheckFifoParam+0x70>)
 8004498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044b3 	.word	0x080044b3
 80044a4:	080044ad 	.word	0x080044ad
 80044a8:	080044c5 	.word	0x080044c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      break;
 80044b0:	e02f      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d024      	beq.n	8004508 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c2:	e021      	b.n	8004508 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044cc:	d11e      	bne.n	800450c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044d2:	e01b      	b.n	800450c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d902      	bls.n	80044e0 <DMA_CheckFifoParam+0xb4>
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d003      	beq.n	80044e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044de:	e018      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e015      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00e      	beq.n	8004510 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
      break;
 80044f6:	e00b      	b.n	8004510 <DMA_CheckFifoParam+0xe4>
      break;
 80044f8:	bf00      	nop
 80044fa:	e00a      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;
 80044fc:	bf00      	nop
 80044fe:	e008      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;
 8004500:	bf00      	nop
 8004502:	e006      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;   
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <DMA_CheckFifoParam+0xe6>
      break;
 8004510:	bf00      	nop
    }
  } 
  
  return status; 
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	e16b      	b.n	8004814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800453c:	2201      	movs	r2, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4013      	ands	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	429a      	cmp	r2, r3
 8004556:	f040 815a 	bne.w	800480e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d00b      	beq.n	800457a <HAL_GPIO_Init+0x5a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800456e:	2b11      	cmp	r3, #17
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b12      	cmp	r3, #18
 8004578:	d130      	bne.n	80045dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b0:	2201      	movs	r2, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 0201 	and.w	r2, r3, #1
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0xfc>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b12      	cmp	r3, #18
 800461a:	d123      	bne.n	8004664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	08da      	lsrs	r2, r3, #3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3208      	adds	r2, #8
 8004624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	220f      	movs	r2, #15
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80b4 	beq.w	800480e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_GPIO_Init+0x308>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_GPIO_Init+0x308>)
 80046b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046b4:	6453      	str	r3, [r2, #68]	; 0x44
 80046b6:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <HAL_GPIO_Init+0x308>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c2:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_GPIO_Init+0x30c>)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	3302      	adds	r3, #2
 80046ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	220f      	movs	r2, #15
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a51      	ldr	r2, [pc, #324]	; (8004830 <HAL_GPIO_Init+0x310>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d02b      	beq.n	8004746 <HAL_GPIO_Init+0x226>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a50      	ldr	r2, [pc, #320]	; (8004834 <HAL_GPIO_Init+0x314>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d025      	beq.n	8004742 <HAL_GPIO_Init+0x222>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4f      	ldr	r2, [pc, #316]	; (8004838 <HAL_GPIO_Init+0x318>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <HAL_GPIO_Init+0x21e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4e      	ldr	r2, [pc, #312]	; (800483c <HAL_GPIO_Init+0x31c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d019      	beq.n	800473a <HAL_GPIO_Init+0x21a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a4d      	ldr	r2, [pc, #308]	; (8004840 <HAL_GPIO_Init+0x320>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d013      	beq.n	8004736 <HAL_GPIO_Init+0x216>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_GPIO_Init+0x324>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00d      	beq.n	8004732 <HAL_GPIO_Init+0x212>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_GPIO_Init+0x328>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x20e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4a      	ldr	r2, [pc, #296]	; (800484c <HAL_GPIO_Init+0x32c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d101      	bne.n	800472a <HAL_GPIO_Init+0x20a>
 8004726:	2307      	movs	r3, #7
 8004728:	e00e      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800472a:	2308      	movs	r3, #8
 800472c:	e00c      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800472e:	2306      	movs	r3, #6
 8004730:	e00a      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004732:	2305      	movs	r3, #5
 8004734:	e008      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800473a:	2303      	movs	r3, #3
 800473c:	e004      	b.n	8004748 <HAL_GPIO_Init+0x228>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <HAL_GPIO_Init+0x228>
 8004746:	2300      	movs	r3, #0
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f002 0203 	and.w	r2, r2, #3
 800474e:	0092      	lsls	r2, r2, #2
 8004750:	4093      	lsls	r3, r2
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004758:	4934      	ldr	r1, [pc, #208]	; (800482c <HAL_GPIO_Init+0x30c>)
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004766:	4b3a      	ldr	r3, [pc, #232]	; (8004850 <HAL_GPIO_Init+0x330>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800478a:	4a31      	ldr	r2, [pc, #196]	; (8004850 <HAL_GPIO_Init+0x330>)
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004790:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_GPIO_Init+0x330>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047b4:	4a26      	ldr	r2, [pc, #152]	; (8004850 <HAL_GPIO_Init+0x330>)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ba:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_GPIO_Init+0x330>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_GPIO_Init+0x330>)
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047e4:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <HAL_GPIO_Init+0x330>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004808:	4a11      	ldr	r2, [pc, #68]	; (8004850 <HAL_GPIO_Init+0x330>)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	f67f ae90 	bls.w	800453c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800481c:	bf00      	nop
 800481e:	3724      	adds	r7, #36	; 0x24
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40023800 	.word	0x40023800
 800482c:	40013800 	.word	0x40013800
 8004830:	40020000 	.word	0x40020000
 8004834:	40020400 	.word	0x40020400
 8004838:	40020800 	.word	0x40020800
 800483c:	40020c00 	.word	0x40020c00
 8004840:	40021000 	.word	0x40021000
 8004844:	40021400 	.word	0x40021400
 8004848:	40021800 	.word	0x40021800
 800484c:	40021c00 	.word	0x40021c00
 8004850:	40013c00 	.word	0x40013c00

08004854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e001      	b.n	8004876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
 8004890:	4613      	mov	r3, r2
 8004892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004894:	787b      	ldrb	r3, [r7, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a0:	e003      	b.n	80048aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048a2:	887b      	ldrh	r3, [r7, #2]
 80048a4:	041a      	lsls	r2, r3, #16
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	619a      	str	r2, [r3, #24]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e11f      	b.n	8004b0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe fb26 	bl	8002f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2224      	movs	r2, #36	; 0x24
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0201 	bic.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800490a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800491a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800491c:	f002 f9c8 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 8004920:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a7b      	ldr	r2, [pc, #492]	; (8004b14 <HAL_I2C_Init+0x25c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d807      	bhi.n	800493c <HAL_I2C_Init+0x84>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a7a      	ldr	r2, [pc, #488]	; (8004b18 <HAL_I2C_Init+0x260>)
 8004930:	4293      	cmp	r3, r2
 8004932:	bf94      	ite	ls
 8004934:	2301      	movls	r3, #1
 8004936:	2300      	movhi	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e006      	b.n	800494a <HAL_I2C_Init+0x92>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a77      	ldr	r2, [pc, #476]	; (8004b1c <HAL_I2C_Init+0x264>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf94      	ite	ls
 8004944:	2301      	movls	r3, #1
 8004946:	2300      	movhi	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0db      	b.n	8004b0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a72      	ldr	r2, [pc, #456]	; (8004b20 <HAL_I2C_Init+0x268>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a64      	ldr	r2, [pc, #400]	; (8004b14 <HAL_I2C_Init+0x25c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d802      	bhi.n	800498c <HAL_I2C_Init+0xd4>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3301      	adds	r3, #1
 800498a:	e009      	b.n	80049a0 <HAL_I2C_Init+0xe8>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	4a63      	ldr	r2, [pc, #396]	; (8004b24 <HAL_I2C_Init+0x26c>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	3301      	adds	r3, #1
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4956      	ldr	r1, [pc, #344]	; (8004b14 <HAL_I2C_Init+0x25c>)
 80049bc:	428b      	cmp	r3, r1
 80049be:	d80d      	bhi.n	80049dc <HAL_I2C_Init+0x124>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1e59      	subs	r1, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ce:	3301      	adds	r3, #1
 80049d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	bf38      	it	cc
 80049d8:	2304      	movcc	r3, #4
 80049da:	e04f      	b.n	8004a7c <HAL_I2C_Init+0x1c4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d111      	bne.n	8004a08 <HAL_I2C_Init+0x150>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1e58      	subs	r0, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	440b      	add	r3, r1
 80049f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f6:	3301      	adds	r3, #1
 80049f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e012      	b.n	8004a2e <HAL_I2C_Init+0x176>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1e58      	subs	r0, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	0099      	lsls	r1, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Init+0x17e>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e022      	b.n	8004a7c <HAL_I2C_Init+0x1c4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10e      	bne.n	8004a5c <HAL_I2C_Init+0x1a4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1e58      	subs	r0, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	440b      	add	r3, r1
 8004a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5a:	e00f      	b.n	8004a7c <HAL_I2C_Init+0x1c4>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1e58      	subs	r0, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	0099      	lsls	r1, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	6809      	ldr	r1, [r1, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6911      	ldr	r1, [r2, #16]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	000186a0 	.word	0x000186a0
 8004b18:	001e847f 	.word	0x001e847f
 8004b1c:	003d08ff 	.word	0x003d08ff
 8004b20:	431bde83 	.word	0x431bde83
 8004b24:	10624dd3 	.word	0x10624dd3

08004b28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	461a      	mov	r2, r3
 8004b34:	460b      	mov	r3, r1
 8004b36:	817b      	strh	r3, [r7, #10]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b3c:	f7fe fcea 	bl	8003514 <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	f040 80e0 	bne.w	8004d10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2319      	movs	r3, #25
 8004b56:	2201      	movs	r2, #1
 8004b58:	4970      	ldr	r1, [pc, #448]	; (8004d1c <HAL_I2C_Master_Transmit+0x1f4>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f964 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0d3      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_I2C_Master_Transmit+0x50>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0cc      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d007      	beq.n	8004b9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2221      	movs	r2, #33	; 0x21
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2210      	movs	r2, #16
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	893a      	ldrh	r2, [r7, #8]
 8004bce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a50      	ldr	r2, [pc, #320]	; (8004d20 <HAL_I2C_Master_Transmit+0x1f8>)
 8004bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004be0:	8979      	ldrh	r1, [r7, #10]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f89c 	bl	8004d24 <I2C_MasterRequestWrite>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e08d      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c0c:	e066      	b.n	8004cdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f9de 	bl	8004fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e06b      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	781a      	ldrb	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d11b      	bne.n	8004cb0 <HAL_I2C_Master_Transmit+0x188>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	6a39      	ldr	r1, [r7, #32]
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f9ce 	bl	8005056 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00d      	beq.n	8004cdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d107      	bne.n	8004cd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e01a      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d194      	bne.n	8004c0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	00100002 	.word	0x00100002
 8004d20:	ffff0000 	.word	0xffff0000

08004d24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	460b      	mov	r3, r1
 8004d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d006      	beq.n	8004d4e <I2C_MasterRequestWrite+0x2a>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d003      	beq.n	8004d4e <I2C_MasterRequestWrite+0x2a>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d4c:	d108      	bne.n	8004d60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e00b      	b.n	8004d78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	2b12      	cmp	r3, #18
 8004d66:	d107      	bne.n	8004d78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f84f 	bl	8004e28 <I2C_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9e:	d103      	bne.n	8004da8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e035      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db4:	d108      	bne.n	8004dc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e01b      	b.n	8004e00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc8:	897b      	ldrh	r3, [r7, #10]
 8004dca:	11db      	asrs	r3, r3, #7
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0306 	and.w	r3, r3, #6
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f063 030f 	orn	r3, r3, #15
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	490e      	ldr	r1, [pc, #56]	; (8004e20 <I2C_MasterRequestWrite+0xfc>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f875 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e010      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <I2C_MasterRequestWrite+0x100>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f865 	bl	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	00010008 	.word	0x00010008
 8004e24:	00010002 	.word	0x00010002

08004e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e38:	e025      	b.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d021      	beq.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fe fb67 	bl	8003514 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e023      	b.n	8004ece <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d10d      	bne.n	8004eac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	e00c      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d0b6      	beq.n	8004e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
 8004ee2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ee4:	e051      	b.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef4:	d123      	bne.n	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f043 0204 	orr.w	r2, r3, #4
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e046      	b.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d021      	beq.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7fe fae5 	bl	8003514 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e020      	b.n	8004fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10c      	bne.n	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e00b      	b.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d18d      	bne.n	8004ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe0:	e02d      	b.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f878 	bl	80050d8 <I2C_IsAcknowledgeFailed>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e02d      	b.n	800504e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff8:	d021      	beq.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7fe fa8b 	bl	8003514 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	429a      	cmp	r2, r3
 8005008:	d302      	bcc.n	8005010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e007      	b.n	800504e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b80      	cmp	r3, #128	; 0x80
 800504a:	d1ca      	bne.n	8004fe2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005062:	e02d      	b.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f837 	bl	80050d8 <I2C_IsAcknowledgeFailed>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e02d      	b.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d021      	beq.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507c:	f7fe fa4a 	bl	8003514 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d302      	bcc.n	8005092 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d116      	bne.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e007      	b.n	80050d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d1ca      	bne.n	8005064 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ee:	d11b      	bne.n	8005128 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005138:	b08f      	sub	sp, #60	; 0x3c
 800513a:	af0a      	add	r7, sp, #40	; 0x28
 800513c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e10f      	b.n	8005368 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f006 ff38 	bl	800bfd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2203      	movs	r2, #3
 800516c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f003 ff5b 	bl	8009042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	687e      	ldr	r6, [r7, #4]
 8005194:	466d      	mov	r5, sp
 8005196:	f106 0410 	add.w	r4, r6, #16
 800519a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800519c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800519e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80051aa:	1d33      	adds	r3, r6, #4
 80051ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ae:	6838      	ldr	r0, [r7, #0]
 80051b0:	f003 fe32 	bl	8008e18 <USB_CoreInit>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2202      	movs	r2, #2
 80051be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0d0      	b.n	8005368 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f003 ff49 	bl	8009064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
 80051d6:	e04a      	b.n	800526e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	333d      	adds	r3, #61	; 0x3d
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	333c      	adds	r3, #60	; 0x3c
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	b298      	uxth	r0, r3
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	3342      	adds	r3, #66	; 0x42
 8005214:	4602      	mov	r2, r0
 8005216:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	333f      	adds	r3, #63	; 0x3f
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800522c:	7bfa      	ldrb	r2, [r7, #15]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	3344      	adds	r3, #68	; 0x44
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3348      	adds	r3, #72	; 0x48
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	3350      	adds	r3, #80	; 0x50
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	3301      	adds	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3af      	bcc.n	80051d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e044      	b.n	8005308 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800527e:	7bfa      	ldrb	r2, [r7, #15]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	3301      	adds	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3b5      	bcc.n	800527e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	687e      	ldr	r6, [r7, #4]
 800531a:	466d      	mov	r5, sp
 800531c:	f106 0410 	add.w	r4, r6, #16
 8005320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800532c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005330:	1d33      	adds	r3, r6, #4
 8005332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005334:	6838      	ldr	r0, [r7, #0]
 8005336:	f003 febf 	bl	80090b8 <USB_DevInit>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e00d      	b.n	8005368 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f004 ff07 	bl	800a174 <USB_DevDisconnect>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005370 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_PCD_Start+0x1c>
 8005388:	2302      	movs	r3, #2
 800538a:	e020      	b.n	80053ce <HAL_PCD_Start+0x5e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005398:	2b01      	cmp	r3, #1
 800539a:	d109      	bne.n	80053b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d005      	beq.n	80053b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f003 fe33 	bl	8009020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 feb7 	bl	800a132 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053d6:	b590      	push	{r4, r7, lr}
 80053d8:	b08d      	sub	sp, #52	; 0x34
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f004 ff75 	bl	800a2dc <USB_GetMode>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 839d 	bne.w	8005b34 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f004 fed9 	bl	800a1b6 <USB_ReadInterrupts>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8393 	beq.w	8005b32 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f004 fed0 	bl	800a1b6 <USB_ReadInterrupts>
 8005416:	4603      	mov	r3, r0
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d107      	bne.n	8005430 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f002 0202 	and.w	r2, r2, #2
 800542e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 febe 	bl	800a1b6 <USB_ReadInterrupts>
 800543a:	4603      	mov	r3, r0
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b10      	cmp	r3, #16
 8005442:	d161      	bne.n	8005508 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0210 	bic.w	r2, r2, #16
 8005452:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f003 020f 	and.w	r2, r3, #15
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	0c5b      	lsrs	r3, r3, #17
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	2b02      	cmp	r3, #2
 800547e:	d124      	bne.n	80054ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d035      	beq.n	80054f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	091b      	lsrs	r3, r3, #4
 8005494:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800549a:	b29b      	uxth	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	6a38      	ldr	r0, [r7, #32]
 80054a0:	f004 fd24 	bl	8009eec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	091b      	lsrs	r3, r3, #4
 80054ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b0:	441a      	add	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054c2:	441a      	add	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	619a      	str	r2, [r3, #24]
 80054c8:	e016      	b.n	80054f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	0c5b      	lsrs	r3, r3, #17
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d110      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80054dc:	2208      	movs	r2, #8
 80054de:	4619      	mov	r1, r3
 80054e0:	6a38      	ldr	r0, [r7, #32]
 80054e2:	f004 fd03 	bl	8009eec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054f2:	441a      	add	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699a      	ldr	r2, [r3, #24]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0210 	orr.w	r2, r2, #16
 8005506:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f004 fe52 	bl	800a1b6 <USB_ReadInterrupts>
 8005512:	4603      	mov	r3, r0
 8005514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800551c:	d16e      	bne.n	80055fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f004 fe58 	bl	800a1dc <USB_ReadDevAllOutEpInterrupt>
 800552c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800552e:	e062      	b.n	80055f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d057      	beq.n	80055ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f004 fe7d 	bl	800a244 <USB_ReadDevOutEPInterrupt>
 800554a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	2301      	movs	r3, #1
 8005566:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fdb0 	bl	80060d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	2308      	movs	r3, #8
 800558a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800558c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 feaa 	bl	80062e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	2310      	movs	r3, #16
 80055ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d008      	beq.n	80055cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	461a      	mov	r2, r3
 80055c8:	2320      	movs	r3, #32
 80055ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	3301      	adds	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d199      	bne.n	8005530 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f004 fdd8 	bl	800a1b6 <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005610:	f040 80c0 	bne.w	8005794 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4618      	mov	r0, r3
 800561a:	f004 fdf9 	bl	800a210 <USB_ReadDevAllInEpInterrupt>
 800561e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005624:	e0b2      	b.n	800578c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80a7 	beq.w	8005780 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	4611      	mov	r1, r2
 800563c:	4618      	mov	r0, r3
 800563e:	f004 fe1f 	bl	800a280 <USB_ReadDevInEPInterrupt>
 8005642:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d057      	beq.n	80056fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	2201      	movs	r2, #1
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	43db      	mvns	r3, r3
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566e:	4013      	ands	r3, r2
 8005670:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	461a      	mov	r2, r3
 8005680:	2301      	movs	r3, #1
 8005682:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d132      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	3348      	adds	r3, #72	; 0x48
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	4613      	mov	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4403      	add	r3, r0
 80056ac:	3344      	adds	r3, #68	; 0x44
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4419      	add	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4403      	add	r3, r0
 80056c0:	3348      	adds	r3, #72	; 0x48
 80056c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x31c>
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3350      	adds	r3, #80	; 0x50
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056ea:	461a      	mov	r2, r3
 80056ec:	2101      	movs	r1, #1
 80056ee:	f004 fe27 	bl	800a340 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f006 fcee 	bl	800c0da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d008      	beq.n	800571a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	461a      	mov	r2, r3
 8005716:	2308      	movs	r3, #8
 8005718:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f003 0310 	and.w	r3, r3, #16
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	461a      	mov	r2, r3
 8005732:	2310      	movs	r3, #16
 8005734:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d008      	beq.n	8005752 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	461a      	mov	r2, r3
 800574e:	2340      	movs	r3, #64	; 0x40
 8005750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	461a      	mov	r2, r3
 800576a:	2302      	movs	r3, #2
 800576c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fc1b 	bl	8005fb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	3301      	adds	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	f47f af49 	bne.w	8005626 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4618      	mov	r0, r3
 800579a:	f004 fd0c 	bl	800a1b6 <USB_ReadInterrupts>
 800579e:	4603      	mov	r3, r0
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057a8:	d122      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d108      	bne.n	80057da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057d0:	2100      	movs	r1, #0
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe26 	bl	8006424 <HAL_PCDEx_LPM_Callback>
 80057d8:	e002      	b.n	80057e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f006 fcf4 	bl	800c1c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80057ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f004 fcde 	bl	800a1b6 <USB_ReadInterrupts>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d112      	bne.n	800582c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f006 fcb0 	bl	800c17c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695a      	ldr	r2, [r3, #20]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800582a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f004 fcc0 	bl	800a1b6 <USB_ReadInterrupts>
 8005836:	4603      	mov	r3, r0
 8005838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005840:	f040 80c7 	bne.w	80059d2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2110      	movs	r1, #16
 800585e:	4618      	mov	r0, r3
 8005860:	f003 fd8e 	bl	8009380 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005868:	e056      	b.n	8005918 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	461a      	mov	r2, r3
 8005878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800587c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800589c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80058be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	69fa      	ldr	r2, [r7, #28]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005910:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005914:	3301      	adds	r3, #1
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591e:	429a      	cmp	r2, r3
 8005920:	d3a3      	bcc.n	800586a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005930:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005934:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800594e:	f043 030b 	orr.w	r3, r3, #11
 8005952:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005964:	f043 030b 	orr.w	r3, r3, #11
 8005968:	6453      	str	r3, [r2, #68]	; 0x44
 800596a:	e015      	b.n	8005998 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800597a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800597e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005982:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005992:	f043 030b 	orr.w	r3, r3, #11
 8005996:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059bc:	461a      	mov	r2, r3
 80059be:	f004 fcbf 	bl	800a340 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80059d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f004 fbed 	bl	800a1b6 <USB_ReadInterrupts>
 80059dc:	4603      	mov	r3, r0
 80059de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059e6:	d124      	bne.n	8005a32 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f004 fc83 	bl	800a2f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f003 fd23 	bl	8009442 <USB_GetDevSpeed>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681c      	ldr	r4, [r3, #0]
 8005a08:	f001 f946 	bl	8006c98 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	4620      	mov	r0, r4
 8005a18:	f003 fa60 	bl	8008edc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f006 fb84 	bl	800c12a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695a      	ldr	r2, [r3, #20]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f004 fbbd 	bl	800a1b6 <USB_ReadInterrupts>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d10a      	bne.n	8005a5c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f006 fb61 	bl	800c10e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f002 0208 	and.w	r2, r2, #8
 8005a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f004 fba8 	bl	800a1b6 <USB_ReadInterrupts>
 8005a66:	4603      	mov	r3, r0
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a70:	d10f      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f006 fbc3 	bl	800c208 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005a90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 fb8d 	bl	800a1b6 <USB_ReadInterrupts>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f006 fb96 	bl	800c1e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 fb72 	bl	800a1b6 <USB_ReadInterrupts>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d10a      	bne.n	8005af4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f006 fba4 	bl	800c22c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 fb5c 	bl	800a1b6 <USB_ReadInterrupts>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d115      	bne.n	8005b34 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f006 fb94 	bl	800c248 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	e000      	b.n	8005b34 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005b32:	bf00      	nop
    }
  }
}
 8005b34:	3734      	adds	r7, #52	; 0x34
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}

08005b3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_PCD_SetAddress+0x1a>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e013      	b.n	8005b7c <HAL_PCD_SetAddress+0x42>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f004 faba 	bl	800a0e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	70fb      	strb	r3, [r7, #3]
 8005b96:	460b      	mov	r3, r1
 8005b98:	803b      	strh	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da0f      	bge.n	8005bca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	3338      	adds	r3, #56	; 0x38
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	705a      	strb	r2, [r3, #1]
 8005bc8:	e00f      	b.n	8005bea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	4413      	add	r3, r2
 8005be0:	3304      	adds	r3, #4
 8005be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bf6:	883a      	ldrh	r2, [r7, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	78ba      	ldrb	r2, [r7, #2]
 8005c00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c14:	78bb      	ldrb	r3, [r7, #2]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d102      	bne.n	8005c20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_PCD_EP_Open+0xaa>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e00e      	b.n	8005c4c <HAL_PCD_EP_Open+0xc8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f003 fc25 	bl	800948c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	da0f      	bge.n	8005c88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c68:	78fb      	ldrb	r3, [r7, #3]
 8005c6a:	f003 020f 	and.w	r2, r3, #15
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	3338      	adds	r3, #56	; 0x38
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	705a      	strb	r2, [r3, #1]
 8005c86:	e00f      	b.n	8005ca8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 020f 	and.w	r2, r3, #15
 8005c8e:	4613      	mov	r3, r2
 8005c90:	00db      	lsls	r3, r3, #3
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_PCD_EP_Close+0x6e>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e00e      	b.n	8005ce0 <HAL_PCD_EP_Close+0x8c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f003 fc63 	bl	800959c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2200      	movs	r2, #0
 8005d28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d102      	bne.n	8005d44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6979      	ldr	r1, [r7, #20]
 8005d5c:	f003 ff3e 	bl	8009bdc <USB_EP0StartXfer>
 8005d60:	e008      	b.n	8005d74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6979      	ldr	r1, [r7, #20]
 8005d70:	f003 fcf0 	bl	8009754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	f003 020f 	and.w	r2, r3, #15
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005da0:	681b      	ldr	r3, [r3, #0]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
 8005dba:	460b      	mov	r3, r1
 8005dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dbe:	7afb      	ldrb	r3, [r7, #11]
 8005dc0:	f003 020f 	and.w	r2, r3, #15
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	3338      	adds	r3, #56	; 0x38
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2201      	movs	r2, #1
 8005dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dee:	7afb      	ldrb	r3, [r7, #11]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d102      	bne.n	8005e08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e08:	7afb      	ldrb	r3, [r7, #11]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	f003 fedc 	bl	8009bdc <USB_EP0StartXfer>
 8005e24:	e008      	b.n	8005e38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	f003 fc8e 	bl	8009754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 020f 	and.w	r2, r3, #15
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d901      	bls.n	8005e60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e050      	b.n	8005f02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	da0f      	bge.n	8005e88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	4613      	mov	r3, r2
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	3338      	adds	r3, #56	; 0x38
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	705a      	strb	r2, [r3, #1]
 8005e86:	e00d      	b.n	8005ea4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_PCD_EP_SetStall+0x82>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e01e      	b.n	8005f02 <HAL_PCD_EP_SetStall+0xc0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68f9      	ldr	r1, [r7, #12]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f004 f833 	bl	8009f3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	b2d9      	uxtb	r1, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f004 fa24 	bl	800a340 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d901      	bls.n	8005f28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e042      	b.n	8005fae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da0f      	bge.n	8005f50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	f003 020f 	and.w	r2, r3, #15
 8005f36:	4613      	mov	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	3338      	adds	r3, #56	; 0x38
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	3304      	adds	r3, #4
 8005f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	705a      	strb	r2, [r3, #1]
 8005f4e:	e00f      	b.n	8005f70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	3304      	adds	r3, #4
 8005f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_PCD_EP_ClrStall+0x86>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e00e      	b.n	8005fae <HAL_PCD_EP_ClrStall+0xa4>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68f9      	ldr	r1, [r7, #12]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f004 f83b 	bl	800a01a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b08a      	sub	sp, #40	; 0x28
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	3338      	adds	r3, #56	; 0x38
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	3304      	adds	r3, #4
 8005fdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d901      	bls.n	8005fee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e06c      	b.n	80060c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	429a      	cmp	r2, r3
 8006002:	d902      	bls.n	800600a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	3303      	adds	r3, #3
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006012:	e02b      	b.n	800606c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	429a      	cmp	r2, r3
 8006028:	d902      	bls.n	8006030 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3303      	adds	r3, #3
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68d9      	ldr	r1, [r3, #12]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006048:	b2db      	uxtb	r3, r3
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	4603      	mov	r3, r0
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f003 ff17 	bl	8009e82 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	441a      	add	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	b29b      	uxth	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	429a      	cmp	r2, r3
 8006080:	d809      	bhi.n	8006096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800608a:	429a      	cmp	r2, r3
 800608c:	d203      	bcs.n	8006096 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1be      	bne.n	8006014 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d811      	bhi.n	80060c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	2201      	movs	r2, #1
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	6939      	ldr	r1, [r7, #16]
 80060be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c2:	4013      	ands	r3, r2
 80060c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	333c      	adds	r3, #60	; 0x3c
 80060e8:	3304      	adds	r3, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b01      	cmp	r3, #1
 8006104:	f040 80a0 	bne.w	8006248 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a72      	ldr	r2, [pc, #456]	; (80062e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f240 80dd 	bls.w	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80d7 	beq.w	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613a:	6093      	str	r3, [r2, #8]
 800613c:	e0cb      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	461a      	mov	r2, r3
 8006156:	2320      	movs	r3, #32
 8006158:	6093      	str	r3, [r2, #8]
 800615a:	e0bc      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80b7 	bne.w	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4a5d      	ldr	r2, [pc, #372]	; (80062e0 <PCD_EP_OutXfrComplete_int+0x210>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d90f      	bls.n	8006190 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	461a      	mov	r2, r3
 8006188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618c:	6093      	str	r3, [r2, #8]
 800618e:	e0a2      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	0159      	lsls	r1, r3, #5
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	440b      	add	r3, r1
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80061b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	4613      	mov	r3, r2
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4403      	add	r3, r0
 80061c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	1a9b      	subs	r3, r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061de:	6819      	ldr	r1, [r3, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4403      	add	r3, r0
 80061ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4419      	add	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4403      	add	r3, r0
 8006204:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006208:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d114      	bne.n	800623a <PCD_EP_OutXfrComplete_int+0x16a>
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006232:	461a      	mov	r2, r3
 8006234:	2101      	movs	r1, #1
 8006236:	f004 f883 	bl	800a340 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f005 ff2f 	bl	800c0a4 <HAL_PCD_DataOutStageCallback>
 8006246:	e046      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <PCD_EP_OutXfrComplete_int+0x214>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d124      	bne.n	800629a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626c:	6093      	str	r3, [r2, #8]
 800626e:	e032      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	461a      	mov	r2, r3
 8006288:	2320      	movs	r3, #32
 800628a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f005 ff06 	bl	800c0a4 <HAL_PCD_DataOutStageCallback>
 8006298:	e01d      	b.n	80062d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d114      	bne.n	80062ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d108      	bne.n	80062ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062c2:	461a      	mov	r2, r3
 80062c4:	2100      	movs	r1, #0
 80062c6:	f004 f83b 	bl	800a340 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f005 fee7 	bl	800c0a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	4f54300a 	.word	0x4f54300a
 80062e4:	4f54310a 	.word	0x4f54310a

080062e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	333c      	adds	r3, #60	; 0x3c
 8006300:	3304      	adds	r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <PCD_EP_OutSetupPacket_int+0x88>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d90e      	bls.n	800633c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	461a      	mov	r2, r3
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f005 fe9f 	bl	800c080 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <PCD_EP_OutSetupPacket_int+0x88>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d90c      	bls.n	8006364 <PCD_EP_OutSetupPacket_int+0x7c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d108      	bne.n	8006364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800635c:	461a      	mov	r2, r3
 800635e:	2101      	movs	r1, #1
 8006360:	f003 ffee 	bl	800a340 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	4f54300a 	.word	0x4f54300a

08006374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
 8006380:	4613      	mov	r3, r2
 8006382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006392:	883b      	ldrh	r3, [r7, #0]
 8006394:	0419      	lsls	r1, r3, #16
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	430a      	orrs	r2, r1
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
 80063a0:	e028      	b.n	80063f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e00d      	b.n	80063d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	3340      	adds	r3, #64	; 0x40
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	3301      	adds	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d3ec      	bcc.n	80063b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063dc:	883b      	ldrh	r3, [r7, #0]
 80063de:	0418      	lsls	r0, r3, #16
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4302      	orrs	r2, r0
 80063ec:	3340      	adds	r3, #64	; 0x40
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	887a      	ldrh	r2, [r7, #2]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e25b      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d075      	beq.n	8006546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800645a:	4ba3      	ldr	r3, [pc, #652]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b04      	cmp	r3, #4
 8006464:	d00c      	beq.n	8006480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006466:	4ba0      	ldr	r3, [pc, #640]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800646e:	2b08      	cmp	r3, #8
 8006470:	d112      	bne.n	8006498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006472:	4b9d      	ldr	r3, [pc, #628]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647e:	d10b      	bne.n	8006498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006480:	4b99      	ldr	r3, [pc, #612]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d05b      	beq.n	8006544 <HAL_RCC_OscConfig+0x108>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d157      	bne.n	8006544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e236      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d106      	bne.n	80064b0 <HAL_RCC_OscConfig+0x74>
 80064a2:	4b91      	ldr	r3, [pc, #580]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a90      	ldr	r2, [pc, #576]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e01d      	b.n	80064ec <HAL_RCC_OscConfig+0xb0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b8:	d10c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x98>
 80064ba:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a8a      	ldr	r2, [pc, #552]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a87      	ldr	r2, [pc, #540]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e00b      	b.n	80064ec <HAL_RCC_OscConfig+0xb0>
 80064d4:	4b84      	ldr	r3, [pc, #528]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a83      	ldr	r2, [pc, #524]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b81      	ldr	r3, [pc, #516]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a80      	ldr	r2, [pc, #512]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80064e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f4:	f7fd f80e 	bl	8003514 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fd f80a 	bl	8003514 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	; 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e1fb      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650e:	4b76      	ldr	r3, [pc, #472]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0xc0>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651c:	f7fc fffa 	bl	8003514 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006524:	f7fc fff6 	bl	8003514 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b64      	cmp	r3, #100	; 0x64
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e1e7      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006536:	4b6c      	ldr	r3, [pc, #432]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0xe8>
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d063      	beq.n	800661a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006552:	4b65      	ldr	r3, [pc, #404]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800655e:	4b62      	ldr	r3, [pc, #392]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006566:	2b08      	cmp	r3, #8
 8006568:	d11c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800656a:	4b5f      	ldr	r3, [pc, #380]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006576:	4b5c      	ldr	r3, [pc, #368]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_RCC_OscConfig+0x152>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d001      	beq.n	800658e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e1bb      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658e:	4b56      	ldr	r3, [pc, #344]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4952      	ldr	r1, [pc, #328]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a2:	e03a      	b.n	800661a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ac:	4b4f      	ldr	r3, [pc, #316]	; (80066ec <HAL_RCC_OscConfig+0x2b0>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b2:	f7fc ffaf 	bl	8003514 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ba:	f7fc ffab 	bl	8003514 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e19c      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065cc:	4b46      	ldr	r3, [pc, #280]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d8:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	4940      	ldr	r1, [pc, #256]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]
 80065ec:	e015      	b.n	800661a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ee:	4b3f      	ldr	r3, [pc, #252]	; (80066ec <HAL_RCC_OscConfig+0x2b0>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fc ff8e 	bl	8003514 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fc ff8a 	bl	8003514 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e17b      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660e:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f0      	bne.n	80065fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d030      	beq.n	8006688 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662e:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <HAL_RCC_OscConfig+0x2b4>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006634:	f7fc ff6e 	bl	8003514 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800663c:	f7fc ff6a 	bl	8003514 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e15b      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664e:	4b26      	ldr	r3, [pc, #152]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x200>
 800665a:	e015      	b.n	8006688 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800665c:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <HAL_RCC_OscConfig+0x2b4>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006662:	f7fc ff57 	bl	8003514 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800666a:	f7fc ff53 	bl	8003514 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e144      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800667c:	4b1a      	ldr	r3, [pc, #104]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 800667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80a0 	beq.w	80067d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006696:	2300      	movs	r3, #0
 8006698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10f      	bne.n	80066c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]
 80066aa:	4b0f      	ldr	r3, [pc, #60]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <HAL_RCC_OscConfig+0x2ac>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066be:	60bb      	str	r3, [r7, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c2:	2301      	movs	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c6:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <HAL_RCC_OscConfig+0x2b8>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d121      	bne.n	8006716 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_RCC_OscConfig+0x2b8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_RCC_OscConfig+0x2b8>)
 80066d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066de:	f7fc ff19 	bl	8003514 <HAL_GetTick>
 80066e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e4:	e011      	b.n	800670a <HAL_RCC_OscConfig+0x2ce>
 80066e6:	bf00      	nop
 80066e8:	40023800 	.word	0x40023800
 80066ec:	42470000 	.word	0x42470000
 80066f0:	42470e80 	.word	0x42470e80
 80066f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f8:	f7fc ff0c 	bl	8003514 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e0fd      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670a:	4b81      	ldr	r3, [pc, #516]	; (8006910 <HAL_RCC_OscConfig+0x4d4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f0      	beq.n	80066f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d106      	bne.n	800672c <HAL_RCC_OscConfig+0x2f0>
 800671e:	4b7d      	ldr	r3, [pc, #500]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a7c      	ldr	r2, [pc, #496]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006724:	f043 0301 	orr.w	r3, r3, #1
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
 800672a:	e01c      	b.n	8006766 <HAL_RCC_OscConfig+0x32a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b05      	cmp	r3, #5
 8006732:	d10c      	bne.n	800674e <HAL_RCC_OscConfig+0x312>
 8006734:	4b77      	ldr	r3, [pc, #476]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006738:	4a76      	ldr	r2, [pc, #472]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 800673a:	f043 0304 	orr.w	r3, r3, #4
 800673e:	6713      	str	r3, [r2, #112]	; 0x70
 8006740:	4b74      	ldr	r3, [pc, #464]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006744:	4a73      	ldr	r2, [pc, #460]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	6713      	str	r3, [r2, #112]	; 0x70
 800674c:	e00b      	b.n	8006766 <HAL_RCC_OscConfig+0x32a>
 800674e:	4b71      	ldr	r3, [pc, #452]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006752:	4a70      	ldr	r2, [pc, #448]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	6713      	str	r3, [r2, #112]	; 0x70
 800675a:	4b6e      	ldr	r3, [pc, #440]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a6d      	ldr	r2, [pc, #436]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006760:	f023 0304 	bic.w	r3, r3, #4
 8006764:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d015      	beq.n	800679a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fc fed1 	bl	8003514 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006774:	e00a      	b.n	800678c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fc fecd 	bl	8003514 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	; 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e0bc      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678c:	4b61      	ldr	r3, [pc, #388]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 800678e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ee      	beq.n	8006776 <HAL_RCC_OscConfig+0x33a>
 8006798:	e014      	b.n	80067c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679a:	f7fc febb 	bl	8003514 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a0:	e00a      	b.n	80067b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a2:	f7fc feb7 	bl	8003514 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e0a6      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b8:	4b56      	ldr	r3, [pc, #344]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ee      	bne.n	80067a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067ca:	4b52      	ldr	r3, [pc, #328]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a51      	ldr	r2, [pc, #324]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 80067d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8092 	beq.w	8006904 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067e0:	4b4c      	ldr	r3, [pc, #304]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 030c 	and.w	r3, r3, #12
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d05c      	beq.n	80068a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d141      	bne.n	8006878 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	4b48      	ldr	r3, [pc, #288]	; (8006918 <HAL_RCC_OscConfig+0x4dc>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fa:	f7fc fe8b 	bl	8003514 <HAL_GetTick>
 80067fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006800:	e008      	b.n	8006814 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006802:	f7fc fe87 	bl	8003514 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e078      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006814:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f0      	bne.n	8006802 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	019b      	lsls	r3, r3, #6
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	3b01      	subs	r3, #1
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	061b      	lsls	r3, r3, #24
 8006844:	4933      	ldr	r1, [pc, #204]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 8006846:	4313      	orrs	r3, r2
 8006848:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800684a:	4b33      	ldr	r3, [pc, #204]	; (8006918 <HAL_RCC_OscConfig+0x4dc>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006850:	f7fc fe60 	bl	8003514 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006858:	f7fc fe5c 	bl	8003514 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e04d      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686a:	4b2a      	ldr	r3, [pc, #168]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0f0      	beq.n	8006858 <HAL_RCC_OscConfig+0x41c>
 8006876:	e045      	b.n	8006904 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <HAL_RCC_OscConfig+0x4dc>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687e:	f7fc fe49 	bl	8003514 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006886:	f7fc fe45 	bl	8003514 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e036      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1f0      	bne.n	8006886 <HAL_RCC_OscConfig+0x44a>
 80068a4:	e02e      	b.n	8006904 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e029      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b2:	4b18      	ldr	r3, [pc, #96]	; (8006914 <HAL_RCC_OscConfig+0x4d8>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d11c      	bne.n	8006900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d115      	bne.n	8006900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068da:	4013      	ands	r3, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d10d      	bne.n	8006900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d106      	bne.n	8006900 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40007000 	.word	0x40007000
 8006914:	40023800 	.word	0x40023800
 8006918:	42470060 	.word	0x42470060

0800691c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0cc      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006930:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d90c      	bls.n	8006958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693e:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006946:	4b63      	ldr	r3, [pc, #396]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0b8      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d020      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006970:	4b59      	ldr	r3, [pc, #356]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	4a58      	ldr	r2, [pc, #352]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800697a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006988:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a52      	ldr	r2, [pc, #328]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006994:	4b50      	ldr	r3, [pc, #320]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	494d      	ldr	r1, [pc, #308]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d044      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d107      	bne.n	80069ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ba:	4b47      	ldr	r3, [pc, #284]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d119      	bne.n	80069fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e07f      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d003      	beq.n	80069da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d107      	bne.n	80069ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069da:	4b3f      	ldr	r3, [pc, #252]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e06f      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ea:	4b3b      	ldr	r3, [pc, #236]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e067      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069fa:	4b37      	ldr	r3, [pc, #220]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f023 0203 	bic.w	r2, r3, #3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	4934      	ldr	r1, [pc, #208]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a0c:	f7fc fd82 	bl	8003514 <HAL_GetTick>
 8006a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a12:	e00a      	b.n	8006a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a14:	f7fc fd7e 	bl	8003514 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e04f      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2a:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 020c 	and.w	r2, r3, #12
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d1eb      	bne.n	8006a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3c:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d20c      	bcs.n	8006a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4a:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a52:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d001      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e032      	b.n	8006aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a70:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	4916      	ldr	r1, [pc, #88]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d009      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	490e      	ldr	r1, [pc, #56]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aa2:	f000 f821 	bl	8006ae8 <HAL_RCC_GetSysClockFreq>
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	091b      	lsrs	r3, r3, #4
 8006aae:	f003 030f 	and.w	r3, r3, #15
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <HAL_RCC_ClockConfig+0x1c0>)
 8006ab4:	5cd3      	ldrb	r3, [r2, r3]
 8006ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8006aba:	4a09      	ldr	r2, [pc, #36]	; (8006ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8006abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fc fce2 	bl	800348c <HAL_InitTick>

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023c00 	.word	0x40023c00
 8006ad8:	40023800 	.word	0x40023800
 8006adc:	0800db88 	.word	0x0800db88
 8006ae0:	20000030 	.word	0x20000030
 8006ae4:	20000034 	.word	0x20000034

08006ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	2300      	movs	r3, #0
 8006af8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006afe:	4b63      	ldr	r3, [pc, #396]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 030c 	and.w	r3, r3, #12
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d007      	beq.n	8006b1a <HAL_RCC_GetSysClockFreq+0x32>
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d008      	beq.n	8006b20 <HAL_RCC_GetSysClockFreq+0x38>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 80b4 	bne.w	8006c7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b14:	4b5e      	ldr	r3, [pc, #376]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b16:	60bb      	str	r3, [r7, #8]
       break;
 8006b18:	e0b3      	b.n	8006c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b1a:	4b5e      	ldr	r3, [pc, #376]	; (8006c94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006b1c:	60bb      	str	r3, [r7, #8]
      break;
 8006b1e:	e0b0      	b.n	8006c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b20:	4b5a      	ldr	r3, [pc, #360]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b2a:	4b58      	ldr	r3, [pc, #352]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d04a      	beq.n	8006bcc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b36:	4b55      	ldr	r3, [pc, #340]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	099b      	lsrs	r3, r3, #6
 8006b3c:	f04f 0400 	mov.w	r4, #0
 8006b40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	ea03 0501 	and.w	r5, r3, r1
 8006b4c:	ea04 0602 	and.w	r6, r4, r2
 8006b50:	4629      	mov	r1, r5
 8006b52:	4632      	mov	r2, r6
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	f04f 0400 	mov.w	r4, #0
 8006b5c:	0154      	lsls	r4, r2, #5
 8006b5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b62:	014b      	lsls	r3, r1, #5
 8006b64:	4619      	mov	r1, r3
 8006b66:	4622      	mov	r2, r4
 8006b68:	1b49      	subs	r1, r1, r5
 8006b6a:	eb62 0206 	sbc.w	r2, r2, r6
 8006b6e:	f04f 0300 	mov.w	r3, #0
 8006b72:	f04f 0400 	mov.w	r4, #0
 8006b76:	0194      	lsls	r4, r2, #6
 8006b78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006b7c:	018b      	lsls	r3, r1, #6
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	eb64 0402 	sbc.w	r4, r4, r2
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	00e2      	lsls	r2, r4, #3
 8006b8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006b92:	00d9      	lsls	r1, r3, #3
 8006b94:	460b      	mov	r3, r1
 8006b96:	4614      	mov	r4, r2
 8006b98:	195b      	adds	r3, r3, r5
 8006b9a:	eb44 0406 	adc.w	r4, r4, r6
 8006b9e:	f04f 0100 	mov.w	r1, #0
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	0262      	lsls	r2, r4, #9
 8006ba8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006bac:	0259      	lsls	r1, r3, #9
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4614      	mov	r4, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f04f 0400 	mov.w	r4, #0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4623      	mov	r3, r4
 8006bc0:	f7f9 ff88 	bl	8000ad4 <__aeabi_uldivmod>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e049      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bcc:	4b2f      	ldr	r3, [pc, #188]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	099b      	lsrs	r3, r3, #6
 8006bd2:	f04f 0400 	mov.w	r4, #0
 8006bd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	ea03 0501 	and.w	r5, r3, r1
 8006be2:	ea04 0602 	and.w	r6, r4, r2
 8006be6:	4629      	mov	r1, r5
 8006be8:	4632      	mov	r2, r6
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	f04f 0400 	mov.w	r4, #0
 8006bf2:	0154      	lsls	r4, r2, #5
 8006bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bf8:	014b      	lsls	r3, r1, #5
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	1b49      	subs	r1, r1, r5
 8006c00:	eb62 0206 	sbc.w	r2, r2, r6
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	f04f 0400 	mov.w	r4, #0
 8006c0c:	0194      	lsls	r4, r2, #6
 8006c0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006c12:	018b      	lsls	r3, r1, #6
 8006c14:	1a5b      	subs	r3, r3, r1
 8006c16:	eb64 0402 	sbc.w	r4, r4, r2
 8006c1a:	f04f 0100 	mov.w	r1, #0
 8006c1e:	f04f 0200 	mov.w	r2, #0
 8006c22:	00e2      	lsls	r2, r4, #3
 8006c24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006c28:	00d9      	lsls	r1, r3, #3
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	195b      	adds	r3, r3, r5
 8006c30:	eb44 0406 	adc.w	r4, r4, r6
 8006c34:	f04f 0100 	mov.w	r1, #0
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	02a2      	lsls	r2, r4, #10
 8006c3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006c42:	0299      	lsls	r1, r3, #10
 8006c44:	460b      	mov	r3, r1
 8006c46:	4614      	mov	r4, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f04f 0400 	mov.w	r4, #0
 8006c52:	461a      	mov	r2, r3
 8006c54:	4623      	mov	r3, r4
 8006c56:	f7f9 ff3d 	bl	8000ad4 <__aeabi_uldivmod>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c60:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	0c1b      	lsrs	r3, r3, #16
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	60bb      	str	r3, [r7, #8]
      break;
 8006c7a:	e002      	b.n	8006c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006c7e:	60bb      	str	r3, [r7, #8]
      break;
 8006c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c82:	68bb      	ldr	r3, [r7, #8]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	00f42400 	.word	0x00f42400
 8006c94:	007a1200 	.word	0x007a1200

08006c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c9c:	4b03      	ldr	r3, [pc, #12]	; (8006cac <HAL_RCC_GetHCLKFreq+0x14>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000030 	.word	0x20000030

08006cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cb4:	f7ff fff0 	bl	8006c98 <HAL_RCC_GetHCLKFreq>
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	0a9b      	lsrs	r3, r3, #10
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	4a03      	ldr	r2, [pc, #12]	; (8006cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cc6:	5cd3      	ldrb	r3, [r2, r3]
 8006cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	0800db98 	.word	0x0800db98

08006cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cdc:	f7ff ffdc 	bl	8006c98 <HAL_RCC_GetHCLKFreq>
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	0b5b      	lsrs	r3, r3, #13
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	4a03      	ldr	r2, [pc, #12]	; (8006cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cee:	5cd3      	ldrb	r3, [r2, r3]
 8006cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	0800db98 	.word	0x0800db98

08006d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e056      	b.n	8006dc0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fc f947 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	ea42 0103 	orr.w	r1, r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	f003 0104 	and.w	r1, r3, #4
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b088      	sub	sp, #32
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d101      	bne.n	8006dea <HAL_SPI_Transmit+0x22>
 8006de6:	2302      	movs	r3, #2
 8006de8:	e11e      	b.n	8007028 <HAL_SPI_Transmit+0x260>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df2:	f7fc fb8f 	bl	8003514 <HAL_GetTick>
 8006df6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e08:	2302      	movs	r3, #2
 8006e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e0c:	e103      	b.n	8007016 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x52>
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e1e:	e0fa      	b.n	8007016 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2203      	movs	r2, #3
 8006e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	88fa      	ldrh	r2, [r7, #6]
 8006e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e66:	d107      	bne.n	8006e78 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d007      	beq.n	8006e96 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9e:	d14b      	bne.n	8006f38 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_SPI_Transmit+0xe6>
 8006ea8:	8afb      	ldrh	r3, [r7, #22]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d13e      	bne.n	8006f2c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ed2:	e02b      	b.n	8006f2c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d112      	bne.n	8006f08 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	3b01      	subs	r3, #1
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f06:	e011      	b.n	8006f2c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f08:	f7fc fb04 	bl	8003514 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d803      	bhi.n	8006f20 <HAL_SPI_Transmit+0x158>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d102      	bne.n	8006f26 <HAL_SPI_Transmit+0x15e>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d102      	bne.n	8006f2c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f2a:	e074      	b.n	8007016 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1ce      	bne.n	8006ed4 <HAL_SPI_Transmit+0x10c>
 8006f36:	e04c      	b.n	8006fd2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_SPI_Transmit+0x17e>
 8006f40:	8afb      	ldrh	r3, [r7, #22]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d140      	bne.n	8006fc8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	7812      	ldrb	r2, [r2, #0]
 8006f52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f6c:	e02c      	b.n	8006fc8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d113      	bne.n	8006fa4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	7812      	ldrb	r2, [r2, #0]
 8006f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fa2:	e011      	b.n	8006fc8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fa4:	f7fc fab6 	bl	8003514 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d803      	bhi.n	8006fbc <HAL_SPI_Transmit+0x1f4>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d102      	bne.n	8006fc2 <HAL_SPI_Transmit+0x1fa>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fc6:	e026      	b.n	8007016 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1cd      	bne.n	8006f6e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fd2:	69ba      	ldr	r2, [r7, #24]
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fba4 	bl	8007724 <SPI_EndRxTxTransaction>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	77fb      	strb	r3, [r7, #31]
 8007012:	e000      	b.n	8007016 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007026:	7ffb      	ldrb	r3, [r7, #31]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3720      	adds	r7, #32
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af02      	add	r7, sp, #8
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800704c:	d112      	bne.n	8007074 <HAL_SPI_Receive+0x44>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10e      	bne.n	8007074 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2204      	movs	r2, #4
 800705a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800705e:	88fa      	ldrh	r2, [r7, #6]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	68b9      	ldr	r1, [r7, #8]
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f8e9 	bl	8007242 <HAL_SPI_TransmitReceive>
 8007070:	4603      	mov	r3, r0
 8007072:	e0e2      	b.n	800723a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_SPI_Receive+0x52>
 800707e:	2302      	movs	r3, #2
 8007080:	e0db      	b.n	800723a <HAL_SPI_Receive+0x20a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800708a:	f7fc fa43 	bl	8003514 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d002      	beq.n	80070a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800709c:	2302      	movs	r3, #2
 800709e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070a0:	e0c2      	b.n	8007228 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_SPI_Receive+0x7e>
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070b2:	e0b9      	b.n	8007228 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2204      	movs	r2, #4
 80070b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fa:	d107      	bne.n	800710c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800710a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	d007      	beq.n	800712a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007128:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d162      	bne.n	80071f8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007132:	e02e      	b.n	8007192 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b01      	cmp	r3, #1
 8007140:	d115      	bne.n	800716e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f103 020c 	add.w	r2, r3, #12
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800716c:	e011      	b.n	8007192 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716e:	f7fc f9d1 	bl	8003514 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d803      	bhi.n	8007186 <HAL_SPI_Receive+0x156>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d102      	bne.n	800718c <HAL_SPI_Receive+0x15c>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007190:	e04a      	b.n	8007228 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1cb      	bne.n	8007134 <HAL_SPI_Receive+0x104>
 800719c:	e031      	b.n	8007202 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d113      	bne.n	80071d4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	b292      	uxth	r2, r2
 80071b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d2:	e011      	b.n	80071f8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d4:	f7fc f99e 	bl	8003514 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d803      	bhi.n	80071ec <HAL_SPI_Receive+0x1bc>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d102      	bne.n	80071f2 <HAL_SPI_Receive+0x1c2>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d102      	bne.n	80071f8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071f6:	e017      	b.n	8007228 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1cd      	bne.n	800719e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 fa27 	bl	800765a <SPI_EndRxTransaction>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2220      	movs	r2, #32
 8007216:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	75fb      	strb	r3, [r7, #23]
 8007224:	e000      	b.n	8007228 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b08c      	sub	sp, #48	; 0x30
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007250:	2301      	movs	r3, #1
 8007252:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_SPI_TransmitReceive+0x26>
 8007264:	2302      	movs	r3, #2
 8007266:	e18a      	b.n	800757e <HAL_SPI_TransmitReceive+0x33c>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007270:	f7fc f950 	bl	8003514 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800727c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007286:	887b      	ldrh	r3, [r7, #2]
 8007288:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800728a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800728e:	2b01      	cmp	r3, #1
 8007290:	d00f      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x70>
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007298:	d107      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d103      	bne.n	80072aa <HAL_SPI_TransmitReceive+0x68>
 80072a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d003      	beq.n	80072b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80072aa:	2302      	movs	r3, #2
 80072ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072b0:	e15b      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x82>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_SPI_TransmitReceive+0x82>
 80072be:	887b      	ldrh	r3, [r7, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072ca:	e14e      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d003      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2205      	movs	r2, #5
 80072dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	887a      	ldrh	r2, [r7, #2]
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	887a      	ldrh	r2, [r7, #2]
 80072f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	887a      	ldrh	r2, [r7, #2]
 8007302:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	887a      	ldrh	r2, [r7, #2]
 8007308:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d007      	beq.n	8007334 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007332:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800733c:	d178      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_SPI_TransmitReceive+0x10a>
 8007346:	8b7b      	ldrh	r3, [r7, #26]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d166      	bne.n	800741a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	881a      	ldrh	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	1c9a      	adds	r2, r3, #2
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007366:	b29b      	uxth	r3, r3
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007370:	e053      	b.n	800741a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b02      	cmp	r3, #2
 800737e:	d11b      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x176>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <HAL_SPI_TransmitReceive+0x176>
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d113      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d119      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x1b8>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d014      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	b292      	uxth	r2, r2
 80073dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	1c9a      	adds	r2, r3, #2
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073f6:	2301      	movs	r3, #1
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073fa:	f7fc f88b 	bl	8003514 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007406:	429a      	cmp	r2, r3
 8007408:	d807      	bhi.n	800741a <HAL_SPI_TransmitReceive+0x1d8>
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d003      	beq.n	800741a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007418:	e0a7      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1a6      	bne.n	8007372 <HAL_SPI_TransmitReceive+0x130>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1a1      	bne.n	8007372 <HAL_SPI_TransmitReceive+0x130>
 800742e:	e07c      	b.n	800752a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_TransmitReceive+0x1fc>
 8007438:	8b7b      	ldrh	r3, [r7, #26]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d16b      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745a:	b29b      	uxth	r3, r3
 800745c:	3b01      	subs	r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007464:	e057      	b.n	8007516 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b02      	cmp	r3, #2
 8007472:	d11c      	bne.n	80074ae <HAL_SPI_TransmitReceive+0x26c>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d017      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x26c>
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d114      	bne.n	80074ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	330c      	adds	r3, #12
 800748e:	7812      	ldrb	r2, [r2, #0]
 8007490:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d119      	bne.n	80074f0 <HAL_SPI_TransmitReceive+0x2ae>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d014      	beq.n	80074f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074ec:	2301      	movs	r3, #1
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074f0:	f7fc f810 	bl	8003514 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d803      	bhi.n	8007508 <HAL_SPI_TransmitReceive+0x2c6>
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d102      	bne.n	800750e <HAL_SPI_TransmitReceive+0x2cc>
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007514:	e029      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1a2      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x224>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d19d      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800752a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f8f8 	bl	8007724 <SPI_EndRxTxTransaction>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d006      	beq.n	8007548 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007546:	e010      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e000      	b.n	800756a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800757a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800757e:	4618      	mov	r0, r3
 8007580:	3730      	adds	r7, #48	; 0x30
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	603b      	str	r3, [r7, #0]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007596:	e04c      	b.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d048      	beq.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80075a0:	f7fb ffb8 	bl	8003514 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d902      	bls.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d13d      	bne.n	8007632 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ce:	d111      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d8:	d004      	beq.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e2:	d107      	bne.n	80075f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075fc:	d10f      	bne.n	800761e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800761c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e00f      	b.n	8007652 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	429a      	cmp	r2, r3
 800764e:	d1a3      	bne.n	8007598 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af02      	add	r7, sp, #8
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800766e:	d111      	bne.n	8007694 <SPI_EndRxTransaction+0x3a>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007678:	d004      	beq.n	8007684 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007682:	d107      	bne.n	8007694 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007692:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800769c:	d12a      	bne.n	80076f4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a6:	d012      	beq.n	80076ce <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff ff67 	bl	8007586 <SPI_WaitFlagStateUntilTimeout>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d02d      	beq.n	800771a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	f043 0220 	orr.w	r2, r3, #32
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e026      	b.n	800771c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2101      	movs	r1, #1
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff54 	bl	8007586 <SPI_WaitFlagStateUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01a      	beq.n	800771a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	f043 0220 	orr.w	r2, r3, #32
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e013      	b.n	800771c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2101      	movs	r1, #1
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff ff41 	bl	8007586 <SPI_WaitFlagStateUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e000      	b.n	800771c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007730:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <SPI_EndRxTxTransaction+0x7c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1b      	ldr	r2, [pc, #108]	; (80077a4 <SPI_EndRxTxTransaction+0x80>)
 8007736:	fba2 2303 	umull	r2, r3, r2, r3
 800773a:	0d5b      	lsrs	r3, r3, #21
 800773c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007740:	fb02 f303 	mul.w	r3, r2, r3
 8007744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774e:	d112      	bne.n	8007776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	2180      	movs	r1, #128	; 0x80
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff ff13 	bl	8007586 <SPI_WaitFlagStateUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d016      	beq.n	8007794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f043 0220 	orr.w	r2, r3, #32
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e00f      	b.n	8007796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	3b01      	subs	r3, #1
 8007780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778c:	2b80      	cmp	r3, #128	; 0x80
 800778e:	d0f2      	beq.n	8007776 <SPI_EndRxTxTransaction+0x52>
 8007790:	e000      	b.n	8007794 <SPI_EndRxTxTransaction+0x70>
        break;
 8007792:	bf00      	nop
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000030 	.word	0x20000030
 80077a4:	165e9f81 	.word	0x165e9f81

080077a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e01d      	b.n	80077f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fb fc3e 	bl	8003050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f000 f90e 	bl	8007a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2201      	movs	r2, #1
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fb48 	bl	8007ea8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a15      	ldr	r2, [pc, #84]	; (8007874 <HAL_TIM_PWM_Start+0x74>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_TIM_PWM_Start+0x2c>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a14      	ldr	r2, [pc, #80]	; (8007878 <HAL_TIM_PWM_Start+0x78>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d101      	bne.n	8007830 <HAL_TIM_PWM_Start+0x30>
 800782c:	2301      	movs	r3, #1
 800782e:	e000      	b.n	8007832 <HAL_TIM_PWM_Start+0x32>
 8007830:	2300      	movs	r3, #0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007844:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f003 0307 	and.w	r3, r3, #7
 8007850:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b06      	cmp	r3, #6
 8007856:	d007      	beq.n	8007868 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400

0800787c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007892:	2302      	movs	r3, #2
 8007894:	e0b4      	b.n	8007a00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2202      	movs	r2, #2
 80078a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	f200 809f 	bhi.w	80079ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	080079ed 	.word	0x080079ed
 80078bc:	080079ed 	.word	0x080079ed
 80078c0:	080079ed 	.word	0x080079ed
 80078c4:	08007929 	.word	0x08007929
 80078c8:	080079ed 	.word	0x080079ed
 80078cc:	080079ed 	.word	0x080079ed
 80078d0:	080079ed 	.word	0x080079ed
 80078d4:	0800796b 	.word	0x0800796b
 80078d8:	080079ed 	.word	0x080079ed
 80078dc:	080079ed 	.word	0x080079ed
 80078e0:	080079ed 	.word	0x080079ed
 80078e4:	080079ab 	.word	0x080079ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 f92a 	bl	8007b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0208 	orr.w	r2, r2, #8
 8007902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0204 	bic.w	r2, r2, #4
 8007912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6999      	ldr	r1, [r3, #24]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	691a      	ldr	r2, [r3, #16]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	619a      	str	r2, [r3, #24]
      break;
 8007926:	e062      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f97a 	bl	8007c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6999      	ldr	r1, [r3, #24]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	021a      	lsls	r2, r3, #8
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	619a      	str	r2, [r3, #24]
      break;
 8007968:	e041      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f9cf 	bl	8007d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0208 	orr.w	r2, r2, #8
 8007984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0204 	bic.w	r2, r2, #4
 8007994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69d9      	ldr	r1, [r3, #28]
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	61da      	str	r2, [r3, #28]
      break;
 80079a8:	e021      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fa23 	bl	8007dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69d9      	ldr	r1, [r3, #28]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	021a      	lsls	r2, r3, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	61da      	str	r2, [r3, #28]
      break;
 80079ea:	e000      	b.n	80079ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80079ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a40      	ldr	r2, [pc, #256]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d013      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a26:	d00f      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a3d      	ldr	r2, [pc, #244]	; (8007b20 <TIM_Base_SetConfig+0x118>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a3c      	ldr	r2, [pc, #240]	; (8007b24 <TIM_Base_SetConfig+0x11c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d007      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a3b      	ldr	r2, [pc, #236]	; (8007b28 <TIM_Base_SetConfig+0x120>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a3a      	ldr	r2, [pc, #232]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d108      	bne.n	8007a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2f      	ldr	r2, [pc, #188]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d02b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a68:	d027      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a2c      	ldr	r2, [pc, #176]	; (8007b20 <TIM_Base_SetConfig+0x118>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d023      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2b      	ldr	r2, [pc, #172]	; (8007b24 <TIM_Base_SetConfig+0x11c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d01f      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <TIM_Base_SetConfig+0x120>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a29      	ldr	r2, [pc, #164]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d017      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <TIM_Base_SetConfig+0x128>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <TIM_Base_SetConfig+0x12c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00f      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <TIM_Base_SetConfig+0x130>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00b      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <TIM_Base_SetConfig+0x134>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a24      	ldr	r2, [pc, #144]	; (8007b40 <TIM_Base_SetConfig+0x138>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a23      	ldr	r2, [pc, #140]	; (8007b44 <TIM_Base_SetConfig+0x13c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d108      	bne.n	8007acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <TIM_Base_SetConfig+0x114>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d003      	beq.n	8007b00 <TIM_Base_SetConfig+0xf8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <TIM_Base_SetConfig+0x124>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d103      	bne.n	8007b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	615a      	str	r2, [r3, #20]
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800
 8007b3c:	40001800 	.word	0x40001800
 8007b40:	40001c00 	.word	0x40001c00
 8007b44:	40002000 	.word	0x40002000

08007b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 0302 	bic.w	r3, r3, #2
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a20      	ldr	r2, [pc, #128]	; (8007c20 <TIM_OC1_SetConfig+0xd8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_OC1_SetConfig+0x64>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1f      	ldr	r2, [pc, #124]	; (8007c24 <TIM_OC1_SetConfig+0xdc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d10c      	bne.n	8007bc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f023 0308 	bic.w	r3, r3, #8
 8007bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f023 0304 	bic.w	r3, r3, #4
 8007bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a15      	ldr	r2, [pc, #84]	; (8007c20 <TIM_OC1_SetConfig+0xd8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d003      	beq.n	8007bd6 <TIM_OC1_SetConfig+0x8e>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <TIM_OC1_SetConfig+0xdc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d111      	bne.n	8007bfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	621a      	str	r2, [r3, #32]
}
 8007c14:	bf00      	nop
 8007c16:	371c      	adds	r7, #28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40010400 	.word	0x40010400

08007c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f023 0210 	bic.w	r2, r3, #16
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f023 0320 	bic.w	r3, r3, #32
 8007c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <TIM_OC2_SetConfig+0xe4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_OC2_SetConfig+0x68>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a21      	ldr	r2, [pc, #132]	; (8007d10 <TIM_OC2_SetConfig+0xe8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10d      	bne.n	8007cac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a17      	ldr	r2, [pc, #92]	; (8007d0c <TIM_OC2_SetConfig+0xe4>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_OC2_SetConfig+0x94>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <TIM_OC2_SetConfig+0xe8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d113      	bne.n	8007ce4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40010400 	.word	0x40010400

08007d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0303 	bic.w	r3, r3, #3
 8007d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a21      	ldr	r2, [pc, #132]	; (8007df4 <TIM_OC3_SetConfig+0xe0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d003      	beq.n	8007d7a <TIM_OC3_SetConfig+0x66>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a20      	ldr	r2, [pc, #128]	; (8007df8 <TIM_OC3_SetConfig+0xe4>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d10d      	bne.n	8007d96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <TIM_OC3_SetConfig+0xe0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d003      	beq.n	8007da6 <TIM_OC3_SetConfig+0x92>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a15      	ldr	r2, [pc, #84]	; (8007df8 <TIM_OC3_SetConfig+0xe4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d113      	bne.n	8007dce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	621a      	str	r2, [r3, #32]
}
 8007de8:	bf00      	nop
 8007dea:	371c      	adds	r7, #28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	40010000 	.word	0x40010000
 8007df8:	40010400 	.word	0x40010400

08007dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	031b      	lsls	r3, r3, #12
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a12      	ldr	r2, [pc, #72]	; (8007ea0 <TIM_OC4_SetConfig+0xa4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC4_SetConfig+0x68>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a11      	ldr	r2, [pc, #68]	; (8007ea4 <TIM_OC4_SetConfig+0xa8>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d109      	bne.n	8007e78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	019b      	lsls	r3, r3, #6
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	621a      	str	r2, [r3, #32]
}
 8007e92:	bf00      	nop
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400

08007ea8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	2201      	movs	r2, #1
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6a1a      	ldr	r2, [r3, #32]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	401a      	ands	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1a      	ldr	r2, [r3, #32]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	6879      	ldr	r1, [r7, #4]
 8007edc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	621a      	str	r2, [r3, #32]
}
 8007ee6:	bf00      	nop
 8007ee8:	371c      	adds	r7, #28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
	...

08007ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e05a      	b.n	8007fc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a21      	ldr	r2, [pc, #132]	; (8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d022      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d01d      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d018      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1b      	ldr	r2, [pc, #108]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d013      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1a      	ldr	r2, [pc, #104]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d00e      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d009      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a17      	ldr	r2, [pc, #92]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d004      	beq.n	8007f96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d10c      	bne.n	8007fb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	40010000 	.word	0x40010000
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000800 	.word	0x40000800
 8007fdc:	40000c00 	.word	0x40000c00
 8007fe0:	40010400 	.word	0x40010400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40001800 	.word	0x40001800

08007fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e03f      	b.n	800807e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fb f878 	bl	8003108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2224      	movs	r2, #36	; 0x24
 800801c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb75 	bl	8008720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2220      	movs	r2, #32
 8008078:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d153      	bne.n	800814a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d002      	beq.n	80080ae <HAL_UART_Transmit_DMA+0x26>
 80080a8:	88fb      	ldrh	r3, [r7, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e04c      	b.n	800814c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_UART_Transmit_DMA+0x38>
 80080bc:	2302      	movs	r3, #2
 80080be:	e045      	b.n	800814c <HAL_UART_Transmit_DMA+0xc4>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	88fa      	ldrh	r2, [r7, #6]
 80080d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2221      	movs	r2, #33	; 0x21
 80080e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	4a19      	ldr	r2, [pc, #100]	; (8008154 <HAL_UART_Transmit_DMA+0xcc>)
 80080ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	4a18      	ldr	r2, [pc, #96]	; (8008158 <HAL_UART_Transmit_DMA+0xd0>)
 80080f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	4a17      	ldr	r2, [pc, #92]	; (800815c <HAL_UART_Transmit_DMA+0xd4>)
 80080fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008104:	2200      	movs	r2, #0
 8008106:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	6819      	ldr	r1, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3304      	adds	r3, #4
 800811c:	461a      	mov	r2, r3
 800811e:	88fb      	ldrh	r3, [r7, #6]
 8008120:	f7fb ff1c 	bl	8003f5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800812c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695a      	ldr	r2, [r3, #20]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008144:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	e000      	b.n	800814c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800814a:	2302      	movs	r3, #2
  }
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	080083b1 	.word	0x080083b1
 8008158:	08008403 	.word	0x08008403
 800815c:	0800841f 	.word	0x0800841f

08008160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008180:	2300      	movs	r3, #0
 8008182:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008184:	2300      	movs	r3, #0
 8008186:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10d      	bne.n	80081b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_UART_IRQHandler+0x52>
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	f003 0320 	and.w	r3, r3, #32
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fa37 	bl	800861e <UART_Receive_IT>
      return;
 80081b0:	e0d1      	b.n	8008356 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80b0 	beq.w	800831a <HAL_UART_IRQHandler+0x1ba>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_UART_IRQHandler+0x70>
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a5 	beq.w	800831a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <HAL_UART_IRQHandler+0x90>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e8:	f043 0201 	orr.w	r2, r3, #1
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <HAL_UART_IRQHandler+0xb0>
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008208:	f043 0202 	orr.w	r2, r3, #2
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <HAL_UART_IRQHandler+0xd0>
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008228:	f043 0204 	orr.w	r2, r3, #4
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00f      	beq.n	800825a <HAL_UART_IRQHandler+0xfa>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d104      	bne.n	800824e <HAL_UART_IRQHandler+0xee>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	f043 0208 	orr.w	r2, r3, #8
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	2b00      	cmp	r3, #0
 8008260:	d078      	beq.n	8008354 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <HAL_UART_IRQHandler+0x11c>
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f9d1 	bl	800861e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	bf0c      	ite	eq
 800828a:	2301      	moveq	r3, #1
 800828c:	2300      	movne	r3, #0
 800828e:	b2db      	uxtb	r3, r3
 8008290:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <HAL_UART_IRQHandler+0x144>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d031      	beq.n	8008308 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 f91a 	bl	80084de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d123      	bne.n	8008300 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d013      	beq.n	80082f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	4a21      	ldr	r2, [pc, #132]	; (800835c <HAL_UART_IRQHandler+0x1fc>)
 80082d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fb fe95 	bl	800400c <HAL_DMA_Abort_IT>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d016      	beq.n	8008316 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80082f2:	4610      	mov	r0, r2
 80082f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f6:	e00e      	b.n	8008316 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f84f 	bl	800839c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fe:	e00a      	b.n	8008316 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f84b 	bl	800839c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008306:	e006      	b.n	8008316 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f847 	bl	800839c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008314:	e01e      	b.n	8008354 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008316:	bf00      	nop
    return;
 8008318:	e01c      	b.n	8008354 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <HAL_UART_IRQHandler+0x1d6>
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f907 	bl	8008542 <UART_Transmit_IT>
    return;
 8008334:	e00f      	b.n	8008356 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_UART_IRQHandler+0x1f6>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f94f 	bl	80085ee <UART_EndTransmit_IT>
    return;
 8008350:	bf00      	nop
 8008352:	e000      	b.n	8008356 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008354:	bf00      	nop
  }
}
 8008356:	3720      	adds	r7, #32
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	0800851b 	.word	0x0800851b

08008360 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d113      	bne.n	80083f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695a      	ldr	r2, [r3, #20]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083f2:	e002      	b.n	80083fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff ffb3 	bl	8008360 <HAL_UART_TxCpltCallback>
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff ffaf 	bl	8008374 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b084      	sub	sp, #16
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b21      	cmp	r3, #33	; 0x21
 8008450:	d108      	bne.n	8008464 <UART_DMAError+0x46>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d005      	beq.n	8008464 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2200      	movs	r2, #0
 800845c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800845e:	68b8      	ldr	r0, [r7, #8]
 8008460:	f000 f827 	bl	80084b2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b22      	cmp	r3, #34	; 0x22
 8008484:	d108      	bne.n	8008498 <UART_DMAError+0x7a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008492:	68b8      	ldr	r0, [r7, #8]
 8008494:	f000 f823 	bl	80084de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800849c:	f043 0210 	orr.w	r2, r3, #16
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084a4:	68b8      	ldr	r0, [r7, #8]
 80084a6:	f7ff ff79 	bl	800839c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084c8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084de:	b480      	push	{r7}
 80084e0:	b083      	sub	sp, #12
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80084f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff ff31 	bl	800839c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b21      	cmp	r3, #33	; 0x21
 8008554:	d144      	bne.n	80085e0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800855e:	d11a      	bne.n	8008596 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008574:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d105      	bne.n	800858a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	621a      	str	r2, [r3, #32]
 8008588:	e00e      	b.n	80085a8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	621a      	str	r2, [r3, #32]
 8008594:	e008      	b.n	80085a8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	1c59      	adds	r1, r3, #1
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6211      	str	r1, [r2, #32]
 80085a0:	781a      	ldrb	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4619      	mov	r1, r3
 80085b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10f      	bne.n	80085dc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	e000      	b.n	80085e2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008604:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2220      	movs	r2, #32
 800860a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fea6 	bl	8008360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b22      	cmp	r3, #34	; 0x22
 8008630:	d171      	bne.n	8008716 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863a:	d123      	bne.n	8008684 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10e      	bne.n	8008668 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	b29a      	uxth	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	1c9a      	adds	r2, r3, #2
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	629a      	str	r2, [r3, #40]	; 0x28
 8008666:	e029      	b.n	80086bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	b29b      	uxth	r3, r3
 8008670:	b2db      	uxtb	r3, r3
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	629a      	str	r2, [r3, #40]	; 0x28
 8008682:	e01b      	b.n	80086bc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6858      	ldr	r0, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6291      	str	r1, [r2, #40]	; 0x28
 800869c:	b2c2      	uxtb	r2, r0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e00c      	b.n	80086bc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	1c58      	adds	r0, r3, #1
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	6288      	str	r0, [r1, #40]	; 0x28
 80086b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	3b01      	subs	r3, #1
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4619      	mov	r1, r3
 80086ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d120      	bne.n	8008712 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0220 	bic.w	r2, r2, #32
 80086de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695a      	ldr	r2, [r3, #20]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0201 	bic.w	r2, r2, #1
 80086fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fe3d 	bl	8008388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	e002      	b.n	8008718 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	e000      	b.n	8008718 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008716:	2302      	movs	r3, #2
  }
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008762:	f023 030c 	bic.w	r3, r3, #12
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6812      	ldr	r2, [r2, #0]
 800876a:	68f9      	ldr	r1, [r7, #12]
 800876c:	430b      	orrs	r3, r1
 800876e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800878e:	f040 818b 	bne.w	8008aa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4ac1      	ldr	r2, [pc, #772]	; (8008a9c <UART_SetConfig+0x37c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d005      	beq.n	80087a8 <UART_SetConfig+0x88>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4abf      	ldr	r2, [pc, #764]	; (8008aa0 <UART_SetConfig+0x380>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f040 80bd 	bne.w	8008922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087a8:	f7fe fa96 	bl	8006cd8 <HAL_RCC_GetPCLK2Freq>
 80087ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	461d      	mov	r5, r3
 80087b2:	f04f 0600 	mov.w	r6, #0
 80087b6:	46a8      	mov	r8, r5
 80087b8:	46b1      	mov	r9, r6
 80087ba:	eb18 0308 	adds.w	r3, r8, r8
 80087be:	eb49 0409 	adc.w	r4, r9, r9
 80087c2:	4698      	mov	r8, r3
 80087c4:	46a1      	mov	r9, r4
 80087c6:	eb18 0805 	adds.w	r8, r8, r5
 80087ca:	eb49 0906 	adc.w	r9, r9, r6
 80087ce:	f04f 0100 	mov.w	r1, #0
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087e2:	4688      	mov	r8, r1
 80087e4:	4691      	mov	r9, r2
 80087e6:	eb18 0005 	adds.w	r0, r8, r5
 80087ea:	eb49 0106 	adc.w	r1, r9, r6
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	461d      	mov	r5, r3
 80087f4:	f04f 0600 	mov.w	r6, #0
 80087f8:	196b      	adds	r3, r5, r5
 80087fa:	eb46 0406 	adc.w	r4, r6, r6
 80087fe:	461a      	mov	r2, r3
 8008800:	4623      	mov	r3, r4
 8008802:	f7f8 f967 	bl	8000ad4 <__aeabi_uldivmod>
 8008806:	4603      	mov	r3, r0
 8008808:	460c      	mov	r4, r1
 800880a:	461a      	mov	r2, r3
 800880c:	4ba5      	ldr	r3, [pc, #660]	; (8008aa4 <UART_SetConfig+0x384>)
 800880e:	fba3 2302 	umull	r2, r3, r3, r2
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	461d      	mov	r5, r3
 800881c:	f04f 0600 	mov.w	r6, #0
 8008820:	46a9      	mov	r9, r5
 8008822:	46b2      	mov	sl, r6
 8008824:	eb19 0309 	adds.w	r3, r9, r9
 8008828:	eb4a 040a 	adc.w	r4, sl, sl
 800882c:	4699      	mov	r9, r3
 800882e:	46a2      	mov	sl, r4
 8008830:	eb19 0905 	adds.w	r9, r9, r5
 8008834:	eb4a 0a06 	adc.w	sl, sl, r6
 8008838:	f04f 0100 	mov.w	r1, #0
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800884c:	4689      	mov	r9, r1
 800884e:	4692      	mov	sl, r2
 8008850:	eb19 0005 	adds.w	r0, r9, r5
 8008854:	eb4a 0106 	adc.w	r1, sl, r6
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	461d      	mov	r5, r3
 800885e:	f04f 0600 	mov.w	r6, #0
 8008862:	196b      	adds	r3, r5, r5
 8008864:	eb46 0406 	adc.w	r4, r6, r6
 8008868:	461a      	mov	r2, r3
 800886a:	4623      	mov	r3, r4
 800886c:	f7f8 f932 	bl	8000ad4 <__aeabi_uldivmod>
 8008870:	4603      	mov	r3, r0
 8008872:	460c      	mov	r4, r1
 8008874:	461a      	mov	r2, r3
 8008876:	4b8b      	ldr	r3, [pc, #556]	; (8008aa4 <UART_SetConfig+0x384>)
 8008878:	fba3 1302 	umull	r1, r3, r3, r2
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	2164      	movs	r1, #100	; 0x64
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	3332      	adds	r3, #50	; 0x32
 800888a:	4a86      	ldr	r2, [pc, #536]	; (8008aa4 <UART_SetConfig+0x384>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008898:	4498      	add	r8, r3
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	461d      	mov	r5, r3
 800889e:	f04f 0600 	mov.w	r6, #0
 80088a2:	46a9      	mov	r9, r5
 80088a4:	46b2      	mov	sl, r6
 80088a6:	eb19 0309 	adds.w	r3, r9, r9
 80088aa:	eb4a 040a 	adc.w	r4, sl, sl
 80088ae:	4699      	mov	r9, r3
 80088b0:	46a2      	mov	sl, r4
 80088b2:	eb19 0905 	adds.w	r9, r9, r5
 80088b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80088ba:	f04f 0100 	mov.w	r1, #0
 80088be:	f04f 0200 	mov.w	r2, #0
 80088c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088ce:	4689      	mov	r9, r1
 80088d0:	4692      	mov	sl, r2
 80088d2:	eb19 0005 	adds.w	r0, r9, r5
 80088d6:	eb4a 0106 	adc.w	r1, sl, r6
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	461d      	mov	r5, r3
 80088e0:	f04f 0600 	mov.w	r6, #0
 80088e4:	196b      	adds	r3, r5, r5
 80088e6:	eb46 0406 	adc.w	r4, r6, r6
 80088ea:	461a      	mov	r2, r3
 80088ec:	4623      	mov	r3, r4
 80088ee:	f7f8 f8f1 	bl	8000ad4 <__aeabi_uldivmod>
 80088f2:	4603      	mov	r3, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	461a      	mov	r2, r3
 80088f8:	4b6a      	ldr	r3, [pc, #424]	; (8008aa4 <UART_SetConfig+0x384>)
 80088fa:	fba3 1302 	umull	r1, r3, r3, r2
 80088fe:	095b      	lsrs	r3, r3, #5
 8008900:	2164      	movs	r1, #100	; 0x64
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	3332      	adds	r3, #50	; 0x32
 800890c:	4a65      	ldr	r2, [pc, #404]	; (8008aa4 <UART_SetConfig+0x384>)
 800890e:	fba2 2303 	umull	r2, r3, r2, r3
 8008912:	095b      	lsrs	r3, r3, #5
 8008914:	f003 0207 	and.w	r2, r3, #7
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4442      	add	r2, r8
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	e26f      	b.n	8008e02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008922:	f7fe f9c5 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 8008926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	461d      	mov	r5, r3
 800892c:	f04f 0600 	mov.w	r6, #0
 8008930:	46a8      	mov	r8, r5
 8008932:	46b1      	mov	r9, r6
 8008934:	eb18 0308 	adds.w	r3, r8, r8
 8008938:	eb49 0409 	adc.w	r4, r9, r9
 800893c:	4698      	mov	r8, r3
 800893e:	46a1      	mov	r9, r4
 8008940:	eb18 0805 	adds.w	r8, r8, r5
 8008944:	eb49 0906 	adc.w	r9, r9, r6
 8008948:	f04f 0100 	mov.w	r1, #0
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800895c:	4688      	mov	r8, r1
 800895e:	4691      	mov	r9, r2
 8008960:	eb18 0005 	adds.w	r0, r8, r5
 8008964:	eb49 0106 	adc.w	r1, r9, r6
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	461d      	mov	r5, r3
 800896e:	f04f 0600 	mov.w	r6, #0
 8008972:	196b      	adds	r3, r5, r5
 8008974:	eb46 0406 	adc.w	r4, r6, r6
 8008978:	461a      	mov	r2, r3
 800897a:	4623      	mov	r3, r4
 800897c:	f7f8 f8aa 	bl	8000ad4 <__aeabi_uldivmod>
 8008980:	4603      	mov	r3, r0
 8008982:	460c      	mov	r4, r1
 8008984:	461a      	mov	r2, r3
 8008986:	4b47      	ldr	r3, [pc, #284]	; (8008aa4 <UART_SetConfig+0x384>)
 8008988:	fba3 2302 	umull	r2, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	461d      	mov	r5, r3
 8008996:	f04f 0600 	mov.w	r6, #0
 800899a:	46a9      	mov	r9, r5
 800899c:	46b2      	mov	sl, r6
 800899e:	eb19 0309 	adds.w	r3, r9, r9
 80089a2:	eb4a 040a 	adc.w	r4, sl, sl
 80089a6:	4699      	mov	r9, r3
 80089a8:	46a2      	mov	sl, r4
 80089aa:	eb19 0905 	adds.w	r9, r9, r5
 80089ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089c6:	4689      	mov	r9, r1
 80089c8:	4692      	mov	sl, r2
 80089ca:	eb19 0005 	adds.w	r0, r9, r5
 80089ce:	eb4a 0106 	adc.w	r1, sl, r6
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	461d      	mov	r5, r3
 80089d8:	f04f 0600 	mov.w	r6, #0
 80089dc:	196b      	adds	r3, r5, r5
 80089de:	eb46 0406 	adc.w	r4, r6, r6
 80089e2:	461a      	mov	r2, r3
 80089e4:	4623      	mov	r3, r4
 80089e6:	f7f8 f875 	bl	8000ad4 <__aeabi_uldivmod>
 80089ea:	4603      	mov	r3, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	461a      	mov	r2, r3
 80089f0:	4b2c      	ldr	r3, [pc, #176]	; (8008aa4 <UART_SetConfig+0x384>)
 80089f2:	fba3 1302 	umull	r1, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	2164      	movs	r1, #100	; 0x64
 80089fa:	fb01 f303 	mul.w	r3, r1, r3
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	00db      	lsls	r3, r3, #3
 8008a02:	3332      	adds	r3, #50	; 0x32
 8008a04:	4a27      	ldr	r2, [pc, #156]	; (8008aa4 <UART_SetConfig+0x384>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a12:	4498      	add	r8, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	461d      	mov	r5, r3
 8008a18:	f04f 0600 	mov.w	r6, #0
 8008a1c:	46a9      	mov	r9, r5
 8008a1e:	46b2      	mov	sl, r6
 8008a20:	eb19 0309 	adds.w	r3, r9, r9
 8008a24:	eb4a 040a 	adc.w	r4, sl, sl
 8008a28:	4699      	mov	r9, r3
 8008a2a:	46a2      	mov	sl, r4
 8008a2c:	eb19 0905 	adds.w	r9, r9, r5
 8008a30:	eb4a 0a06 	adc.w	sl, sl, r6
 8008a34:	f04f 0100 	mov.w	r1, #0
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a48:	4689      	mov	r9, r1
 8008a4a:	4692      	mov	sl, r2
 8008a4c:	eb19 0005 	adds.w	r0, r9, r5
 8008a50:	eb4a 0106 	adc.w	r1, sl, r6
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	461d      	mov	r5, r3
 8008a5a:	f04f 0600 	mov.w	r6, #0
 8008a5e:	196b      	adds	r3, r5, r5
 8008a60:	eb46 0406 	adc.w	r4, r6, r6
 8008a64:	461a      	mov	r2, r3
 8008a66:	4623      	mov	r3, r4
 8008a68:	f7f8 f834 	bl	8000ad4 <__aeabi_uldivmod>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	461a      	mov	r2, r3
 8008a72:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <UART_SetConfig+0x384>)
 8008a74:	fba3 1302 	umull	r1, r3, r3, r2
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	2164      	movs	r1, #100	; 0x64
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	3332      	adds	r3, #50	; 0x32
 8008a86:	4a07      	ldr	r2, [pc, #28]	; (8008aa4 <UART_SetConfig+0x384>)
 8008a88:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8c:	095b      	lsrs	r3, r3, #5
 8008a8e:	f003 0207 	and.w	r2, r3, #7
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4442      	add	r2, r8
 8008a98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a9a:	e1b2      	b.n	8008e02 <UART_SetConfig+0x6e2>
 8008a9c:	40011000 	.word	0x40011000
 8008aa0:	40011400 	.word	0x40011400
 8008aa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4ad7      	ldr	r2, [pc, #860]	; (8008e0c <UART_SetConfig+0x6ec>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d005      	beq.n	8008abe <UART_SetConfig+0x39e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4ad6      	ldr	r2, [pc, #856]	; (8008e10 <UART_SetConfig+0x6f0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	f040 80d1 	bne.w	8008c60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008abe:	f7fe f90b 	bl	8006cd8 <HAL_RCC_GetPCLK2Freq>
 8008ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	469a      	mov	sl, r3
 8008ac8:	f04f 0b00 	mov.w	fp, #0
 8008acc:	46d0      	mov	r8, sl
 8008ace:	46d9      	mov	r9, fp
 8008ad0:	eb18 0308 	adds.w	r3, r8, r8
 8008ad4:	eb49 0409 	adc.w	r4, r9, r9
 8008ad8:	4698      	mov	r8, r3
 8008ada:	46a1      	mov	r9, r4
 8008adc:	eb18 080a 	adds.w	r8, r8, sl
 8008ae0:	eb49 090b 	adc.w	r9, r9, fp
 8008ae4:	f04f 0100 	mov.w	r1, #0
 8008ae8:	f04f 0200 	mov.w	r2, #0
 8008aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008af8:	4688      	mov	r8, r1
 8008afa:	4691      	mov	r9, r2
 8008afc:	eb1a 0508 	adds.w	r5, sl, r8
 8008b00:	eb4b 0609 	adc.w	r6, fp, r9
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f04f 0200 	mov.w	r2, #0
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	f04f 0400 	mov.w	r4, #0
 8008b16:	0094      	lsls	r4, r2, #2
 8008b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b1c:	008b      	lsls	r3, r1, #2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4623      	mov	r3, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	4631      	mov	r1, r6
 8008b26:	f7f7 ffd5 	bl	8000ad4 <__aeabi_uldivmod>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4bb8      	ldr	r3, [pc, #736]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008b32:	fba3 2302 	umull	r2, r3, r3, r2
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	469b      	mov	fp, r3
 8008b40:	f04f 0c00 	mov.w	ip, #0
 8008b44:	46d9      	mov	r9, fp
 8008b46:	46e2      	mov	sl, ip
 8008b48:	eb19 0309 	adds.w	r3, r9, r9
 8008b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8008b50:	4699      	mov	r9, r3
 8008b52:	46a2      	mov	sl, r4
 8008b54:	eb19 090b 	adds.w	r9, r9, fp
 8008b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b70:	4689      	mov	r9, r1
 8008b72:	4692      	mov	sl, r2
 8008b74:	eb1b 0509 	adds.w	r5, fp, r9
 8008b78:	eb4c 060a 	adc.w	r6, ip, sl
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	4619      	mov	r1, r3
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	f04f 0300 	mov.w	r3, #0
 8008b8a:	f04f 0400 	mov.w	r4, #0
 8008b8e:	0094      	lsls	r4, r2, #2
 8008b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b94:	008b      	lsls	r3, r1, #2
 8008b96:	461a      	mov	r2, r3
 8008b98:	4623      	mov	r3, r4
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	f7f7 ff99 	bl	8000ad4 <__aeabi_uldivmod>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	460c      	mov	r4, r1
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	4b9a      	ldr	r3, [pc, #616]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008baa:	fba3 1302 	umull	r1, r3, r3, r2
 8008bae:	095b      	lsrs	r3, r3, #5
 8008bb0:	2164      	movs	r1, #100	; 0x64
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	3332      	adds	r3, #50	; 0x32
 8008bbc:	4a95      	ldr	r2, [pc, #596]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bc8:	4498      	add	r8, r3
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	469b      	mov	fp, r3
 8008bce:	f04f 0c00 	mov.w	ip, #0
 8008bd2:	46d9      	mov	r9, fp
 8008bd4:	46e2      	mov	sl, ip
 8008bd6:	eb19 0309 	adds.w	r3, r9, r9
 8008bda:	eb4a 040a 	adc.w	r4, sl, sl
 8008bde:	4699      	mov	r9, r3
 8008be0:	46a2      	mov	sl, r4
 8008be2:	eb19 090b 	adds.w	r9, r9, fp
 8008be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008bea:	f04f 0100 	mov.w	r1, #0
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bfe:	4689      	mov	r9, r1
 8008c00:	4692      	mov	sl, r2
 8008c02:	eb1b 0509 	adds.w	r5, fp, r9
 8008c06:	eb4c 060a 	adc.w	r6, ip, sl
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	f04f 0200 	mov.w	r2, #0
 8008c14:	f04f 0300 	mov.w	r3, #0
 8008c18:	f04f 0400 	mov.w	r4, #0
 8008c1c:	0094      	lsls	r4, r2, #2
 8008c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c22:	008b      	lsls	r3, r1, #2
 8008c24:	461a      	mov	r2, r3
 8008c26:	4623      	mov	r3, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	f7f7 ff52 	bl	8000ad4 <__aeabi_uldivmod>
 8008c30:	4603      	mov	r3, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	461a      	mov	r2, r3
 8008c36:	4b77      	ldr	r3, [pc, #476]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008c38:	fba3 1302 	umull	r1, r3, r3, r2
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	2164      	movs	r1, #100	; 0x64
 8008c40:	fb01 f303 	mul.w	r3, r1, r3
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	3332      	adds	r3, #50	; 0x32
 8008c4a:	4a72      	ldr	r2, [pc, #456]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	f003 020f 	and.w	r2, r3, #15
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4442      	add	r2, r8
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	e0d0      	b.n	8008e02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c60:	f7fe f826 	bl	8006cb0 <HAL_RCC_GetPCLK1Freq>
 8008c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	469a      	mov	sl, r3
 8008c6a:	f04f 0b00 	mov.w	fp, #0
 8008c6e:	46d0      	mov	r8, sl
 8008c70:	46d9      	mov	r9, fp
 8008c72:	eb18 0308 	adds.w	r3, r8, r8
 8008c76:	eb49 0409 	adc.w	r4, r9, r9
 8008c7a:	4698      	mov	r8, r3
 8008c7c:	46a1      	mov	r9, r4
 8008c7e:	eb18 080a 	adds.w	r8, r8, sl
 8008c82:	eb49 090b 	adc.w	r9, r9, fp
 8008c86:	f04f 0100 	mov.w	r1, #0
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c9a:	4688      	mov	r8, r1
 8008c9c:	4691      	mov	r9, r2
 8008c9e:	eb1a 0508 	adds.w	r5, sl, r8
 8008ca2:	eb4b 0609 	adc.w	r6, fp, r9
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	4619      	mov	r1, r3
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	f04f 0400 	mov.w	r4, #0
 8008cb8:	0094      	lsls	r4, r2, #2
 8008cba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cbe:	008b      	lsls	r3, r1, #2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	f7f7 ff04 	bl	8000ad4 <__aeabi_uldivmod>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	4b50      	ldr	r3, [pc, #320]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	469b      	mov	fp, r3
 8008ce2:	f04f 0c00 	mov.w	ip, #0
 8008ce6:	46d9      	mov	r9, fp
 8008ce8:	46e2      	mov	sl, ip
 8008cea:	eb19 0309 	adds.w	r3, r9, r9
 8008cee:	eb4a 040a 	adc.w	r4, sl, sl
 8008cf2:	4699      	mov	r9, r3
 8008cf4:	46a2      	mov	sl, r4
 8008cf6:	eb19 090b 	adds.w	r9, r9, fp
 8008cfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008cfe:	f04f 0100 	mov.w	r1, #0
 8008d02:	f04f 0200 	mov.w	r2, #0
 8008d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d12:	4689      	mov	r9, r1
 8008d14:	4692      	mov	sl, r2
 8008d16:	eb1b 0509 	adds.w	r5, fp, r9
 8008d1a:	eb4c 060a 	adc.w	r6, ip, sl
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	4619      	mov	r1, r3
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	f04f 0300 	mov.w	r3, #0
 8008d2c:	f04f 0400 	mov.w	r4, #0
 8008d30:	0094      	lsls	r4, r2, #2
 8008d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d36:	008b      	lsls	r3, r1, #2
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	4631      	mov	r1, r6
 8008d40:	f7f7 fec8 	bl	8000ad4 <__aeabi_uldivmod>
 8008d44:	4603      	mov	r3, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	461a      	mov	r2, r3
 8008d4a:	4b32      	ldr	r3, [pc, #200]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	2164      	movs	r1, #100	; 0x64
 8008d54:	fb01 f303 	mul.w	r3, r1, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	3332      	adds	r3, #50	; 0x32
 8008d5e:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008d60:	fba2 2303 	umull	r2, r3, r2, r3
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d6a:	4498      	add	r8, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	469b      	mov	fp, r3
 8008d70:	f04f 0c00 	mov.w	ip, #0
 8008d74:	46d9      	mov	r9, fp
 8008d76:	46e2      	mov	sl, ip
 8008d78:	eb19 0309 	adds.w	r3, r9, r9
 8008d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8008d80:	4699      	mov	r9, r3
 8008d82:	46a2      	mov	sl, r4
 8008d84:	eb19 090b 	adds.w	r9, r9, fp
 8008d88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d8c:	f04f 0100 	mov.w	r1, #0
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008da0:	4689      	mov	r9, r1
 8008da2:	4692      	mov	sl, r2
 8008da4:	eb1b 0509 	adds.w	r5, fp, r9
 8008da8:	eb4c 060a 	adc.w	r6, ip, sl
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4619      	mov	r1, r3
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	f04f 0300 	mov.w	r3, #0
 8008dba:	f04f 0400 	mov.w	r4, #0
 8008dbe:	0094      	lsls	r4, r2, #2
 8008dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008dc4:	008b      	lsls	r3, r1, #2
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4623      	mov	r3, r4
 8008dca:	4628      	mov	r0, r5
 8008dcc:	4631      	mov	r1, r6
 8008dce:	f7f7 fe81 	bl	8000ad4 <__aeabi_uldivmod>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008dda:	fba3 1302 	umull	r1, r3, r3, r2
 8008dde:	095b      	lsrs	r3, r3, #5
 8008de0:	2164      	movs	r1, #100	; 0x64
 8008de2:	fb01 f303 	mul.w	r3, r1, r3
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	3332      	adds	r3, #50	; 0x32
 8008dec:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <UART_SetConfig+0x6f4>)
 8008dee:	fba2 2303 	umull	r2, r3, r2, r3
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	f003 020f 	and.w	r2, r3, #15
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4442      	add	r2, r8
 8008dfe:	609a      	str	r2, [r3, #8]
}
 8008e00:	e7ff      	b.n	8008e02 <UART_SetConfig+0x6e2>
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0c:	40011000 	.word	0x40011000
 8008e10:	40011400 	.word	0x40011400
 8008e14:	51eb851f 	.word	0x51eb851f

08008e18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e18:	b084      	sub	sp, #16
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	f107 001c 	add.w	r0, r7, #28
 8008e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d122      	bne.n	8008e76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d105      	bne.n	8008e6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fac6 	bl	800a3fc <USB_CoreReset>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
 8008e74:	e01a      	b.n	8008eac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 faba 	bl	800a3fc <USB_CoreReset>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e9e:	e005      	b.n	8008eac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d10b      	bne.n	8008eca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f043 0206 	orr.w	r2, r3, #6
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f043 0220 	orr.w	r2, r3, #32
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ed6:	b004      	add	sp, #16
 8008ed8:	4770      	bx	lr
	...

08008edc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d165      	bne.n	8008fbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a41      	ldr	r2, [pc, #260]	; (8008ff8 <USB_SetTurnaroundTime+0x11c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d906      	bls.n	8008f06 <USB_SetTurnaroundTime+0x2a>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4a40      	ldr	r2, [pc, #256]	; (8008ffc <USB_SetTurnaroundTime+0x120>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d802      	bhi.n	8008f06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f00:	230f      	movs	r3, #15
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e062      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a3c      	ldr	r2, [pc, #240]	; (8008ffc <USB_SetTurnaroundTime+0x120>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d906      	bls.n	8008f1c <USB_SetTurnaroundTime+0x40>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	4a3b      	ldr	r2, [pc, #236]	; (8009000 <USB_SetTurnaroundTime+0x124>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d802      	bhi.n	8008f1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f16:	230e      	movs	r3, #14
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e057      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a38      	ldr	r2, [pc, #224]	; (8009000 <USB_SetTurnaroundTime+0x124>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d906      	bls.n	8008f32 <USB_SetTurnaroundTime+0x56>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a37      	ldr	r2, [pc, #220]	; (8009004 <USB_SetTurnaroundTime+0x128>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d802      	bhi.n	8008f32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f2c:	230d      	movs	r3, #13
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	e04c      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <USB_SetTurnaroundTime+0x128>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d906      	bls.n	8008f48 <USB_SetTurnaroundTime+0x6c>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4a32      	ldr	r2, [pc, #200]	; (8009008 <USB_SetTurnaroundTime+0x12c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d802      	bhi.n	8008f48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f42:	230c      	movs	r3, #12
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e041      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4a2f      	ldr	r2, [pc, #188]	; (8009008 <USB_SetTurnaroundTime+0x12c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d906      	bls.n	8008f5e <USB_SetTurnaroundTime+0x82>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a2e      	ldr	r2, [pc, #184]	; (800900c <USB_SetTurnaroundTime+0x130>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d802      	bhi.n	8008f5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f58:	230b      	movs	r3, #11
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e036      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <USB_SetTurnaroundTime+0x130>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d906      	bls.n	8008f74 <USB_SetTurnaroundTime+0x98>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4a29      	ldr	r2, [pc, #164]	; (8009010 <USB_SetTurnaroundTime+0x134>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d802      	bhi.n	8008f74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f6e:	230a      	movs	r3, #10
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e02b      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4a26      	ldr	r2, [pc, #152]	; (8009010 <USB_SetTurnaroundTime+0x134>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d906      	bls.n	8008f8a <USB_SetTurnaroundTime+0xae>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4a25      	ldr	r2, [pc, #148]	; (8009014 <USB_SetTurnaroundTime+0x138>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d802      	bhi.n	8008f8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f84:	2309      	movs	r3, #9
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e020      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	4a21      	ldr	r2, [pc, #132]	; (8009014 <USB_SetTurnaroundTime+0x138>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d906      	bls.n	8008fa0 <USB_SetTurnaroundTime+0xc4>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	4a20      	ldr	r2, [pc, #128]	; (8009018 <USB_SetTurnaroundTime+0x13c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d802      	bhi.n	8008fa0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f9a:	2308      	movs	r3, #8
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e015      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <USB_SetTurnaroundTime+0x13c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d906      	bls.n	8008fb6 <USB_SetTurnaroundTime+0xda>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <USB_SetTurnaroundTime+0x140>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d802      	bhi.n	8008fb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fb0:	2307      	movs	r3, #7
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	e00a      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fb6:	2306      	movs	r3, #6
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e007      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d102      	bne.n	8008fc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fc2:	2309      	movs	r3, #9
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e001      	b.n	8008fcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fc8:	2309      	movs	r3, #9
 8008fca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68da      	ldr	r2, [r3, #12]
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	029b      	lsls	r3, r3, #10
 8008fe0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	371c      	adds	r7, #28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	00d8acbf 	.word	0x00d8acbf
 8008ffc:	00e4e1bf 	.word	0x00e4e1bf
 8009000:	00f423ff 	.word	0x00f423ff
 8009004:	0106737f 	.word	0x0106737f
 8009008:	011a499f 	.word	0x011a499f
 800900c:	01312cff 	.word	0x01312cff
 8009010:	014ca43f 	.word	0x014ca43f
 8009014:	016e35ff 	.word	0x016e35ff
 8009018:	01a6ab1f 	.word	0x01a6ab1f
 800901c:	01e847ff 	.word	0x01e847ff

08009020 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f043 0201 	orr.w	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f023 0201 	bic.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d106      	bne.n	8009090 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	e00b      	b.n	80090a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60da      	str	r2, [r3, #12]
 80090a2:	e001      	b.n	80090a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e003      	b.n	80090b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80090a8:	2032      	movs	r0, #50	; 0x32
 80090aa:	f7fa fa3f 	bl	800352c <HAL_Delay>

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090b8:	b084      	sub	sp, #16
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b086      	sub	sp, #24
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80090c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	e009      	b.n	80090ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3340      	adds	r3, #64	; 0x40
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3301      	adds	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	2b0e      	cmp	r3, #14
 80090f0:	d9f2      	bls.n	80090d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d11c      	bne.n	8009132 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009106:	f043 0302 	orr.w	r3, r3, #2
 800910a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	639a      	str	r2, [r3, #56]	; 0x38
 8009130:	e00b      	b.n	800914a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009142:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009150:	461a      	mov	r2, r3
 8009152:	2300      	movs	r3, #0
 8009154:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915c:	4619      	mov	r1, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009164:	461a      	mov	r2, r3
 8009166:	680b      	ldr	r3, [r1, #0]
 8009168:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10c      	bne.n	800918a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d104      	bne.n	8009180 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009176:	2100      	movs	r1, #0
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f949 	bl	8009410 <USB_SetDevSpeed>
 800917e:	e008      	b.n	8009192 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f944 	bl	8009410 <USB_SetDevSpeed>
 8009188:	e003      	b.n	8009192 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800918a:	2103      	movs	r1, #3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f93f 	bl	8009410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009192:	2110      	movs	r1, #16
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f8f3 	bl	8009380 <USB_FlushTxFifo>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f911 	bl	80093cc <USB_FlushRxFifo>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ba:	461a      	mov	r2, r3
 80091bc:	2300      	movs	r3, #0
 80091be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c6:	461a      	mov	r2, r3
 80091c8:	2300      	movs	r3, #0
 80091ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d2:	461a      	mov	r2, r3
 80091d4:	2300      	movs	r3, #0
 80091d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091d8:	2300      	movs	r3, #0
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	e043      	b.n	8009266 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f4:	d118      	bne.n	8009228 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009208:	461a      	mov	r2, r3
 800920a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e013      	b.n	800923a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	461a      	mov	r2, r3
 8009220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	e008      	b.n	800923a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	461a      	mov	r2, r3
 8009236:	2300      	movs	r3, #0
 8009238:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009246:	461a      	mov	r2, r3
 8009248:	2300      	movs	r3, #0
 800924a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009258:	461a      	mov	r2, r3
 800925a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800925e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3301      	adds	r3, #1
 8009264:	613b      	str	r3, [r7, #16]
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	429a      	cmp	r2, r3
 800926c:	d3b7      	bcc.n	80091de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
 8009272:	e043      	b.n	80092fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800928a:	d118      	bne.n	80092be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d10a      	bne.n	80092a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	015a      	lsls	r2, r3, #5
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	4413      	add	r3, r2
 800929a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929e:	461a      	mov	r2, r3
 80092a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	e013      	b.n	80092d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	015a      	lsls	r2, r3, #5
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b4:	461a      	mov	r2, r3
 80092b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	e008      	b.n	80092d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	461a      	mov	r2, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092dc:	461a      	mov	r2, r3
 80092de:	2300      	movs	r3, #0
 80092e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ee:	461a      	mov	r2, r3
 80092f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3301      	adds	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	429a      	cmp	r2, r3
 8009302:	d3b7      	bcc.n	8009274 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009316:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009324:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f043 0210 	orr.w	r2, r3, #16
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699a      	ldr	r2, [r3, #24]
 800933c:	4b0f      	ldr	r3, [pc, #60]	; (800937c <USB_DevInit+0x2c4>)
 800933e:	4313      	orrs	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f043 0208 	orr.w	r2, r3, #8
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	2b01      	cmp	r3, #1
 800935a:	d107      	bne.n	800936c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009364:	f043 0304 	orr.w	r3, r3, #4
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009378:	b004      	add	sp, #16
 800937a:	4770      	bx	lr
 800937c:	803c3800 	.word	0x803c3800

08009380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	019b      	lsls	r3, r3, #6
 8009392:	f043 0220 	orr.w	r2, r3, #32
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3301      	adds	r3, #1
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <USB_FlushTxFifo+0x48>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e006      	b.n	80093ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	d0f0      	beq.n	800939a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	00030d40 	.word	0x00030d40

080093cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2210      	movs	r2, #16
 80093dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4a09      	ldr	r2, [pc, #36]	; (800940c <USB_FlushRxFifo+0x40>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d901      	bls.n	80093f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e006      	b.n	80093fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d0f0      	beq.n	80093de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	00030d40 	.word	0x00030d40

08009410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009430:	4313      	orrs	r3, r2
 8009432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009442:	b480      	push	{r7}
 8009444:	b087      	sub	sp, #28
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f003 0306 	and.w	r3, r3, #6
 800945a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d102      	bne.n	8009468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
 8009466:	e00a      	b.n	800947e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b02      	cmp	r3, #2
 800946c:	d002      	beq.n	8009474 <USB_GetDevSpeed+0x32>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b06      	cmp	r3, #6
 8009472:	d102      	bne.n	800947a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009474:	2302      	movs	r3, #2
 8009476:	75fb      	strb	r3, [r7, #23]
 8009478:	e001      	b.n	800947e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800947a:	230f      	movs	r3, #15
 800947c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	371c      	adds	r7, #28
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d13a      	bne.n	800951e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	69da      	ldr	r2, [r3, #28]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	2101      	movs	r1, #1
 80094ba:	fa01 f303 	lsl.w	r3, r1, r3
 80094be:	b29b      	uxth	r3, r3
 80094c0:	68f9      	ldr	r1, [r7, #12]
 80094c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c6:	4313      	orrs	r3, r2
 80094c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d155      	bne.n	800958c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	78db      	ldrb	r3, [r3, #3]
 80094fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80094fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	059b      	lsls	r3, r3, #22
 8009502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009504:	4313      	orrs	r3, r2
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	0151      	lsls	r1, r2, #5
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	440a      	add	r2, r1
 800950e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800951a:	6013      	str	r3, [r2, #0]
 800951c:	e036      	b.n	800958c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009524:	69da      	ldr	r2, [r3, #28]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	2101      	movs	r1, #1
 8009530:	fa01 f303 	lsl.w	r3, r1, r3
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800953c:	4313      	orrs	r3, r2
 800953e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	015a      	lsls	r2, r3, #5
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	4413      	add	r3, r2
 8009548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d11a      	bne.n	800958c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	78db      	ldrb	r3, [r3, #3]
 8009570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009572:	430b      	orrs	r3, r1
 8009574:	4313      	orrs	r3, r2
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	0151      	lsls	r1, r2, #5
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	440a      	add	r2, r1
 800957e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr
	...

0800959c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d161      	bne.n	800967c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ce:	d11f      	bne.n	8009610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	015a      	lsls	r2, r3, #5
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	0151      	lsls	r1, r2, #5
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	440a      	add	r2, r1
 80095e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	0151      	lsls	r1, r2, #5
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	440a      	add	r2, r1
 8009606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800960a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800960e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	2101      	movs	r1, #1
 8009622:	fa01 f303 	lsl.w	r3, r1, r3
 8009626:	b29b      	uxth	r3, r3
 8009628:	43db      	mvns	r3, r3
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009630:	4013      	ands	r3, r2
 8009632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963a:	69da      	ldr	r2, [r3, #28]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	2101      	movs	r1, #1
 8009646:	fa01 f303 	lsl.w	r3, r1, r3
 800964a:	b29b      	uxth	r3, r3
 800964c:	43db      	mvns	r3, r3
 800964e:	68f9      	ldr	r1, [r7, #12]
 8009650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009654:	4013      	ands	r3, r2
 8009656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	0159      	lsls	r1, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	440b      	add	r3, r1
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	4619      	mov	r1, r3
 8009674:	4b35      	ldr	r3, [pc, #212]	; (800974c <USB_DeactivateEndpoint+0x1b0>)
 8009676:	4013      	ands	r3, r2
 8009678:	600b      	str	r3, [r1, #0]
 800967a:	e060      	b.n	800973e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	015a      	lsls	r2, r3, #5
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4413      	add	r3, r2
 8009684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800968e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009692:	d11f      	bne.n	80096d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	015a      	lsls	r2, r3, #5
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4413      	add	r3, r2
 800969c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	0151      	lsls	r1, r2, #5
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	440a      	add	r2, r1
 80096aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	2101      	movs	r1, #1
 80096e6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ea:	041b      	lsls	r3, r3, #16
 80096ec:	43db      	mvns	r3, r3
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f4:	4013      	ands	r3, r2
 80096f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fe:	69da      	ldr	r2, [r3, #28]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 030f 	and.w	r3, r3, #15
 8009708:	2101      	movs	r1, #1
 800970a:	fa01 f303 	lsl.w	r3, r1, r3
 800970e:	041b      	lsls	r3, r3, #16
 8009710:	43db      	mvns	r3, r3
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009718:	4013      	ands	r3, r2
 800971a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	0159      	lsls	r1, r3, #5
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	440b      	add	r3, r1
 8009732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009736:	4619      	mov	r1, r3
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <USB_DeactivateEndpoint+0x1b4>)
 800973a:	4013      	ands	r3, r2
 800973c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	ec337800 	.word	0xec337800
 8009750:	eff37800 	.word	0xeff37800

08009754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08a      	sub	sp, #40	; 0x28
 8009758:	af02      	add	r7, sp, #8
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	f040 815c 	bne.w	8009a2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d132      	bne.n	80097e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	69fa      	ldr	r2, [r7, #28]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800979c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	0151      	lsls	r1, r2, #5
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	440a      	add	r2, r1
 80097b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097dc:	0cdb      	lsrs	r3, r3, #19
 80097de:	04db      	lsls	r3, r3, #19
 80097e0:	6113      	str	r3, [r2, #16]
 80097e2:	e074      	b.n	80098ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097fe:	0cdb      	lsrs	r3, r3, #19
 8009800:	04db      	lsls	r3, r3, #19
 8009802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	0151      	lsls	r1, r2, #5
 8009816:	69fa      	ldr	r2, [r7, #28]
 8009818:	440a      	add	r2, r1
 800981a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800981e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	015a      	lsls	r2, r3, #5
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	4413      	add	r3, r2
 8009830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009834:	691a      	ldr	r2, [r3, #16]
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6959      	ldr	r1, [r3, #20]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	440b      	add	r3, r1
 8009840:	1e59      	subs	r1, r3, #1
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	fbb1 f3f3 	udiv	r3, r1, r3
 800984a:	04d9      	lsls	r1, r3, #19
 800984c:	4b9d      	ldr	r3, [pc, #628]	; (8009ac4 <USB_EPStartXfer+0x370>)
 800984e:	400b      	ands	r3, r1
 8009850:	69b9      	ldr	r1, [r7, #24]
 8009852:	0148      	lsls	r0, r1, #5
 8009854:	69f9      	ldr	r1, [r7, #28]
 8009856:	4401      	add	r1, r0
 8009858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800985c:	4313      	orrs	r3, r2
 800985e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009876:	69b9      	ldr	r1, [r7, #24]
 8009878:	0148      	lsls	r0, r1, #5
 800987a:	69f9      	ldr	r1, [r7, #28]
 800987c:	4401      	add	r1, r0
 800987e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009882:	4313      	orrs	r3, r2
 8009884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	78db      	ldrb	r3, [r3, #3]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d11f      	bne.n	80098ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80098ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d14b      	bne.n	800996c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e8:	461a      	mov	r2, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	78db      	ldrb	r3, [r3, #3]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d128      	bne.n	800994a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009904:	2b00      	cmp	r3, #0
 8009906:	d110      	bne.n	800992a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	440a      	add	r2, r1
 800991e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	e00f      	b.n	800994a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e12f      	b.n	8009bcc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	440a      	add	r2, r1
 8009982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800998a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	78db      	ldrb	r3, [r3, #3]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d015      	beq.n	80099c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 8117 	beq.w	8009bcc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	f003 030f 	and.w	r3, r3, #15
 80099ae:	2101      	movs	r1, #1
 80099b0:	fa01 f303 	lsl.w	r3, r1, r3
 80099b4:	69f9      	ldr	r1, [r7, #28]
 80099b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099ba:	4313      	orrs	r3, r2
 80099bc:	634b      	str	r3, [r1, #52]	; 0x34
 80099be:	e105      	b.n	8009bcc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d110      	bne.n	80099f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	69fa      	ldr	r2, [r7, #28]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	e00f      	b.n	8009a12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	68d9      	ldr	r1, [r3, #12]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	781a      	ldrb	r2, [r3, #0]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	b298      	uxth	r0, r3
 8009a20:	79fb      	ldrb	r3, [r7, #7]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	4603      	mov	r3, r0
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 fa2b 	bl	8009e82 <USB_WritePacket>
 8009a2c:	e0ce      	b.n	8009bcc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	69ba      	ldr	r2, [r7, #24]
 8009a3e:	0151      	lsls	r1, r2, #5
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	440a      	add	r2, r1
 8009a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a48:	0cdb      	lsrs	r3, r3, #19
 8009a4a:	04db      	lsls	r3, r3, #19
 8009a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	69ba      	ldr	r2, [r7, #24]
 8009a5e:	0151      	lsls	r1, r2, #5
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	440a      	add	r2, r1
 8009a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d126      	bne.n	8009ac8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a90:	69b9      	ldr	r1, [r7, #24]
 8009a92:	0148      	lsls	r0, r1, #5
 8009a94:	69f9      	ldr	r1, [r7, #28]
 8009a96:	4401      	add	r1, r0
 8009a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009abe:	6113      	str	r3, [r2, #16]
 8009ac0:	e036      	b.n	8009b30 <USB_EPStartXfer+0x3dc>
 8009ac2:	bf00      	nop
 8009ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	695a      	ldr	r2, [r3, #20]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	1e5a      	subs	r2, r3, #1
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009adc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	04d9      	lsls	r1, r3, #19
 8009af0:	4b39      	ldr	r3, [pc, #228]	; (8009bd8 <USB_EPStartXfer+0x484>)
 8009af2:	400b      	ands	r3, r1
 8009af4:	69b9      	ldr	r1, [r7, #24]
 8009af6:	0148      	lsls	r0, r1, #5
 8009af8:	69f9      	ldr	r1, [r7, #28]
 8009afa:	4401      	add	r1, r0
 8009afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b00:	4313      	orrs	r3, r2
 8009b02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	8af9      	ldrh	r1, [r7, #22]
 8009b18:	fb01 f303 	mul.w	r3, r1, r3
 8009b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b20:	69b9      	ldr	r1, [r7, #24]
 8009b22:	0148      	lsls	r0, r1, #5
 8009b24:	69f9      	ldr	r1, [r7, #28]
 8009b26:	4401      	add	r1, r0
 8009b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d10d      	bne.n	8009b52 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d009      	beq.n	8009b52 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	68d9      	ldr	r1, [r3, #12]
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	015a      	lsls	r2, r3, #5
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	4413      	add	r3, r2
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b4e:	460a      	mov	r2, r1
 8009b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	78db      	ldrb	r3, [r3, #3]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d128      	bne.n	8009bac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d110      	bne.n	8009b8c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	69ba      	ldr	r2, [r7, #24]
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	e00f      	b.n	8009bac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	69fb      	ldr	r3, [r7, #28]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	1ff80000 	.word	0x1ff80000

08009bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	f040 80cd 	bne.w	8009d98 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d132      	bne.n	8009c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	0151      	lsls	r1, r2, #5
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	440a      	add	r2, r1
 8009c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c64:	0cdb      	lsrs	r3, r3, #19
 8009c66:	04db      	lsls	r3, r3, #19
 8009c68:	6113      	str	r3, [r2, #16]
 8009c6a:	e04e      	b.n	8009d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c86:	0cdb      	lsrs	r3, r3, #19
 8009c88:	04db      	lsls	r3, r3, #19
 8009c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	695a      	ldr	r2, [r3, #20]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d903      	bls.n	8009cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	015a      	lsls	r2, r3, #5
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	0151      	lsls	r1, r2, #5
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	440a      	add	r2, r1
 8009cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	015a      	lsls	r2, r3, #5
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	4413      	add	r3, r2
 8009cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cfa:	6939      	ldr	r1, [r7, #16]
 8009cfc:	0148      	lsls	r0, r1, #5
 8009cfe:	6979      	ldr	r1, [r7, #20]
 8009d00:	4401      	add	r1, r0
 8009d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009d06:	4313      	orrs	r3, r2
 8009d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d0a:	79fb      	ldrb	r3, [r7, #7]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d11e      	bne.n	8009d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d009      	beq.n	8009d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	461a      	mov	r2, r3
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	e092      	b.n	8009e74 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	0151      	lsls	r1, r2, #5
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	440a      	add	r2, r1
 8009d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d07e      	beq.n	8009e74 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	f003 030f 	and.w	r3, r3, #15
 8009d86:	2101      	movs	r1, #1
 8009d88:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8c:	6979      	ldr	r1, [r7, #20]
 8009d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d92:	4313      	orrs	r3, r2
 8009d94:	634b      	str	r3, [r1, #52]	; 0x34
 8009d96:	e06d      	b.n	8009e74 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db2:	0cdb      	lsrs	r3, r3, #19
 8009db4:	04db      	lsls	r3, r3, #19
 8009db6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	0151      	lsls	r1, r2, #5
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	440a      	add	r2, r1
 8009dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dda:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	0151      	lsls	r1, r2, #5
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	440a      	add	r2, r1
 8009e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e18:	691a      	ldr	r2, [r3, #16]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e22:	6939      	ldr	r1, [r7, #16]
 8009e24:	0148      	lsls	r0, r1, #5
 8009e26:	6979      	ldr	r1, [r7, #20]
 8009e28:	4401      	add	r1, r0
 8009e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009e32:	79fb      	ldrb	r3, [r7, #7]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d10d      	bne.n	8009e54 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d009      	beq.n	8009e54 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68d9      	ldr	r1, [r3, #12]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	460a      	mov	r2, r1
 8009e52:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	371c      	adds	r7, #28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e82:	b480      	push	{r7}
 8009e84:	b089      	sub	sp, #36	; 0x24
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	60f8      	str	r0, [r7, #12]
 8009e8a:	60b9      	str	r1, [r7, #8]
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	461a      	mov	r2, r3
 8009e90:	460b      	mov	r3, r1
 8009e92:	71fb      	strb	r3, [r7, #7]
 8009e94:	4613      	mov	r3, r2
 8009e96:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d11a      	bne.n	8009ede <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009ea8:	88bb      	ldrh	r3, [r7, #4]
 8009eaa:	3303      	adds	r3, #3
 8009eac:	089b      	lsrs	r3, r3, #2
 8009eae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e00f      	b.n	8009ed6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	031a      	lsls	r2, r3, #12
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	61bb      	str	r3, [r7, #24]
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d3eb      	bcc.n	8009eb6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3724      	adds	r7, #36	; 0x24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b089      	sub	sp, #36	; 0x24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009f02:	88fb      	ldrh	r3, [r7, #6]
 8009f04:	3303      	adds	r3, #3
 8009f06:	089b      	lsrs	r3, r3, #2
 8009f08:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	e00b      	b.n	8009f28 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	3301      	adds	r3, #1
 8009f26:	61bb      	str	r3, [r7, #24]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d3ef      	bcc.n	8009f10 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009f30:	69fb      	ldr	r3, [r7, #28]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3724      	adds	r7, #36	; 0x24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b085      	sub	sp, #20
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d12c      	bne.n	8009fb4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	db12      	blt.n	8009f92 <USB_EPSetStall+0x54>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00f      	beq.n	8009f92 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	015a      	lsls	r2, r3, #5
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	0151      	lsls	r1, r2, #5
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	440a      	add	r2, r1
 8009f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f90:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	e02b      	b.n	800a00c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	db12      	blt.n	8009fec <USB_EPSetStall+0xae>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00f      	beq.n	8009fec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	015a      	lsls	r2, r3, #5
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009fea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a00a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b085      	sub	sp, #20
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d128      	bne.n	800a088 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	0151      	lsls	r1, r2, #5
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	440a      	add	r2, r1
 800a04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a054:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	78db      	ldrb	r3, [r3, #3]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d003      	beq.n	800a066 <USB_EPClearStall+0x4c>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	78db      	ldrb	r3, [r3, #3]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d138      	bne.n	800a0d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	e027      	b.n	800a0d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	78db      	ldrb	r3, [r3, #3]
 800a0ac:	2b03      	cmp	r3, #3
 800a0ae:	d003      	beq.n	800a0b8 <USB_EPClearStall+0x9e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	78db      	ldrb	r3, [r3, #3]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d10f      	bne.n	800a0d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b085      	sub	sp, #20
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a104:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a108:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	011b      	lsls	r3, r3, #4
 800a116:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a11a:	68f9      	ldr	r1, [r7, #12]
 800a11c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a120:	4313      	orrs	r3, r2
 800a122:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a160:	f023 0302 	bic.w	r3, r3, #2
 800a164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1a2:	f043 0302 	orr.w	r3, r3, #2
 800a1a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	0c1b      	lsrs	r3, r3, #16
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	699b      	ldr	r3, [r3, #24]
 800a224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4013      	ands	r3, r2
 800a232:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	b29b      	uxth	r3, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	4013      	ands	r3, r2
 800a270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a272:	68bb      	ldr	r3, [r7, #8]
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b0:	01db      	lsls	r3, r3, #7
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a312:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr
	...

0800a340 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	460b      	mov	r3, r1
 800a34a:	607a      	str	r2, [r7, #4]
 800a34c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	333c      	adds	r3, #60	; 0x3c
 800a356:	3304      	adds	r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	4a26      	ldr	r2, [pc, #152]	; (800a3f8 <USB_EP0_OutStart+0xb8>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d90a      	bls.n	800a37a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a374:	d101      	bne.n	800a37a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e037      	b.n	800a3ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a8:	f043 0318 	orr.w	r3, r3, #24
 800a3ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a3c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10f      	bne.n	800a3e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a3e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	4f54300a 	.word	0x4f54300a

0800a3fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3301      	adds	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4a13      	ldr	r2, [pc, #76]	; (800a460 <USB_CoreReset+0x64>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d901      	bls.n	800a41a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e01b      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	daf2      	bge.n	800a408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	f043 0201 	orr.w	r2, r3, #1
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <USB_CoreReset+0x64>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d901      	bls.n	800a444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e006      	b.n	800a452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d0f0      	beq.n	800a432 <USB_CoreReset+0x36>

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	00030d40 	.word	0x00030d40

0800a464 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a470:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a474:	f003 f9be 	bl	800d7f4 <malloc>
 800a478:	4603      	mov	r3, r0
 800a47a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d105      	bne.n	800a48e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a48a:	2302      	movs	r3, #2
 800a48c:	e066      	b.n	800a55c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7c1b      	ldrb	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d119      	bne.n	800a4d2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a49e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	2181      	movs	r1, #129	; 0x81
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 ff43 	bl	800c332 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f001 ff39 	bl	800c332 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2210      	movs	r2, #16
 800a4cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a4d0:	e016      	b.n	800a500 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a4d2:	2340      	movs	r3, #64	; 0x40
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	2181      	movs	r1, #129	; 0x81
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f001 ff2a 	bl	800c332 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f001 ff21 	bl	800c332 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2210      	movs	r2, #16
 800a4fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a500:	2308      	movs	r3, #8
 800a502:	2203      	movs	r2, #3
 800a504:	2182      	movs	r1, #130	; 0x82
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 ff13 	bl	800c332 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7c1b      	ldrb	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d109      	bne.n	800a54a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a540:	2101      	movs	r1, #1
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 ffe4 	bl	800c510 <USBD_LL_PrepareReceive>
 800a548:	e007      	b.n	800a55a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a550:	2340      	movs	r3, #64	; 0x40
 800a552:	2101      	movs	r1, #1
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f001 ffdb 	bl	800c510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	460b      	mov	r3, r1
 800a56e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a574:	2181      	movs	r1, #129	; 0x81
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 ff01 	bl	800c37e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a582:	2101      	movs	r1, #1
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fefa 	bl	800c37e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a592:	2182      	movs	r1, #130	; 0x82
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fef2 	bl	800c37e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f003 f91d 	bl	800d804 <free>
    pdev->pClassData = NULL;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a602:	2b00      	cmp	r3, #0
 800a604:	d03a      	beq.n	800a67c <USBD_CDC_Setup+0xa0>
 800a606:	2b20      	cmp	r3, #32
 800a608:	f040 8097 	bne.w	800a73a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	88db      	ldrh	r3, [r3, #6]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d029      	beq.n	800a668 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b25b      	sxtb	r3, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da11      	bge.n	800a642 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a62a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	88d2      	ldrh	r2, [r2, #6]
 800a630:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a632:	6939      	ldr	r1, [r7, #16]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	88db      	ldrh	r3, [r3, #6]
 800a638:	461a      	mov	r2, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 fa6d 	bl	800bb1a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a640:	e082      	b.n	800a748 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	785a      	ldrb	r2, [r3, #1]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	88db      	ldrh	r3, [r3, #6]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a658:	6939      	ldr	r1, [r7, #16]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	88db      	ldrh	r3, [r3, #6]
 800a65e:	461a      	mov	r2, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f001 fa86 	bl	800bb72 <USBD_CtlPrepareRx>
    break;
 800a666:	e06f      	b.n	800a748 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	7850      	ldrb	r0, [r2, #1]
 800a674:	2200      	movs	r2, #0
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	4798      	blx	r3
    break;
 800a67a:	e065      	b.n	800a748 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	785b      	ldrb	r3, [r3, #1]
 800a680:	2b0b      	cmp	r3, #11
 800a682:	d84f      	bhi.n	800a724 <USBD_CDC_Setup+0x148>
 800a684:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <USBD_CDC_Setup+0xb0>)
 800a686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68a:	bf00      	nop
 800a68c:	0800a6bd 	.word	0x0800a6bd
 800a690:	0800a733 	.word	0x0800a733
 800a694:	0800a725 	.word	0x0800a725
 800a698:	0800a725 	.word	0x0800a725
 800a69c:	0800a725 	.word	0x0800a725
 800a6a0:	0800a725 	.word	0x0800a725
 800a6a4:	0800a725 	.word	0x0800a725
 800a6a8:	0800a725 	.word	0x0800a725
 800a6ac:	0800a725 	.word	0x0800a725
 800a6b0:	0800a725 	.word	0x0800a725
 800a6b4:	0800a6e5 	.word	0x0800a6e5
 800a6b8:	0800a70d 	.word	0x0800a70d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d107      	bne.n	800a6d6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a6c6:	f107 030c 	add.w	r3, r7, #12
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 fa23 	bl	800bb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6d4:	e030      	b.n	800a738 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a6d6:	6839      	ldr	r1, [r7, #0]
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 f9ad 	bl	800ba38 <USBD_CtlError>
        ret = USBD_FAIL;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a6e2:	e029      	b.n	800a738 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d107      	bne.n	800a6fe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a6ee:	f107 030f 	add.w	r3, r7, #15
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 fa0f 	bl	800bb1a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a6fc:	e01c      	b.n	800a738 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 f999 	bl	800ba38 <USBD_CtlError>
        ret = USBD_FAIL;
 800a706:	2303      	movs	r3, #3
 800a708:	75fb      	strb	r3, [r7, #23]
      break;
 800a70a:	e015      	b.n	800a738 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a712:	2b03      	cmp	r3, #3
 800a714:	d00f      	beq.n	800a736 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 f98d 	bl	800ba38 <USBD_CtlError>
        ret = USBD_FAIL;
 800a71e:	2303      	movs	r3, #3
 800a720:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a722:	e008      	b.n	800a736 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 f986 	bl	800ba38 <USBD_CtlError>
      ret = USBD_FAIL;
 800a72c:	2303      	movs	r3, #3
 800a72e:	75fb      	strb	r3, [r7, #23]
      break;
 800a730:	e002      	b.n	800a738 <USBD_CDC_Setup+0x15c>
      break;
 800a732:	bf00      	nop
 800a734:	e008      	b.n	800a748 <USBD_CDC_Setup+0x16c>
      break;
 800a736:	bf00      	nop
    }
    break;
 800a738:	e006      	b.n	800a748 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f97b 	bl	800ba38 <USBD_CtlError>
    ret = USBD_FAIL;
 800a742:	2303      	movs	r3, #3
 800a744:	75fb      	strb	r3, [r7, #23]
    break;
 800a746:	bf00      	nop
  }

  return (uint8_t)ret;
 800a748:	7dfb      	ldrb	r3, [r7, #23]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop

0800a754 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	460b      	mov	r3, r1
 800a75e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a766:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a772:	2303      	movs	r3, #3
 800a774:	e049      	b.n	800a80a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a77c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a77e:	78fa      	ldrb	r2, [r7, #3]
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	4613      	mov	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	440b      	add	r3, r1
 800a78c:	3318      	adds	r3, #24
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d029      	beq.n	800a7e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	440b      	add	r3, r1
 800a7a2:	3318      	adds	r3, #24
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	78f9      	ldrb	r1, [r7, #3]
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	1a5b      	subs	r3, r3, r1
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4403      	add	r3, r0
 800a7b4:	3344      	adds	r3, #68	; 0x44
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a7bc:	fb03 f301 	mul.w	r3, r3, r1
 800a7c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d110      	bne.n	800a7e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a7c6:	78fa      	ldrb	r2, [r7, #3]
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	3318      	adds	r3, #24
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a7da:	78f9      	ldrb	r1, [r7, #3]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	2200      	movs	r2, #0
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fe74 	bl	800c4ce <USBD_LL_Transmit>
 800a7e6:	e00f      	b.n	800a808 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a824:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a830:	2303      	movs	r3, #3
 800a832:	e015      	b.n	800a860 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f001 fe8a 	bl	800c552 <USBD_LL_GetRxDataSize>
 800a83e:	4602      	mov	r2, r0
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	68fa      	ldr	r2, [r7, #12]
 800a850:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a85a:	4611      	mov	r1, r2
 800a85c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a876:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d015      	beq.n	800a8ae <USBD_CDC_EP0_RxReady+0x46>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a888:	2bff      	cmp	r3, #255	; 0xff
 800a88a:	d010      	beq.n	800a8ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a89a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8a2:	b292      	uxth	r2, r2
 800a8a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	22ff      	movs	r2, #255	; 0xff
 800a8aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2243      	movs	r2, #67	; 0x43
 800a8c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a8c6:	4b03      	ldr	r3, [pc, #12]	; (800a8d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	200000c4 	.word	0x200000c4

0800a8d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2243      	movs	r2, #67	; 0x43
 800a8e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a8e6:	4b03      	ldr	r3, [pc, #12]	; (800a8f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	20000080 	.word	0x20000080

0800a8f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2243      	movs	r2, #67	; 0x43
 800a904:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a906:	4b03      	ldr	r3, [pc, #12]	; (800a914 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000108 	.word	0x20000108

0800a918 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	220a      	movs	r2, #10
 800a924:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a926:	4b03      	ldr	r3, [pc, #12]	; (800a934 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	2000003c 	.word	0x2000003c

0800a938 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a948:	2303      	movs	r3, #3
 800a94a:	e004      	b.n	800a956 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a962:	b480      	push	{r7}
 800a964:	b087      	sub	sp, #28
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a974:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9a4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e016      	b.n	800aa08 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	7c1b      	ldrb	r3, [r3, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d109      	bne.n	800a9f6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fd8e 	bl	800c510 <USBD_LL_PrepareReceive>
 800a9f4:	e007      	b.n	800aa06 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9fc:	2340      	movs	r3, #64	; 0x40
 800a9fe:	2101      	movs	r1, #1
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f001 fd85 	bl	800c510 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e025      	b.n	800aa74 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	79fa      	ldrb	r2, [r7, #7]
 800aa66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f001 fbfb 	bl	800c264 <USBD_LL_Init>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e010      	b.n	800aab6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa4:	f107 020e 	add.w	r2, r7, #14
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	4602      	mov	r2, r0
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f001 fc18 	bl	800c2fc <USBD_LL_Start>
 800aacc:	4603      	mov	r3, r0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	78fa      	ldrb	r2, [r7, #3]
 800ab10:	4611      	mov	r1, r2
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	4798      	blx	r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	78fa      	ldrb	r2, [r7, #3]
 800ab44:	4611      	mov	r1, r2
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
  }

  return USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 ff2c 	bl	800b9c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d00e      	beq.n	800abae <USBD_LL_SetupStage+0x5a>
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d302      	bcc.n	800ab9a <USBD_LL_SetupStage+0x46>
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d014      	beq.n	800abc2 <USBD_LL_SetupStage+0x6e>
 800ab98:	e01d      	b.n	800abd6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa18 	bl	800afd8 <USBD_StdDevReq>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
      break;
 800abac:	e020      	b.n	800abf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fa7c 	bl	800b0b4 <USBD_StdItfReq>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]
      break;
 800abc0:	e016      	b.n	800abf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fab8 	bl	800b140 <USBD_StdEPReq>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]
      break;
 800abd4:	e00c      	b.n	800abf0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800abdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 fbe9 	bl	800c3bc <USBD_LL_StallEP>
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]
      break;
 800abee:	bf00      	nop
  }

  return ret;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	460b      	mov	r3, r1
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac08:	7afb      	ldrb	r3, [r7, #11]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d137      	bne.n	800ac7e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac1c:	2b03      	cmp	r3, #3
 800ac1e:	d14a      	bne.n	800acb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d913      	bls.n	800ac54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	1ad2      	subs	r2, r2, r3
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	68da      	ldr	r2, [r3, #12]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	4293      	cmp	r3, r2
 800ac44:	bf28      	it	cs
 800ac46:	4613      	movcs	r3, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 ffad 	bl	800bbac <USBD_CtlContinueRx>
 800ac52:	e030      	b.n	800acb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d105      	bne.n	800ac76 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 ffa9 	bl	800bbce <USBD_CtlSendStatus>
 800ac7c:	e01b      	b.n	800acb6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d013      	beq.n	800acb2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ac90:	2b03      	cmp	r3, #3
 800ac92:	d10e      	bne.n	800acb2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	7afa      	ldrb	r2, [r7, #11]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	4798      	blx	r3
 800aca4:	4603      	mov	r3, r0
 800aca6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800acae:	7dfb      	ldrb	r3, [r7, #23]
 800acb0:	e002      	b.n	800acb8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800acb2:	2303      	movs	r3, #3
 800acb4:	e000      	b.n	800acb8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	460b      	mov	r3, r1
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800acce:	7afb      	ldrb	r3, [r7, #11]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d16a      	bne.n	800adaa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	3314      	adds	r3, #20
 800acd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d155      	bne.n	800ad90 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	429a      	cmp	r2, r3
 800acee:	d914      	bls.n	800ad1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	689a      	ldr	r2, [r3, #8]
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	1ad2      	subs	r2, r2, r3
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6879      	ldr	r1, [r7, #4]
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 ff22 	bl	800bb50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2100      	movs	r1, #0
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f001 fbfc 	bl	800c510 <USBD_LL_PrepareReceive>
 800ad18:	e03a      	b.n	800ad90 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d11c      	bne.n	800ad60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d316      	bcc.n	800ad60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d20f      	bcs.n	800ad60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 ff03 	bl	800bb50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad52:	2300      	movs	r3, #0
 800ad54:	2200      	movs	r2, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f001 fbd9 	bl	800c510 <USBD_LL_PrepareReceive>
 800ad5e:	e017      	b.n	800ad90 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00a      	beq.n	800ad82 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d105      	bne.n	800ad82 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad82:	2180      	movs	r1, #128	; 0x80
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f001 fb19 	bl	800c3bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 ff32 	bl	800bbf4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d123      	bne.n	800ade2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad9a:	68f8      	ldr	r0, [r7, #12]
 800ad9c:	f7ff fe9b 	bl	800aad6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ada8:	e01b      	b.n	800ade2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d013      	beq.n	800adde <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d10e      	bne.n	800adde <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	7afa      	ldrb	r2, [r7, #11]
 800adca:	4611      	mov	r1, r2
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	4798      	blx	r3
 800add0:	4603      	mov	r3, r0
 800add2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800add4:	7dfb      	ldrb	r3, [r7, #23]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	e002      	b.n	800ade4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800adde:	2303      	movs	r3, #3
 800ade0:	e000      	b.n	800ade4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d009      	beq.n	800ae30 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	6852      	ldr	r2, [r2, #4]
 800ae28:	b2d2      	uxtb	r2, r2
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae30:	2340      	movs	r3, #64	; 0x40
 800ae32:	2200      	movs	r2, #0
 800ae34:	2100      	movs	r1, #0
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fa7b 	bl	800c332 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2240      	movs	r2, #64	; 0x40
 800ae48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ae4c:	2340      	movs	r3, #64	; 0x40
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2180      	movs	r1, #128	; 0x80
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 fa6d 	bl	800c332 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2240      	movs	r2, #64	; 0x40
 800ae62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3708      	adds	r7, #8
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	460b      	mov	r3, r1
 800ae78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	78fa      	ldrb	r2, [r7, #3]
 800ae7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2204      	movs	r2, #4
 800aea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec6:	2b04      	cmp	r3, #4
 800aec8:	d105      	bne.n	800aed6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aed6:	2300      	movs	r3, #0
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d10b      	bne.n	800af0e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d005      	beq.n	800af0e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d009      	beq.n	800af90 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	6852      	ldr	r2, [r2, #4]
 800af88:	b2d2      	uxtb	r2, r2
 800af8a:	4611      	mov	r1, r2
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	4798      	blx	r3
  }

  return USBD_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b087      	sub	sp, #28
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	3301      	adds	r3, #1
 800afb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800afb8:	8a3b      	ldrh	r3, [r7, #16]
 800afba:	021b      	lsls	r3, r3, #8
 800afbc:	b21a      	sxth	r2, r3
 800afbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800afc8:	89fb      	ldrh	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	371c      	adds	r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
	...

0800afd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d004      	beq.n	800affc <USBD_StdDevReq+0x24>
 800aff2:	2b40      	cmp	r3, #64	; 0x40
 800aff4:	d002      	beq.n	800affc <USBD_StdDevReq+0x24>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <USBD_StdDevReq+0x38>
 800affa:	e050      	b.n	800b09e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	6839      	ldr	r1, [r7, #0]
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	4798      	blx	r3
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]
    break;
 800b00e:	e04b      	b.n	800b0a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	785b      	ldrb	r3, [r3, #1]
 800b014:	2b09      	cmp	r3, #9
 800b016:	d83c      	bhi.n	800b092 <USBD_StdDevReq+0xba>
 800b018:	a201      	add	r2, pc, #4	; (adr r2, 800b020 <USBD_StdDevReq+0x48>)
 800b01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01e:	bf00      	nop
 800b020:	0800b075 	.word	0x0800b075
 800b024:	0800b089 	.word	0x0800b089
 800b028:	0800b093 	.word	0x0800b093
 800b02c:	0800b07f 	.word	0x0800b07f
 800b030:	0800b093 	.word	0x0800b093
 800b034:	0800b053 	.word	0x0800b053
 800b038:	0800b049 	.word	0x0800b049
 800b03c:	0800b093 	.word	0x0800b093
 800b040:	0800b06b 	.word	0x0800b06b
 800b044:	0800b05d 	.word	0x0800b05d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9ce 	bl	800b3ec <USBD_GetDescriptor>
      break;
 800b050:	e024      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fb33 	bl	800b6c0 <USBD_SetAddress>
      break;
 800b05a:	e01f      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 fb70 	bl	800b744 <USBD_SetConfig>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
      break;
 800b068:	e018      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b06a:	6839      	ldr	r1, [r7, #0]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fc0d 	bl	800b88c <USBD_GetConfig>
      break;
 800b072:	e013      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fc3c 	bl	800b8f4 <USBD_GetStatus>
      break;
 800b07c:	e00e      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fc6a 	bl	800b95a <USBD_SetFeature>
      break;
 800b086:	e009      	b.n	800b09c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fc79 	bl	800b982 <USBD_ClrFeature>
      break;
 800b090:	e004      	b.n	800b09c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fccf 	bl	800ba38 <USBD_CtlError>
      break;
 800b09a:	bf00      	nop
    }
    break;
 800b09c:	e004      	b.n	800b0a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 fcc9 	bl	800ba38 <USBD_CtlError>
    break;
 800b0a6:	bf00      	nop
  }

  return ret;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop

0800b0b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d003      	beq.n	800b0d6 <USBD_StdItfReq+0x22>
 800b0ce:	2b40      	cmp	r3, #64	; 0x40
 800b0d0:	d001      	beq.n	800b0d6 <USBD_StdItfReq+0x22>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d12a      	bne.n	800b12c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d81d      	bhi.n	800b11e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	889b      	ldrh	r3, [r3, #4]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d813      	bhi.n	800b114 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	88db      	ldrh	r3, [r3, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d110      	bne.n	800b128 <USBD_StdItfReq+0x74>
 800b106:	7bfb      	ldrb	r3, [r7, #15]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10d      	bne.n	800b128 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fd5e 	bl	800bbce <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b112:	e009      	b.n	800b128 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fc8e 	bl	800ba38 <USBD_CtlError>
      break;
 800b11c:	e004      	b.n	800b128 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fc89 	bl	800ba38 <USBD_CtlError>
      break;
 800b126:	e000      	b.n	800b12a <USBD_StdItfReq+0x76>
      break;
 800b128:	bf00      	nop
    }
    break;
 800b12a:	e004      	b.n	800b136 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fc82 	bl	800ba38 <USBD_CtlError>
    break;
 800b134:	bf00      	nop
  }

  return ret;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	889b      	ldrh	r3, [r3, #4]
 800b152:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d004      	beq.n	800b16a <USBD_StdEPReq+0x2a>
 800b160:	2b40      	cmp	r3, #64	; 0x40
 800b162:	d002      	beq.n	800b16a <USBD_StdEPReq+0x2a>
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00a      	beq.n	800b17e <USBD_StdEPReq+0x3e>
 800b168:	e135      	b.n	800b3d6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4798      	blx	r3
 800b178:	4603      	mov	r3, r0
 800b17a:	73fb      	strb	r3, [r7, #15]
    break;
 800b17c:	e130      	b.n	800b3e0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d03e      	beq.n	800b204 <USBD_StdEPReq+0xc4>
 800b186:	2b03      	cmp	r3, #3
 800b188:	d002      	beq.n	800b190 <USBD_StdEPReq+0x50>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d077      	beq.n	800b27e <USBD_StdEPReq+0x13e>
 800b18e:	e11c      	b.n	800b3ca <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b196:	2b02      	cmp	r3, #2
 800b198:	d002      	beq.n	800b1a0 <USBD_StdEPReq+0x60>
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d015      	beq.n	800b1ca <USBD_StdEPReq+0x8a>
 800b19e:	e02b      	b.n	800b1f8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00c      	beq.n	800b1c0 <USBD_StdEPReq+0x80>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b80      	cmp	r3, #128	; 0x80
 800b1aa:	d009      	beq.n	800b1c0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 f903 	bl	800c3bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1b6:	2180      	movs	r1, #128	; 0x80
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 f8ff 	bl	800c3bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b1be:	e020      	b.n	800b202 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fc38 	bl	800ba38 <USBD_CtlError>
        break;
 800b1c8:	e01b      	b.n	800b202 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	885b      	ldrh	r3, [r3, #2]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10e      	bne.n	800b1f0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_StdEPReq+0xb0>
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	2b80      	cmp	r3, #128	; 0x80
 800b1dc:	d008      	beq.n	800b1f0 <USBD_StdEPReq+0xb0>
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	88db      	ldrh	r3, [r3, #6]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d104      	bne.n	800b1f0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 f8e6 	bl	800c3bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fcec 	bl	800bbce <USBD_CtlSendStatus>

        break;
 800b1f6:	e004      	b.n	800b202 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fc1c 	bl	800ba38 <USBD_CtlError>
        break;
 800b200:	bf00      	nop
      }
      break;
 800b202:	e0e7      	b.n	800b3d4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b20a:	2b02      	cmp	r3, #2
 800b20c:	d002      	beq.n	800b214 <USBD_StdEPReq+0xd4>
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d015      	beq.n	800b23e <USBD_StdEPReq+0xfe>
 800b212:	e02d      	b.n	800b270 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b214:	7bbb      	ldrb	r3, [r7, #14]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00c      	beq.n	800b234 <USBD_StdEPReq+0xf4>
 800b21a:	7bbb      	ldrb	r3, [r7, #14]
 800b21c:	2b80      	cmp	r3, #128	; 0x80
 800b21e:	d009      	beq.n	800b234 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 f8c9 	bl	800c3bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b22a:	2180      	movs	r1, #128	; 0x80
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 f8c5 	bl	800c3bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b232:	e023      	b.n	800b27c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fbfe 	bl	800ba38 <USBD_CtlError>
        break;
 800b23c:	e01e      	b.n	800b27c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	885b      	ldrh	r3, [r3, #2]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d119      	bne.n	800b27a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b250:	7bbb      	ldrb	r3, [r7, #14]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 f8d0 	bl	800c3fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fcb7 	bl	800bbce <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	4798      	blx	r3
        }
        break;
 800b26e:	e004      	b.n	800b27a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fbe0 	bl	800ba38 <USBD_CtlError>
        break;
 800b278:	e000      	b.n	800b27c <USBD_StdEPReq+0x13c>
        break;
 800b27a:	bf00      	nop
      }
      break;
 800b27c:	e0aa      	b.n	800b3d4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b284:	2b02      	cmp	r3, #2
 800b286:	d002      	beq.n	800b28e <USBD_StdEPReq+0x14e>
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d032      	beq.n	800b2f2 <USBD_StdEPReq+0x1b2>
 800b28c:	e097      	b.n	800b3be <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <USBD_StdEPReq+0x164>
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b80      	cmp	r3, #128	; 0x80
 800b298:	d004      	beq.n	800b2a4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fbcb 	bl	800ba38 <USBD_CtlError>
          break;
 800b2a2:	e091      	b.n	800b3c8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da0b      	bge.n	800b2c4 <USBD_StdEPReq+0x184>
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
 800b2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	3310      	adds	r3, #16
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4413      	add	r3, r2
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	e00b      	b.n	800b2dc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fc15 	bl	800bb1a <USBD_CtlSendData>
        break;
 800b2f0:	e06a      	b.n	800b3c8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	da11      	bge.n	800b31e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	f003 020f 	and.w	r2, r3, #15
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	440b      	add	r3, r1
 800b30c:	3324      	adds	r3, #36	; 0x24
 800b30e:	881b      	ldrh	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d117      	bne.n	800b344 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fb8e 	bl	800ba38 <USBD_CtlError>
            break;
 800b31c:	e054      	b.n	800b3c8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	440b      	add	r3, r1
 800b330:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb7b 	bl	800ba38 <USBD_CtlError>
            break;
 800b342:	e041      	b.n	800b3c8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da0b      	bge.n	800b364 <USBD_StdEPReq+0x224>
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	3310      	adds	r3, #16
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	4413      	add	r3, r2
 800b360:	3304      	adds	r3, #4
 800b362:	e00b      	b.n	800b37c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	4413      	add	r3, r2
 800b37a:	3304      	adds	r3, #4
 800b37c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <USBD_StdEPReq+0x24a>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b80      	cmp	r3, #128	; 0x80
 800b388:	d103      	bne.n	800b392 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e00e      	b.n	800b3b0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 f84e 	bl	800c438 <USBD_LL_IsStallEP>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e002      	b.n	800b3b0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fbaf 	bl	800bb1a <USBD_CtlSendData>
          break;
 800b3bc:	e004      	b.n	800b3c8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fb39 	bl	800ba38 <USBD_CtlError>
        break;
 800b3c6:	bf00      	nop
      }
      break;
 800b3c8:	e004      	b.n	800b3d4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fb33 	bl	800ba38 <USBD_CtlError>
      break;
 800b3d2:	bf00      	nop
    }
    break;
 800b3d4:	e004      	b.n	800b3e0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fb2d 	bl	800ba38 <USBD_CtlError>
    break;
 800b3de:	bf00      	nop
  }

  return ret;
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	b29b      	uxth	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2b06      	cmp	r3, #6
 800b40e:	f200 8128 	bhi.w	800b662 <USBD_GetDescriptor+0x276>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <USBD_GetDescriptor+0x2c>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b44d 	.word	0x0800b44d
 800b420:	0800b48d 	.word	0x0800b48d
 800b424:	0800b663 	.word	0x0800b663
 800b428:	0800b663 	.word	0x0800b663
 800b42c:	0800b603 	.word	0x0800b603
 800b430:	0800b62f 	.word	0x0800b62f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	f107 0108 	add.w	r1, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
    break;
 800b44a:	e112      	b.n	800b672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7c1b      	ldrb	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10d      	bne.n	800b470 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45c:	f107 0208 	add.w	r2, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	2202      	movs	r2, #2
 800b46c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b46e:	e100      	b.n	800b672 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	f107 0208 	add.w	r2, r7, #8
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
 800b480:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3301      	adds	r3, #1
 800b486:	2202      	movs	r2, #2
 800b488:	701a      	strb	r2, [r3, #0]
    break;
 800b48a:	e0f2      	b.n	800b672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	885b      	ldrh	r3, [r3, #2]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b05      	cmp	r3, #5
 800b494:	f200 80ac 	bhi.w	800b5f0 <USBD_GetDescriptor+0x204>
 800b498:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <USBD_GetDescriptor+0xb4>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b4b9 	.word	0x0800b4b9
 800b4a4:	0800b4ed 	.word	0x0800b4ed
 800b4a8:	0800b521 	.word	0x0800b521
 800b4ac:	0800b555 	.word	0x0800b555
 800b4b0:	0800b589 	.word	0x0800b589
 800b4b4:	0800b5bd 	.word	0x0800b5bd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	7c12      	ldrb	r2, [r2, #16]
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4da:	e091      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 faaa 	bl	800ba38 <USBD_CtlError>
        err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
      break;
 800b4ea:	e089      	b.n	800b600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b50e:	e077      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa90 	bl	800ba38 <USBD_CtlError>
        err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
      break;
 800b51e:	e06f      	b.n	800b600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b542:	e05d      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa76 	bl	800ba38 <USBD_CtlError>
        err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
      break;
 800b552:	e055      	b.n	800b600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b576:	e043      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa5c 	bl	800ba38 <USBD_CtlError>
        err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
      break;
 800b586:	e03b      	b.n	800b600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5aa:	e029      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa42 	bl	800ba38 <USBD_CtlError>
        err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
      break;
 800b5ba:	e021      	b.n	800b600 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5de:	e00f      	b.n	800b600 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa28 	bl	800ba38 <USBD_CtlError>
        err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
      break;
 800b5ee:	e007      	b.n	800b600 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa20 	bl	800ba38 <USBD_CtlError>
      err++;
 800b5f8:	7afb      	ldrb	r3, [r7, #11]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b5fe:	bf00      	nop
    }
    break;
 800b600:	e037      	b.n	800b672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7c1b      	ldrb	r3, [r3, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f107 0208 	add.w	r2, r7, #8
 800b616:	4610      	mov	r0, r2
 800b618:	4798      	blx	r3
 800b61a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b61c:	e029      	b.n	800b672 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fa09 	bl	800ba38 <USBD_CtlError>
      err++;
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	3301      	adds	r3, #1
 800b62a:	72fb      	strb	r3, [r7, #11]
    break;
 800b62c:	e021      	b.n	800b672 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	7c1b      	ldrb	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10d      	bne.n	800b652 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	f107 0208 	add.w	r2, r7, #8
 800b642:	4610      	mov	r0, r2
 800b644:	4798      	blx	r3
 800b646:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	2207      	movs	r2, #7
 800b64e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b650:	e00f      	b.n	800b672 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f9ef 	bl	800ba38 <USBD_CtlError>
      err++;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	3301      	adds	r3, #1
 800b65e:	72fb      	strb	r3, [r7, #11]
    break;
 800b660:	e007      	b.n	800b672 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f9e7 	bl	800ba38 <USBD_CtlError>
    err++;
 800b66a:	7afb      	ldrb	r3, [r7, #11]
 800b66c:	3301      	adds	r3, #1
 800b66e:	72fb      	strb	r3, [r7, #11]
    break;
 800b670:	bf00      	nop
  }

  if (err != 0U)
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d11e      	bne.n	800b6b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	88db      	ldrh	r3, [r3, #6]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d016      	beq.n	800b6ae <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b680:	893b      	ldrh	r3, [r7, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00e      	beq.n	800b6a4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	88da      	ldrh	r2, [r3, #6]
 800b68a:	893b      	ldrh	r3, [r7, #8]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	bf28      	it	cs
 800b690:	4613      	movcs	r3, r2
 800b692:	b29b      	uxth	r3, r3
 800b694:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b696:	893b      	ldrh	r3, [r7, #8]
 800b698:	461a      	mov	r2, r3
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa3c 	bl	800bb1a <USBD_CtlSendData>
 800b6a2:	e009      	b.n	800b6b8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f9c6 	bl	800ba38 <USBD_CtlError>
 800b6ac:	e004      	b.n	800b6b8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fa8d 	bl	800bbce <USBD_CtlSendStatus>
 800b6b4:	e000      	b.n	800b6b8 <USBD_GetDescriptor+0x2cc>
    return;
 800b6b6:	bf00      	nop
    }
  }
}
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop

0800b6c0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	889b      	ldrh	r3, [r3, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d130      	bne.n	800b734 <USBD_SetAddress+0x74>
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	88db      	ldrh	r3, [r3, #6]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d12c      	bne.n	800b734 <USBD_SetAddress+0x74>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	2b7f      	cmp	r3, #127	; 0x7f
 800b6e0:	d828      	bhi.n	800b734 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	885b      	ldrh	r3, [r3, #2]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d104      	bne.n	800b702 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f99c 	bl	800ba38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b700:	e01c      	b.n	800b73c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7bfa      	ldrb	r2, [r7, #15]
 800b706:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 febe 	bl	800c490 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fa5a 	bl	800bbce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b728:	e008      	b.n	800b73c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b732:	e003      	b.n	800b73c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f97e 	bl	800ba38 <USBD_CtlError>
  }
}
 800b73c:	bf00      	nop
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	885b      	ldrh	r3, [r3, #2]
 800b756:	b2da      	uxtb	r2, r3
 800b758:	4b4b      	ldr	r3, [pc, #300]	; (800b888 <USBD_SetConfig+0x144>)
 800b75a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b75c:	4b4a      	ldr	r3, [pc, #296]	; (800b888 <USBD_SetConfig+0x144>)
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d905      	bls.n	800b770 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b764:	6839      	ldr	r1, [r7, #0]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f966 	bl	800ba38 <USBD_CtlError>
    return USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e087      	b.n	800b880 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b776:	2b02      	cmp	r3, #2
 800b778:	d002      	beq.n	800b780 <USBD_SetConfig+0x3c>
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d025      	beq.n	800b7ca <USBD_SetConfig+0x86>
 800b77e:	e071      	b.n	800b864 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b780:	4b41      	ldr	r3, [pc, #260]	; (800b888 <USBD_SetConfig+0x144>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01c      	beq.n	800b7c2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b788:	4b3f      	ldr	r3, [pc, #252]	; (800b888 <USBD_SetConfig+0x144>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b792:	4b3d      	ldr	r3, [pc, #244]	; (800b888 <USBD_SetConfig+0x144>)
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff f9a7 	bl	800aaec <USBD_SetClassConfig>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d004      	beq.n	800b7b2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b7a8:	6839      	ldr	r1, [r7, #0]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f944 	bl	800ba38 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b7b0:	e065      	b.n	800b87e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fa0b 	bl	800bbce <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2203      	movs	r2, #3
 800b7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b7c0:	e05d      	b.n	800b87e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fa03 	bl	800bbce <USBD_CtlSendStatus>
    break;
 800b7c8:	e059      	b.n	800b87e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b7ca:	4b2f      	ldr	r3, [pc, #188]	; (800b888 <USBD_SetConfig+0x144>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d112      	bne.n	800b7f8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b7da:	4b2b      	ldr	r3, [pc, #172]	; (800b888 <USBD_SetConfig+0x144>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7e4:	4b28      	ldr	r3, [pc, #160]	; (800b888 <USBD_SetConfig+0x144>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f7ff f99a 	bl	800ab24 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f9ec 	bl	800bbce <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b7f6:	e042      	b.n	800b87e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b7f8:	4b23      	ldr	r3, [pc, #140]	; (800b888 <USBD_SetConfig+0x144>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	429a      	cmp	r2, r3
 800b804:	d02a      	beq.n	800b85c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff f988 	bl	800ab24 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b814:	4b1c      	ldr	r3, [pc, #112]	; (800b888 <USBD_SetConfig+0x144>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b81e:	4b1a      	ldr	r3, [pc, #104]	; (800b888 <USBD_SetConfig+0x144>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff f961 	bl	800aaec <USBD_SetClassConfig>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00f      	beq.n	800b854 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f8fe 	bl	800ba38 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff f96d 	bl	800ab24 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2202      	movs	r2, #2
 800b84e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b852:	e014      	b.n	800b87e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f9ba 	bl	800bbce <USBD_CtlSendStatus>
    break;
 800b85a:	e010      	b.n	800b87e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9b6 	bl	800bbce <USBD_CtlSendStatus>
    break;
 800b862:	e00c      	b.n	800b87e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f8e6 	bl	800ba38 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <USBD_SetConfig+0x144>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff f956 	bl	800ab24 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b878:	2303      	movs	r3, #3
 800b87a:	73fb      	strb	r3, [r7, #15]
    break;
 800b87c:	bf00      	nop
  }

  return ret;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	200002d0 	.word	0x200002d0

0800b88c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	88db      	ldrh	r3, [r3, #6]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d004      	beq.n	800b8a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f8c9 	bl	800ba38 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b8a6:	e021      	b.n	800b8ec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	db17      	blt.n	800b8e2 <USBD_GetConfig+0x56>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	dd02      	ble.n	800b8bc <USBD_GetConfig+0x30>
 800b8b6:	2b03      	cmp	r3, #3
 800b8b8:	d00b      	beq.n	800b8d2 <USBD_GetConfig+0x46>
 800b8ba:	e012      	b.n	800b8e2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f925 	bl	800bb1a <USBD_CtlSendData>
      break;
 800b8d0:	e00c      	b.n	800b8ec <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f91d 	bl	800bb1a <USBD_CtlSendData>
      break;
 800b8e0:	e004      	b.n	800b8ec <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f8a7 	bl	800ba38 <USBD_CtlError>
      break;
 800b8ea:	bf00      	nop
}
 800b8ec:	bf00      	nop
 800b8ee:	3708      	adds	r7, #8
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	3b01      	subs	r3, #1
 800b906:	2b02      	cmp	r3, #2
 800b908:	d81e      	bhi.n	800b948 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	88db      	ldrh	r3, [r3, #6]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d004      	beq.n	800b91c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f88f 	bl	800ba38 <USBD_CtlError>
      break;
 800b91a:	e01a      	b.n	800b952 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d005      	beq.n	800b938 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f043 0202 	orr.w	r2, r3, #2
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	330c      	adds	r3, #12
 800b93c:	2202      	movs	r2, #2
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f8ea 	bl	800bb1a <USBD_CtlSendData>
    break;
 800b946:	e004      	b.n	800b952 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f874 	bl	800ba38 <USBD_CtlError>
    break;
 800b950:	bf00      	nop
  }
}
 800b952:	bf00      	nop
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	885b      	ldrh	r3, [r3, #2]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d106      	bne.n	800b97a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f92a 	bl	800bbce <USBD_CtlSendStatus>
  }
}
 800b97a:	bf00      	nop
 800b97c:	3708      	adds	r7, #8
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b992:	3b01      	subs	r3, #1
 800b994:	2b02      	cmp	r3, #2
 800b996:	d80b      	bhi.n	800b9b0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	885b      	ldrh	r3, [r3, #2]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d10c      	bne.n	800b9ba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f910 	bl	800bbce <USBD_CtlSendStatus>
      }
      break;
 800b9ae:	e004      	b.n	800b9ba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f840 	bl	800ba38 <USBD_CtlError>
      break;
 800b9b8:	e000      	b.n	800b9bc <USBD_ClrFeature+0x3a>
      break;
 800b9ba:	bf00      	nop
  }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	781a      	ldrb	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	781a      	ldrb	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff fad3 	bl	800af9a <SWAPBYTE>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3301      	adds	r3, #1
 800ba06:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f7ff fac6 	bl	800af9a <SWAPBYTE>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	461a      	mov	r2, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff fab9 	bl	800af9a <SWAPBYTE>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	80da      	strh	r2, [r3, #6]
}
 800ba30:	bf00      	nop
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba42:	2180      	movs	r1, #128	; 0x80
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fcb9 	bl	800c3bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fcb5 	bl	800c3bc <USBD_LL_StallEP>
}
 800ba52:	bf00      	nop
 800ba54:	3708      	adds	r7, #8
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b086      	sub	sp, #24
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d036      	beq.n	800bade <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba74:	6938      	ldr	r0, [r7, #16]
 800ba76:	f000 f836 	bl	800bae6 <USBD_GetLen>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	7812      	ldrb	r2, [r2, #0]
 800ba92:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	3301      	adds	r3, #1
 800ba98:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba9a:	7dfb      	ldrb	r3, [r7, #23]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	4413      	add	r3, r2
 800baa0:	2203      	movs	r2, #3
 800baa2:	701a      	strb	r2, [r3, #0]
  idx++;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	3301      	adds	r3, #1
 800baa8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800baaa:	e013      	b.n	800bad4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	4413      	add	r3, r2
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	7812      	ldrb	r2, [r2, #0]
 800bab6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	3301      	adds	r3, #1
 800babc:	613b      	str	r3, [r7, #16]
    idx++;
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	3301      	adds	r3, #1
 800bac2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	4413      	add	r3, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	701a      	strb	r2, [r3, #0]
    idx++;
 800bace:	7dfb      	ldrb	r3, [r7, #23]
 800bad0:	3301      	adds	r3, #1
 800bad2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e7      	bne.n	800baac <USBD_GetString+0x52>
 800badc:	e000      	b.n	800bae0 <USBD_GetString+0x86>
    return;
 800bade:	bf00      	nop
  }
}
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b085      	sub	sp, #20
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800baf6:	e005      	b.n	800bb04 <USBD_GetLen+0x1e>
  {
    len++;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
 800bafa:	3301      	adds	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	3301      	adds	r3, #1
 800bb02:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1f5      	bne.n	800baf8 <USBD_GetLen+0x12>
  }

  return len;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2202      	movs	r2, #2
 800bb2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	2100      	movs	r1, #0
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 fcc4 	bl	800c4ce <USBD_LL_Transmit>

  return USBD_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	2100      	movs	r1, #0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f000 fcb3 	bl	800c4ce <USBD_LL_Transmit>

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2203      	movs	r2, #3
 800bb82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fcb7 	bl	800c510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68ba      	ldr	r2, [r7, #8]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 fca6 	bl	800c510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2204      	movs	r2, #4
 800bbda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fc72 	bl	800c4ce <USBD_LL_Transmit>

  return USBD_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2205      	movs	r2, #5
 800bc00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc04:	2300      	movs	r3, #0
 800bc06:	2200      	movs	r2, #0
 800bc08:	2100      	movs	r1, #0
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fc80 	bl	800c510 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc20:	2200      	movs	r2, #0
 800bc22:	4912      	ldr	r1, [pc, #72]	; (800bc6c <MX_USB_DEVICE_Init+0x50>)
 800bc24:	4812      	ldr	r0, [pc, #72]	; (800bc70 <MX_USB_DEVICE_Init+0x54>)
 800bc26:	f7fe fef3 	bl	800aa10 <USBD_Init>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc30:	f7f5 fc76 	bl	8001520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc34:	490f      	ldr	r1, [pc, #60]	; (800bc74 <MX_USB_DEVICE_Init+0x58>)
 800bc36:	480e      	ldr	r0, [pc, #56]	; (800bc70 <MX_USB_DEVICE_Init+0x54>)
 800bc38:	f7fe ff20 	bl	800aa7c <USBD_RegisterClass>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc42:	f7f5 fc6d 	bl	8001520 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc46:	490c      	ldr	r1, [pc, #48]	; (800bc78 <MX_USB_DEVICE_Init+0x5c>)
 800bc48:	4809      	ldr	r0, [pc, #36]	; (800bc70 <MX_USB_DEVICE_Init+0x54>)
 800bc4a:	f7fe fe75 	bl	800a938 <USBD_CDC_RegisterInterface>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc54:	f7f5 fc64 	bl	8001520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc58:	4805      	ldr	r0, [pc, #20]	; (800bc70 <MX_USB_DEVICE_Init+0x54>)
 800bc5a:	f7fe ff30 	bl	800aabe <USBD_Start>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc64:	f7f5 fc5c 	bl	8001520 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc68:	bf00      	nop
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20000160 	.word	0x20000160
 800bc70:	20000518 	.word	0x20000518
 800bc74:	20000048 	.word	0x20000048
 800bc78:	2000014c 	.word	0x2000014c

0800bc7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc80:	2200      	movs	r2, #0
 800bc82:	4905      	ldr	r1, [pc, #20]	; (800bc98 <CDC_Init_FS+0x1c>)
 800bc84:	4805      	ldr	r0, [pc, #20]	; (800bc9c <CDC_Init_FS+0x20>)
 800bc86:	f7fe fe6c 	bl	800a962 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc8a:	4905      	ldr	r1, [pc, #20]	; (800bca0 <CDC_Init_FS+0x24>)
 800bc8c:	4803      	ldr	r0, [pc, #12]	; (800bc9c <CDC_Init_FS+0x20>)
 800bc8e:	f7fe fe81 	bl	800a994 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20000fe8 	.word	0x20000fe8
 800bc9c:	20000518 	.word	0x20000518
 800bca0:	200007e8 	.word	0x200007e8

0800bca4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bca8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	71fb      	strb	r3, [r7, #7]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b23      	cmp	r3, #35	; 0x23
 800bcc8:	d84a      	bhi.n	800bd60 <CDC_Control_FS+0xac>
 800bcca:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <CDC_Control_FS+0x1c>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800bd61 	.word	0x0800bd61
 800bcd4:	0800bd61 	.word	0x0800bd61
 800bcd8:	0800bd61 	.word	0x0800bd61
 800bcdc:	0800bd61 	.word	0x0800bd61
 800bce0:	0800bd61 	.word	0x0800bd61
 800bce4:	0800bd61 	.word	0x0800bd61
 800bce8:	0800bd61 	.word	0x0800bd61
 800bcec:	0800bd61 	.word	0x0800bd61
 800bcf0:	0800bd61 	.word	0x0800bd61
 800bcf4:	0800bd61 	.word	0x0800bd61
 800bcf8:	0800bd61 	.word	0x0800bd61
 800bcfc:	0800bd61 	.word	0x0800bd61
 800bd00:	0800bd61 	.word	0x0800bd61
 800bd04:	0800bd61 	.word	0x0800bd61
 800bd08:	0800bd61 	.word	0x0800bd61
 800bd0c:	0800bd61 	.word	0x0800bd61
 800bd10:	0800bd61 	.word	0x0800bd61
 800bd14:	0800bd61 	.word	0x0800bd61
 800bd18:	0800bd61 	.word	0x0800bd61
 800bd1c:	0800bd61 	.word	0x0800bd61
 800bd20:	0800bd61 	.word	0x0800bd61
 800bd24:	0800bd61 	.word	0x0800bd61
 800bd28:	0800bd61 	.word	0x0800bd61
 800bd2c:	0800bd61 	.word	0x0800bd61
 800bd30:	0800bd61 	.word	0x0800bd61
 800bd34:	0800bd61 	.word	0x0800bd61
 800bd38:	0800bd61 	.word	0x0800bd61
 800bd3c:	0800bd61 	.word	0x0800bd61
 800bd40:	0800bd61 	.word	0x0800bd61
 800bd44:	0800bd61 	.word	0x0800bd61
 800bd48:	0800bd61 	.word	0x0800bd61
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bd61 	.word	0x0800bd61
 800bd58:	0800bd61 	.word	0x0800bd61
 800bd5c:	0800bd61 	.word	0x0800bd61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd60:	bf00      	nop
  }

  return (USBD_OK);
 800bd62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	4805      	ldr	r0, [pc, #20]	; (800bd94 <CDC_Receive_FS+0x24>)
 800bd7e:	f7fe fe09 	bl	800a994 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd82:	4804      	ldr	r0, [pc, #16]	; (800bd94 <CDC_Receive_FS+0x24>)
 800bd84:	f7fe fe1a 	bl	800a9bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3708      	adds	r7, #8
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000518 	.word	0x20000518

0800bd98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4613      	mov	r3, r2
 800bda4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2212      	movs	r2, #18
 800bdcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdce:	4b03      	ldr	r3, [pc, #12]	; (800bddc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	2000017c 	.word	0x2000017c

0800bde0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2204      	movs	r2, #4
 800bdf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdf2:	4b03      	ldr	r3, [pc, #12]	; (800be00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20000190 	.word	0x20000190

0800be04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4907      	ldr	r1, [pc, #28]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be1a:	4808      	ldr	r0, [pc, #32]	; (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be1c:	f7ff fe1d 	bl	800ba5a <USBD_GetString>
 800be20:	e004      	b.n	800be2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4904      	ldr	r1, [pc, #16]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be26:	4805      	ldr	r0, [pc, #20]	; (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be28:	f7ff fe17 	bl	800ba5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	; (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	200017e8 	.word	0x200017e8
 800be3c:	0800db40 	.word	0x0800db40

0800be40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4904      	ldr	r1, [pc, #16]	; (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be50:	4804      	ldr	r0, [pc, #16]	; (800be64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be52:	f7ff fe02 	bl	800ba5a <USBD_GetString>
  return USBD_StrDesc;
 800be56:	4b02      	ldr	r3, [pc, #8]	; (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	200017e8 	.word	0x200017e8
 800be64:	0800db58 	.word	0x0800db58

0800be68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	221a      	movs	r2, #26
 800be78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be7a:	f000 f843 	bl	800bf04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be7e:	4b02      	ldr	r3, [pc, #8]	; (800be88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000194 	.word	0x20000194

0800be8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bea2:	4808      	ldr	r0, [pc, #32]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bea4:	f7ff fdd9 	bl	800ba5a <USBD_GetString>
 800bea8:	e004      	b.n	800beb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4904      	ldr	r1, [pc, #16]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beae:	4805      	ldr	r0, [pc, #20]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb0:	f7ff fdd3 	bl	800ba5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb4:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	200017e8 	.word	0x200017e8
 800bec4:	0800db6c 	.word	0x0800db6c

0800bec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4907      	ldr	r1, [pc, #28]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bede:	4808      	ldr	r0, [pc, #32]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bee0:	f7ff fdbb 	bl	800ba5a <USBD_GetString>
 800bee4:	e004      	b.n	800bef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4904      	ldr	r1, [pc, #16]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beea:	4805      	ldr	r0, [pc, #20]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beec:	f7ff fdb5 	bl	800ba5a <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef0:	4b02      	ldr	r3, [pc, #8]	; (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200017e8 	.word	0x200017e8
 800bf00:	0800db78 	.word	0x0800db78

0800bf04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf0a:	4b0f      	ldr	r3, [pc, #60]	; (800bf48 <Get_SerialNum+0x44>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf10:	4b0e      	ldr	r3, [pc, #56]	; (800bf4c <Get_SerialNum+0x48>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf16:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <Get_SerialNum+0x4c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4413      	add	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d009      	beq.n	800bf3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	4909      	ldr	r1, [pc, #36]	; (800bf54 <Get_SerialNum+0x50>)
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f814 	bl	800bf5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf34:	2204      	movs	r2, #4
 800bf36:	4908      	ldr	r1, [pc, #32]	; (800bf58 <Get_SerialNum+0x54>)
 800bf38:	68b8      	ldr	r0, [r7, #8]
 800bf3a:	f000 f80f 	bl	800bf5c <IntToUnicode>
  }
}
 800bf3e:	bf00      	nop
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	1fff7a10 	.word	0x1fff7a10
 800bf4c:	1fff7a14 	.word	0x1fff7a14
 800bf50:	1fff7a18 	.word	0x1fff7a18
 800bf54:	20000196 	.word	0x20000196
 800bf58:	200001a6 	.word	0x200001a6

0800bf5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75fb      	strb	r3, [r7, #23]
 800bf72:	e027      	b.n	800bfc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	2b09      	cmp	r3, #9
 800bf7a:	d80b      	bhi.n	800bf94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	0f1b      	lsrs	r3, r3, #28
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4619      	mov	r1, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3230      	adds	r2, #48	; 0x30
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e00a      	b.n	800bfaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	0f1b      	lsrs	r3, r3, #28
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	7dfb      	ldrb	r3, [r7, #23]
 800bf9c:	005b      	lsls	r3, r3, #1
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3237      	adds	r2, #55	; 0x37
 800bfa6:	b2d2      	uxtb	r2, r2
 800bfa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	005b      	lsls	r3, r3, #1
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	4413      	add	r3, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	75fb      	strb	r3, [r7, #23]
 800bfc4:	7dfa      	ldrb	r2, [r7, #23]
 800bfc6:	79fb      	ldrb	r3, [r7, #7]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d3d3      	bcc.n	800bf74 <IntToUnicode+0x18>
  }
}
 800bfcc:	bf00      	nop
 800bfce:	371c      	adds	r7, #28
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	; 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfe0:	f107 0314 	add.w	r3, r7, #20
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	605a      	str	r2, [r3, #4]
 800bfea:	609a      	str	r2, [r3, #8]
 800bfec:	60da      	str	r2, [r3, #12]
 800bfee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bff8:	d13a      	bne.n	800c070 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bffa:	2300      	movs	r3, #0
 800bffc:	613b      	str	r3, [r7, #16]
 800bffe:	4b1e      	ldr	r3, [pc, #120]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c002:	4a1d      	ldr	r2, [pc, #116]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c004:	f043 0301 	orr.w	r3, r3, #1
 800c008:	6313      	str	r3, [r2, #48]	; 0x30
 800c00a:	4b1b      	ldr	r3, [pc, #108]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f003 0301 	and.w	r3, r3, #1
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c016:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c01a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c01c:	2302      	movs	r3, #2
 800c01e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c020:	2300      	movs	r3, #0
 800c022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c024:	2303      	movs	r3, #3
 800c026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c028:	230a      	movs	r3, #10
 800c02a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	4619      	mov	r1, r3
 800c032:	4812      	ldr	r0, [pc, #72]	; (800c07c <HAL_PCD_MspInit+0xa4>)
 800c034:	f7f8 fa74 	bl	8004520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c038:	4b0f      	ldr	r3, [pc, #60]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	4a0e      	ldr	r2, [pc, #56]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c042:	6353      	str	r3, [r2, #52]	; 0x34
 800c044:	2300      	movs	r3, #0
 800c046:	60fb      	str	r3, [r7, #12]
 800c048:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04c:	4a0a      	ldr	r2, [pc, #40]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c04e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c052:	6453      	str	r3, [r2, #68]	; 0x44
 800c054:	4b08      	ldr	r3, [pc, #32]	; (800c078 <HAL_PCD_MspInit+0xa0>)
 800c056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c05c:	60fb      	str	r3, [r7, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c060:	2200      	movs	r2, #0
 800c062:	2100      	movs	r1, #0
 800c064:	2043      	movs	r0, #67	; 0x43
 800c066:	f7f7 fe94 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c06a:	2043      	movs	r0, #67	; 0x43
 800c06c:	f7f7 fead 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c070:	bf00      	nop
 800c072:	3728      	adds	r7, #40	; 0x28
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	40023800 	.word	0x40023800
 800c07c:	40020000 	.word	0x40020000

0800c080 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f7fe fd5c 	bl	800ab54 <USBD_LL_SetupStage>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	78fb      	ldrb	r3, [r7, #3]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	f7fe fd94 	bl	800abfa <USBD_LL_DataOutStage>
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800c0ec:	78fa      	ldrb	r2, [r7, #3]
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	00db      	lsls	r3, r3, #3
 800c0f4:	1a9b      	subs	r3, r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	440b      	add	r3, r1
 800c0fa:	3348      	adds	r3, #72	; 0x48
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	78fb      	ldrb	r3, [r7, #3]
 800c100:	4619      	mov	r1, r3
 800c102:	f7fe fddd 	bl	800acc0 <USBD_LL_DataInStage>
}
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fee1 	bl	800aee4 <USBD_LL_SOF>
}
 800c122:	bf00      	nop
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b084      	sub	sp, #16
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c132:	2301      	movs	r3, #1
 800c134:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]
 800c142:	e008      	b.n	800c156 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	2b02      	cmp	r3, #2
 800c14a:	d102      	bne.n	800c152 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c14c:	2301      	movs	r3, #1
 800c14e:	73fb      	strb	r3, [r7, #15]
 800c150:	e001      	b.n	800c156 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c152:	f7f5 f9e5 	bl	8001520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c15c:	7bfa      	ldrb	r2, [r7, #15]
 800c15e:	4611      	mov	r1, r2
 800c160:	4618      	mov	r0, r3
 800c162:	f7fe fe84 	bl	800ae6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fe3d 	bl	800adec <USBD_LL_Reset>
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
	...

0800c17c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fe7f 	bl	800ae8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1a2:	f043 0301 	orr.w	r3, r3, #1
 800c1a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d005      	beq.n	800c1bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1b0:	4b04      	ldr	r3, [pc, #16]	; (800c1c4 <HAL_PCD_SuspendCallback+0x48>)
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	4a03      	ldr	r2, [pc, #12]	; (800c1c4 <HAL_PCD_SuspendCallback+0x48>)
 800c1b6:	f043 0306 	orr.w	r3, r3, #6
 800c1ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	e000ed00 	.word	0xe000ed00

0800c1c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe fe6e 	bl	800aeb8 <USBD_LL_Resume>
}
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c1f6:	78fa      	ldrb	r2, [r7, #3]
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe fe99 	bl	800af32 <USBD_LL_IsoOUTIncomplete>
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c21a:	78fa      	ldrb	r2, [r7, #3]
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe fe7a 	bl	800af18 <USBD_LL_IsoINIncomplete>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fe86 	bl	800af4c <USBD_LL_DevConnected>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fe83 	bl	800af62 <USBD_LL_DevDisconnected>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d13c      	bne.n	800c2ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c274:	4a20      	ldr	r2, [pc, #128]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a1e      	ldr	r2, [pc, #120]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c280:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c284:	4b1c      	ldr	r3, [pc, #112]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c286:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c28a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c28c:	4b1a      	ldr	r3, [pc, #104]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c28e:	2204      	movs	r2, #4
 800c290:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c292:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c294:	2202      	movs	r2, #2
 800c296:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c298:	4b17      	ldr	r3, [pc, #92]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c29e:	4b16      	ldr	r3, [pc, #88]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2a0:	2202      	movs	r2, #2
 800c2a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2a4:	4b14      	ldr	r3, [pc, #80]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2aa:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2b0:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2b6:	4b10      	ldr	r3, [pc, #64]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2bc:	4b0e      	ldr	r3, [pc, #56]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2be:	2200      	movs	r2, #0
 800c2c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2c2:	480d      	ldr	r0, [pc, #52]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2c4:	f7f8 ff37 	bl	8005136 <HAL_PCD_Init>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2ce:	f7f5 f927 	bl	8001520 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2d2:	2180      	movs	r1, #128	; 0x80
 800c2d4:	4808      	ldr	r0, [pc, #32]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2d6:	f7fa f894 	bl	8006402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2da:	2240      	movs	r2, #64	; 0x40
 800c2dc:	2100      	movs	r1, #0
 800c2de:	4806      	ldr	r0, [pc, #24]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2e0:	f7fa f848 	bl	8006374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2e4:	2280      	movs	r2, #128	; 0x80
 800c2e6:	2101      	movs	r1, #1
 800c2e8:	4803      	ldr	r0, [pc, #12]	; (800c2f8 <USBD_LL_Init+0x94>)
 800c2ea:	f7fa f843 	bl	8006374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	200019e8 	.word	0x200019e8

0800c2fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c312:	4618      	mov	r0, r3
 800c314:	f7f9 f82c 	bl	8005370 <HAL_PCD_Start>
 800c318:	4603      	mov	r3, r0
 800c31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	4618      	mov	r0, r3
 800c320:	f000 f92a 	bl	800c578 <USBD_Get_USB_Status>
 800c324:	4603      	mov	r3, r0
 800c326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c328:	7bbb      	ldrb	r3, [r7, #14]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	4608      	mov	r0, r1
 800c33c:	4611      	mov	r1, r2
 800c33e:	461a      	mov	r2, r3
 800c340:	4603      	mov	r3, r0
 800c342:	70fb      	strb	r3, [r7, #3]
 800c344:	460b      	mov	r3, r1
 800c346:	70bb      	strb	r3, [r7, #2]
 800c348:	4613      	mov	r3, r2
 800c34a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c35a:	78bb      	ldrb	r3, [r7, #2]
 800c35c:	883a      	ldrh	r2, [r7, #0]
 800c35e:	78f9      	ldrb	r1, [r7, #3]
 800c360:	f7f9 fc10 	bl	8005b84 <HAL_PCD_EP_Open>
 800c364:	4603      	mov	r3, r0
 800c366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f904 	bl	800c578 <USBD_Get_USB_Status>
 800c370:	4603      	mov	r3, r0
 800c372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b084      	sub	sp, #16
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c398:	78fa      	ldrb	r2, [r7, #3]
 800c39a:	4611      	mov	r1, r2
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f9 fc59 	bl	8005c54 <HAL_PCD_EP_Close>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a6:	7bfb      	ldrb	r3, [r7, #15]
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f000 f8e5 	bl	800c578 <USBD_Get_USB_Status>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3d6:	78fa      	ldrb	r2, [r7, #3]
 800c3d8:	4611      	mov	r1, r2
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7f9 fd31 	bl	8005e42 <HAL_PCD_EP_SetStall>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 f8c6 	bl	800c578 <USBD_Get_USB_Status>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c414:	78fa      	ldrb	r2, [r7, #3]
 800c416:	4611      	mov	r1, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f7f9 fd76 	bl	8005f0a <HAL_PCD_EP_ClrStall>
 800c41e:	4603      	mov	r3, r0
 800c420:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	4618      	mov	r0, r3
 800c426:	f000 f8a7 	bl	800c578 <USBD_Get_USB_Status>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	460b      	mov	r3, r1
 800c442:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c44a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c44c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c450:	2b00      	cmp	r3, #0
 800c452:	da0b      	bge.n	800c46c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c45a:	68f9      	ldr	r1, [r7, #12]
 800c45c:	4613      	mov	r3, r2
 800c45e:	00db      	lsls	r3, r3, #3
 800c460:	1a9b      	subs	r3, r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	440b      	add	r3, r1
 800c466:	333e      	adds	r3, #62	; 0x3e
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	e00b      	b.n	800c484 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c472:	68f9      	ldr	r1, [r7, #12]
 800c474:	4613      	mov	r3, r2
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	1a9b      	subs	r3, r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	460b      	mov	r3, r1
 800c49a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f9 fb43 	bl	8005b3a <HAL_PCD_SetAddress>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 f85c 	bl	800c578 <USBD_Get_USB_Status>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3710      	adds	r7, #16
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b086      	sub	sp, #24
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
 800c4da:	460b      	mov	r3, r1
 800c4dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c4ec:	7af9      	ldrb	r1, [r7, #11]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	f7f9 fc5c 	bl	8005dae <HAL_PCD_EP_Transmit>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f83b 	bl	800c578 <USBD_Get_USB_Status>
 800c502:	4603      	mov	r3, r0
 800c504:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c506:	7dbb      	ldrb	r3, [r7, #22]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3718      	adds	r7, #24
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	607a      	str	r2, [r7, #4]
 800c51a:	603b      	str	r3, [r7, #0]
 800c51c:	460b      	mov	r3, r1
 800c51e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c52e:	7af9      	ldrb	r1, [r7, #11]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	f7f9 fbd8 	bl	8005ce8 <HAL_PCD_EP_Receive>
 800c538:	4603      	mov	r3, r0
 800c53a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f81a 	bl	800c578 <USBD_Get_USB_Status>
 800c544:	4603      	mov	r3, r0
 800c546:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c548:	7dbb      	ldrb	r3, [r7, #22]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c564:	78fa      	ldrb	r2, [r7, #3]
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7f9 fc08 	bl	8005d7e <HAL_PCD_EP_GetRxCount>
 800c56e:	4603      	mov	r3, r0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	2b03      	cmp	r3, #3
 800c58a:	d817      	bhi.n	800c5bc <USBD_Get_USB_Status+0x44>
 800c58c:	a201      	add	r2, pc, #4	; (adr r2, 800c594 <USBD_Get_USB_Status+0x1c>)
 800c58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c592:	bf00      	nop
 800c594:	0800c5a5 	.word	0x0800c5a5
 800c598:	0800c5ab 	.word	0x0800c5ab
 800c59c:	0800c5b1 	.word	0x0800c5b1
 800c5a0:	0800c5b7 	.word	0x0800c5b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a8:	e00b      	b.n	800c5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ae:	e008      	b.n	800c5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b4:	e005      	b.n	800c5c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ba:	e002      	b.n	800c5c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c0:	bf00      	nop
  }
  return usb_status;
 800c5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_Znwj>:
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	bf14      	ite	ne
 800c5d6:	4604      	movne	r4, r0
 800c5d8:	2401      	moveq	r4, #1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f001 f90a 	bl	800d7f4 <malloc>
 800c5e0:	b930      	cbnz	r0, 800c5f0 <_Znwj+0x20>
 800c5e2:	f000 f807 	bl	800c5f4 <_ZSt15get_new_handlerv>
 800c5e6:	b908      	cbnz	r0, 800c5ec <_Znwj+0x1c>
 800c5e8:	f001 f8d3 	bl	800d792 <abort>
 800c5ec:	4780      	blx	r0
 800c5ee:	e7f4      	b.n	800c5da <_Znwj+0xa>
 800c5f0:	bd10      	pop	{r4, pc}
	...

0800c5f4 <_ZSt15get_new_handlerv>:
 800c5f4:	4b02      	ldr	r3, [pc, #8]	; (800c600 <_ZSt15get_new_handlerv+0xc>)
 800c5f6:	6818      	ldr	r0, [r3, #0]
 800c5f8:	f3bf 8f5b 	dmb	ish
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	200002d4 	.word	0x200002d4

0800c604 <_ZdlPv>:
 800c604:	f001 b8fe 	b.w	800d804 <free>

0800c608 <_ZNSaIcEC1Ev>:
 800c608:	4770      	bx	lr

0800c60a <_ZNSaIcED1Ev>:
 800c60a:	4770      	bx	lr

0800c60c <_ZSt17__throw_bad_allocv>:
 800c60c:	b508      	push	{r3, lr}
 800c60e:	f001 f8c0 	bl	800d792 <abort>

0800c612 <_ZSt19__throw_logic_errorPKc>:
 800c612:	b508      	push	{r3, lr}
 800c614:	f001 f8bd 	bl	800d792 <abort>

0800c618 <_ZSt20__throw_length_errorPKc>:
 800c618:	b508      	push	{r3, lr}
 800c61a:	f001 f8ba 	bl	800d792 <abort>

0800c61e <_ZSt24__throw_out_of_range_fmtPKcz>:
 800c61e:	b40f      	push	{r0, r1, r2, r3}
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	f107 0410 	add.w	r4, r7, #16
 800c62a:	f854 5b04 	ldr.w	r5, [r4], #4
 800c62e:	4628      	mov	r0, r5
 800c630:	f7f3 fdca 	bl	80001c8 <strlen>
 800c634:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800c638:	f023 0307 	bic.w	r3, r3, #7
 800c63c:	ebad 0d03 	sub.w	sp, sp, r3
 800c640:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800c644:	4623      	mov	r3, r4
 800c646:	462a      	mov	r2, r5
 800c648:	4668      	mov	r0, sp
 800c64a:	607c      	str	r4, [r7, #4]
 800c64c:	f000 f850 	bl	800c6f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800c650:	f001 f89f 	bl	800d792 <abort>

0800c654 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800c654:	b580      	push	{r7, lr}
 800c656:	b09c      	sub	sp, #112	; 0x70
 800c658:	af00      	add	r7, sp, #0
 800c65a:	1a0e      	subs	r6, r1, r0
 800c65c:	4680      	mov	r8, r0
 800c65e:	2269      	movs	r2, #105	; 0x69
 800c660:	490e      	ldr	r1, [pc, #56]	; (800c69c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800c662:	1d38      	adds	r0, r7, #4
 800c664:	f001 f8d6 	bl	800d814 <memcpy>
 800c668:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800c66c:	f023 0307 	bic.w	r3, r3, #7
 800c670:	ebad 0d03 	sub.w	sp, sp, r3
 800c674:	466c      	mov	r4, sp
 800c676:	2268      	movs	r2, #104	; 0x68
 800c678:	1d39      	adds	r1, r7, #4
 800c67a:	1c75      	adds	r5, r6, #1
 800c67c:	4620      	mov	r0, r4
 800c67e:	f001 f8c9 	bl	800d814 <memcpy>
 800c682:	4425      	add	r5, r4
 800c684:	4632      	mov	r2, r6
 800c686:	4641      	mov	r1, r8
 800c688:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c68c:	f001 f8c2 	bl	800d814 <memcpy>
 800c690:	2300      	movs	r3, #0
 800c692:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800c696:	4620      	mov	r0, r4
 800c698:	f7ff ffbb 	bl	800c612 <_ZSt19__throw_logic_errorPKc>
 800c69c:	0800dbb3 	.word	0x0800dbb3

0800c6a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	466d      	mov	r5, sp
 800c6a8:	f105 040c 	add.w	r4, r5, #12
 800c6ac:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800c6ec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800c6b0:	4623      	mov	r3, r4
 800c6b2:	f04f 0c0a 	mov.w	ip, #10
 800c6b6:	fbb2 f6fc 	udiv	r6, r2, ip
 800c6ba:	fb0c 2216 	mls	r2, ip, r6, r2
 800c6be:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800c6c2:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800c6c6:	4632      	mov	r2, r6
 800c6c8:	2e00      	cmp	r6, #0
 800c6ca:	d1f4      	bne.n	800c6b6 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800c6cc:	1ae4      	subs	r4, r4, r3
 800c6ce:	428c      	cmp	r4, r1
 800c6d0:	d808      	bhi.n	800c6e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800c6d2:	f1c4 010c 	rsb	r1, r4, #12
 800c6d6:	4622      	mov	r2, r4
 800c6d8:	4429      	add	r1, r5
 800c6da:	f001 f89b 	bl	800d814 <memcpy>
 800c6de:	4620      	mov	r0, r4
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e4:	f04f 34ff 	mov.w	r4, #4294967295
 800c6e8:	e7f9      	b.n	800c6de <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800c6ea:	bf00      	nop
 800c6ec:	0800dba8 	.word	0x0800dba8

0800c6f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800c6f0:	3901      	subs	r1, #1
 800c6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	4615      	mov	r5, r2
 800c6fa:	1847      	adds	r7, r0, r1
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	782a      	ldrb	r2, [r5, #0]
 800c700:	b392      	cbz	r2, 800c768 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800c702:	42bc      	cmp	r4, r7
 800c704:	d22c      	bcs.n	800c760 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800c706:	2a25      	cmp	r2, #37	; 0x25
 800c708:	d107      	bne.n	800c71a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800c70a:	786a      	ldrb	r2, [r5, #1]
 800c70c:	2a73      	cmp	r2, #115	; 0x73
 800c70e:	d009      	beq.n	800c724 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 800c710:	2a7a      	cmp	r2, #122	; 0x7a
 800c712:	d012      	beq.n	800c73a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800c714:	2a25      	cmp	r2, #37	; 0x25
 800c716:	d100      	bne.n	800c71a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800c718:	3501      	adds	r5, #1
 800c71a:	782a      	ldrb	r2, [r5, #0]
 800c71c:	7022      	strb	r2, [r4, #0]
 800c71e:	3501      	adds	r5, #1
 800c720:	3401      	adds	r4, #1
 800c722:	e7ec      	b.n	800c6fe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800c724:	1d19      	adds	r1, r3, #4
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	3b01      	subs	r3, #1
 800c72a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c72e:	b1a2      	cbz	r2, 800c75a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 800c730:	42bc      	cmp	r4, r7
 800c732:	d015      	beq.n	800c760 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800c734:	f804 2b01 	strb.w	r2, [r4], #1
 800c738:	e7f7      	b.n	800c72a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800c73a:	78aa      	ldrb	r2, [r5, #2]
 800c73c:	2a75      	cmp	r2, #117	; 0x75
 800c73e:	d1ec      	bne.n	800c71a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	1b39      	subs	r1, r7, r4
 800c744:	4620      	mov	r0, r4
 800c746:	f103 0804 	add.w	r8, r3, #4
 800c74a:	f7ff ffa9 	bl	800c6a0 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800c74e:	2800      	cmp	r0, #0
 800c750:	dd06      	ble.n	800c760 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800c752:	4404      	add	r4, r0
 800c754:	3503      	adds	r5, #3
 800c756:	4643      	mov	r3, r8
 800c758:	e7d1      	b.n	800c6fe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800c75a:	3502      	adds	r5, #2
 800c75c:	460b      	mov	r3, r1
 800c75e:	e7ce      	b.n	800c6fe <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800c760:	4621      	mov	r1, r4
 800c762:	4630      	mov	r0, r6
 800c764:	f7ff ff76 	bl	800c654 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800c768:	7022      	strb	r2, [r4, #0]
 800c76a:	1ba0      	subs	r0, r4, r6
 800c76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c770 <sin>:
 800c770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c772:	ec51 0b10 	vmov	r0, r1, d0
 800c776:	4a20      	ldr	r2, [pc, #128]	; (800c7f8 <sin+0x88>)
 800c778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c77c:	4293      	cmp	r3, r2
 800c77e:	dc07      	bgt.n	800c790 <sin+0x20>
 800c780:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c7f0 <sin+0x80>
 800c784:	2000      	movs	r0, #0
 800c786:	f000 fe37 	bl	800d3f8 <__kernel_sin>
 800c78a:	ec51 0b10 	vmov	r0, r1, d0
 800c78e:	e007      	b.n	800c7a0 <sin+0x30>
 800c790:	4a1a      	ldr	r2, [pc, #104]	; (800c7fc <sin+0x8c>)
 800c792:	4293      	cmp	r3, r2
 800c794:	dd09      	ble.n	800c7aa <sin+0x3a>
 800c796:	ee10 2a10 	vmov	r2, s0
 800c79a:	460b      	mov	r3, r1
 800c79c:	f7f3 fd20 	bl	80001e0 <__aeabi_dsub>
 800c7a0:	ec41 0b10 	vmov	d0, r0, r1
 800c7a4:	b005      	add	sp, #20
 800c7a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7aa:	4668      	mov	r0, sp
 800c7ac:	f000 f828 	bl	800c800 <__ieee754_rem_pio2>
 800c7b0:	f000 0003 	and.w	r0, r0, #3
 800c7b4:	2801      	cmp	r0, #1
 800c7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7ba:	ed9d 0b00 	vldr	d0, [sp]
 800c7be:	d004      	beq.n	800c7ca <sin+0x5a>
 800c7c0:	2802      	cmp	r0, #2
 800c7c2:	d005      	beq.n	800c7d0 <sin+0x60>
 800c7c4:	b970      	cbnz	r0, 800c7e4 <sin+0x74>
 800c7c6:	2001      	movs	r0, #1
 800c7c8:	e7dd      	b.n	800c786 <sin+0x16>
 800c7ca:	f000 fa0d 	bl	800cbe8 <__kernel_cos>
 800c7ce:	e7dc      	b.n	800c78a <sin+0x1a>
 800c7d0:	2001      	movs	r0, #1
 800c7d2:	f000 fe11 	bl	800d3f8 <__kernel_sin>
 800c7d6:	ec53 2b10 	vmov	r2, r3, d0
 800c7da:	ee10 0a10 	vmov	r0, s0
 800c7de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7e2:	e7dd      	b.n	800c7a0 <sin+0x30>
 800c7e4:	f000 fa00 	bl	800cbe8 <__kernel_cos>
 800c7e8:	e7f5      	b.n	800c7d6 <sin+0x66>
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w
	...
 800c7f8:	3fe921fb 	.word	0x3fe921fb
 800c7fc:	7fefffff 	.word	0x7fefffff

0800c800 <__ieee754_rem_pio2>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	ec57 6b10 	vmov	r6, r7, d0
 800c808:	4bc3      	ldr	r3, [pc, #780]	; (800cb18 <__ieee754_rem_pio2+0x318>)
 800c80a:	b08d      	sub	sp, #52	; 0x34
 800c80c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c810:	4598      	cmp	r8, r3
 800c812:	4604      	mov	r4, r0
 800c814:	9704      	str	r7, [sp, #16]
 800c816:	dc07      	bgt.n	800c828 <__ieee754_rem_pio2+0x28>
 800c818:	2200      	movs	r2, #0
 800c81a:	2300      	movs	r3, #0
 800c81c:	ed84 0b00 	vstr	d0, [r4]
 800c820:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c824:	2500      	movs	r5, #0
 800c826:	e027      	b.n	800c878 <__ieee754_rem_pio2+0x78>
 800c828:	4bbc      	ldr	r3, [pc, #752]	; (800cb1c <__ieee754_rem_pio2+0x31c>)
 800c82a:	4598      	cmp	r8, r3
 800c82c:	dc75      	bgt.n	800c91a <__ieee754_rem_pio2+0x11a>
 800c82e:	9b04      	ldr	r3, [sp, #16]
 800c830:	4dbb      	ldr	r5, [pc, #748]	; (800cb20 <__ieee754_rem_pio2+0x320>)
 800c832:	2b00      	cmp	r3, #0
 800c834:	ee10 0a10 	vmov	r0, s0
 800c838:	a3a9      	add	r3, pc, #676	; (adr r3, 800cae0 <__ieee754_rem_pio2+0x2e0>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	4639      	mov	r1, r7
 800c840:	dd36      	ble.n	800c8b0 <__ieee754_rem_pio2+0xb0>
 800c842:	f7f3 fccd 	bl	80001e0 <__aeabi_dsub>
 800c846:	45a8      	cmp	r8, r5
 800c848:	4606      	mov	r6, r0
 800c84a:	460f      	mov	r7, r1
 800c84c:	d018      	beq.n	800c880 <__ieee754_rem_pio2+0x80>
 800c84e:	a3a6      	add	r3, pc, #664	; (adr r3, 800cae8 <__ieee754_rem_pio2+0x2e8>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fcc4 	bl	80001e0 <__aeabi_dsub>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	e9c4 2300 	strd	r2, r3, [r4]
 800c860:	4630      	mov	r0, r6
 800c862:	4639      	mov	r1, r7
 800c864:	f7f3 fcbc 	bl	80001e0 <__aeabi_dsub>
 800c868:	a39f      	add	r3, pc, #636	; (adr r3, 800cae8 <__ieee754_rem_pio2+0x2e8>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f3 fcb7 	bl	80001e0 <__aeabi_dsub>
 800c872:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c876:	2501      	movs	r5, #1
 800c878:	4628      	mov	r0, r5
 800c87a:	b00d      	add	sp, #52	; 0x34
 800c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c880:	a39b      	add	r3, pc, #620	; (adr r3, 800caf0 <__ieee754_rem_pio2+0x2f0>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fcab 	bl	80001e0 <__aeabi_dsub>
 800c88a:	a39b      	add	r3, pc, #620	; (adr r3, 800caf8 <__ieee754_rem_pio2+0x2f8>)
 800c88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c890:	4606      	mov	r6, r0
 800c892:	460f      	mov	r7, r1
 800c894:	f7f3 fca4 	bl	80001e0 <__aeabi_dsub>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	e9c4 2300 	strd	r2, r3, [r4]
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fc9c 	bl	80001e0 <__aeabi_dsub>
 800c8a8:	a393      	add	r3, pc, #588	; (adr r3, 800caf8 <__ieee754_rem_pio2+0x2f8>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	e7de      	b.n	800c86e <__ieee754_rem_pio2+0x6e>
 800c8b0:	f7f3 fc98 	bl	80001e4 <__adddf3>
 800c8b4:	45a8      	cmp	r8, r5
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460f      	mov	r7, r1
 800c8ba:	d016      	beq.n	800c8ea <__ieee754_rem_pio2+0xea>
 800c8bc:	a38a      	add	r3, pc, #552	; (adr r3, 800cae8 <__ieee754_rem_pio2+0x2e8>)
 800c8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c2:	f7f3 fc8f 	bl	80001e4 <__adddf3>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	e9c4 2300 	strd	r2, r3, [r4]
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f3 fc85 	bl	80001e0 <__aeabi_dsub>
 800c8d6:	a384      	add	r3, pc, #528	; (adr r3, 800cae8 <__ieee754_rem_pio2+0x2e8>)
 800c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8dc:	f7f3 fc82 	bl	80001e4 <__adddf3>
 800c8e0:	f04f 35ff 	mov.w	r5, #4294967295
 800c8e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8e8:	e7c6      	b.n	800c878 <__ieee754_rem_pio2+0x78>
 800c8ea:	a381      	add	r3, pc, #516	; (adr r3, 800caf0 <__ieee754_rem_pio2+0x2f0>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 fc78 	bl	80001e4 <__adddf3>
 800c8f4:	a380      	add	r3, pc, #512	; (adr r3, 800caf8 <__ieee754_rem_pio2+0x2f8>)
 800c8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	f7f3 fc71 	bl	80001e4 <__adddf3>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	e9c4 2300 	strd	r2, r3, [r4]
 800c90a:	4630      	mov	r0, r6
 800c90c:	4639      	mov	r1, r7
 800c90e:	f7f3 fc67 	bl	80001e0 <__aeabi_dsub>
 800c912:	a379      	add	r3, pc, #484	; (adr r3, 800caf8 <__ieee754_rem_pio2+0x2f8>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	e7e0      	b.n	800c8dc <__ieee754_rem_pio2+0xdc>
 800c91a:	4b82      	ldr	r3, [pc, #520]	; (800cb24 <__ieee754_rem_pio2+0x324>)
 800c91c:	4598      	cmp	r8, r3
 800c91e:	f300 80d0 	bgt.w	800cac2 <__ieee754_rem_pio2+0x2c2>
 800c922:	f000 fe23 	bl	800d56c <fabs>
 800c926:	ec57 6b10 	vmov	r6, r7, d0
 800c92a:	ee10 0a10 	vmov	r0, s0
 800c92e:	a374      	add	r3, pc, #464	; (adr r3, 800cb00 <__ieee754_rem_pio2+0x300>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fe0b 	bl	8000550 <__aeabi_dmul>
 800c93a:	2200      	movs	r2, #0
 800c93c:	4b7a      	ldr	r3, [pc, #488]	; (800cb28 <__ieee754_rem_pio2+0x328>)
 800c93e:	f7f3 fc51 	bl	80001e4 <__adddf3>
 800c942:	f7f4 f89f 	bl	8000a84 <__aeabi_d2iz>
 800c946:	4605      	mov	r5, r0
 800c948:	f7f3 fd98 	bl	800047c <__aeabi_i2d>
 800c94c:	a364      	add	r3, pc, #400	; (adr r3, 800cae0 <__ieee754_rem_pio2+0x2e0>)
 800c94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c956:	f7f3 fdfb 	bl	8000550 <__aeabi_dmul>
 800c95a:	4602      	mov	r2, r0
 800c95c:	460b      	mov	r3, r1
 800c95e:	4630      	mov	r0, r6
 800c960:	4639      	mov	r1, r7
 800c962:	f7f3 fc3d 	bl	80001e0 <__aeabi_dsub>
 800c966:	a360      	add	r3, pc, #384	; (adr r3, 800cae8 <__ieee754_rem_pio2+0x2e8>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	4682      	mov	sl, r0
 800c96e:	468b      	mov	fp, r1
 800c970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c974:	f7f3 fdec 	bl	8000550 <__aeabi_dmul>
 800c978:	2d1f      	cmp	r5, #31
 800c97a:	4606      	mov	r6, r0
 800c97c:	460f      	mov	r7, r1
 800c97e:	dc0c      	bgt.n	800c99a <__ieee754_rem_pio2+0x19a>
 800c980:	1e6a      	subs	r2, r5, #1
 800c982:	4b6a      	ldr	r3, [pc, #424]	; (800cb2c <__ieee754_rem_pio2+0x32c>)
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	4543      	cmp	r3, r8
 800c98a:	d006      	beq.n	800c99a <__ieee754_rem_pio2+0x19a>
 800c98c:	4632      	mov	r2, r6
 800c98e:	463b      	mov	r3, r7
 800c990:	4650      	mov	r0, sl
 800c992:	4659      	mov	r1, fp
 800c994:	f7f3 fc24 	bl	80001e0 <__aeabi_dsub>
 800c998:	e00e      	b.n	800c9b8 <__ieee754_rem_pio2+0x1b8>
 800c99a:	4632      	mov	r2, r6
 800c99c:	463b      	mov	r3, r7
 800c99e:	4650      	mov	r0, sl
 800c9a0:	4659      	mov	r1, fp
 800c9a2:	f7f3 fc1d 	bl	80001e0 <__aeabi_dsub>
 800c9a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c9aa:	9305      	str	r3, [sp, #20]
 800c9ac:	9a05      	ldr	r2, [sp, #20]
 800c9ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	2b10      	cmp	r3, #16
 800c9b6:	dc02      	bgt.n	800c9be <__ieee754_rem_pio2+0x1be>
 800c9b8:	e9c4 0100 	strd	r0, r1, [r4]
 800c9bc:	e039      	b.n	800ca32 <__ieee754_rem_pio2+0x232>
 800c9be:	a34c      	add	r3, pc, #304	; (adr r3, 800caf0 <__ieee754_rem_pio2+0x2f0>)
 800c9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c8:	f7f3 fdc2 	bl	8000550 <__aeabi_dmul>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	f7f3 fc02 	bl	80001e0 <__aeabi_dsub>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4680      	mov	r8, r0
 800c9e2:	4689      	mov	r9, r1
 800c9e4:	4650      	mov	r0, sl
 800c9e6:	4659      	mov	r1, fp
 800c9e8:	f7f3 fbfa 	bl	80001e0 <__aeabi_dsub>
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	463b      	mov	r3, r7
 800c9f0:	f7f3 fbf6 	bl	80001e0 <__aeabi_dsub>
 800c9f4:	a340      	add	r3, pc, #256	; (adr r3, 800caf8 <__ieee754_rem_pio2+0x2f8>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca02:	f7f3 fda5 	bl	8000550 <__aeabi_dmul>
 800ca06:	4632      	mov	r2, r6
 800ca08:	463b      	mov	r3, r7
 800ca0a:	f7f3 fbe9 	bl	80001e0 <__aeabi_dsub>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	460b      	mov	r3, r1
 800ca12:	4606      	mov	r6, r0
 800ca14:	460f      	mov	r7, r1
 800ca16:	4640      	mov	r0, r8
 800ca18:	4649      	mov	r1, r9
 800ca1a:	f7f3 fbe1 	bl	80001e0 <__aeabi_dsub>
 800ca1e:	9a05      	ldr	r2, [sp, #20]
 800ca20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca24:	1ad3      	subs	r3, r2, r3
 800ca26:	2b31      	cmp	r3, #49	; 0x31
 800ca28:	dc20      	bgt.n	800ca6c <__ieee754_rem_pio2+0x26c>
 800ca2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ca2e:	46c2      	mov	sl, r8
 800ca30:	46cb      	mov	fp, r9
 800ca32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca36:	4650      	mov	r0, sl
 800ca38:	4642      	mov	r2, r8
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	4659      	mov	r1, fp
 800ca3e:	f7f3 fbcf 	bl	80001e0 <__aeabi_dsub>
 800ca42:	463b      	mov	r3, r7
 800ca44:	4632      	mov	r2, r6
 800ca46:	f7f3 fbcb 	bl	80001e0 <__aeabi_dsub>
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca52:	f6bf af11 	bge.w	800c878 <__ieee754_rem_pio2+0x78>
 800ca56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ca5a:	6063      	str	r3, [r4, #4]
 800ca5c:	f8c4 8000 	str.w	r8, [r4]
 800ca60:	60a0      	str	r0, [r4, #8]
 800ca62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca66:	60e3      	str	r3, [r4, #12]
 800ca68:	426d      	negs	r5, r5
 800ca6a:	e705      	b.n	800c878 <__ieee754_rem_pio2+0x78>
 800ca6c:	a326      	add	r3, pc, #152	; (adr r3, 800cb08 <__ieee754_rem_pio2+0x308>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca76:	f7f3 fd6b 	bl	8000550 <__aeabi_dmul>
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	460f      	mov	r7, r1
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4640      	mov	r0, r8
 800ca84:	4649      	mov	r1, r9
 800ca86:	f7f3 fbab 	bl	80001e0 <__aeabi_dsub>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4682      	mov	sl, r0
 800ca90:	468b      	mov	fp, r1
 800ca92:	4640      	mov	r0, r8
 800ca94:	4649      	mov	r1, r9
 800ca96:	f7f3 fba3 	bl	80001e0 <__aeabi_dsub>
 800ca9a:	4632      	mov	r2, r6
 800ca9c:	463b      	mov	r3, r7
 800ca9e:	f7f3 fb9f 	bl	80001e0 <__aeabi_dsub>
 800caa2:	a31b      	add	r3, pc, #108	; (adr r3, 800cb10 <__ieee754_rem_pio2+0x310>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab0:	f7f3 fd4e 	bl	8000550 <__aeabi_dmul>
 800cab4:	4632      	mov	r2, r6
 800cab6:	463b      	mov	r3, r7
 800cab8:	f7f3 fb92 	bl	80001e0 <__aeabi_dsub>
 800cabc:	4606      	mov	r6, r0
 800cabe:	460f      	mov	r7, r1
 800cac0:	e764      	b.n	800c98c <__ieee754_rem_pio2+0x18c>
 800cac2:	4b1b      	ldr	r3, [pc, #108]	; (800cb30 <__ieee754_rem_pio2+0x330>)
 800cac4:	4598      	cmp	r8, r3
 800cac6:	dd35      	ble.n	800cb34 <__ieee754_rem_pio2+0x334>
 800cac8:	ee10 2a10 	vmov	r2, s0
 800cacc:	463b      	mov	r3, r7
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 fb85 	bl	80001e0 <__aeabi_dsub>
 800cad6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cada:	e9c4 0100 	strd	r0, r1, [r4]
 800cade:	e6a1      	b.n	800c824 <__ieee754_rem_pio2+0x24>
 800cae0:	54400000 	.word	0x54400000
 800cae4:	3ff921fb 	.word	0x3ff921fb
 800cae8:	1a626331 	.word	0x1a626331
 800caec:	3dd0b461 	.word	0x3dd0b461
 800caf0:	1a600000 	.word	0x1a600000
 800caf4:	3dd0b461 	.word	0x3dd0b461
 800caf8:	2e037073 	.word	0x2e037073
 800cafc:	3ba3198a 	.word	0x3ba3198a
 800cb00:	6dc9c883 	.word	0x6dc9c883
 800cb04:	3fe45f30 	.word	0x3fe45f30
 800cb08:	2e000000 	.word	0x2e000000
 800cb0c:	3ba3198a 	.word	0x3ba3198a
 800cb10:	252049c1 	.word	0x252049c1
 800cb14:	397b839a 	.word	0x397b839a
 800cb18:	3fe921fb 	.word	0x3fe921fb
 800cb1c:	4002d97b 	.word	0x4002d97b
 800cb20:	3ff921fb 	.word	0x3ff921fb
 800cb24:	413921fb 	.word	0x413921fb
 800cb28:	3fe00000 	.word	0x3fe00000
 800cb2c:	0800dc1c 	.word	0x0800dc1c
 800cb30:	7fefffff 	.word	0x7fefffff
 800cb34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cb38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800cb3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cb40:	4630      	mov	r0, r6
 800cb42:	460f      	mov	r7, r1
 800cb44:	f7f3 ff9e 	bl	8000a84 <__aeabi_d2iz>
 800cb48:	f7f3 fc98 	bl	800047c <__aeabi_i2d>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	4630      	mov	r0, r6
 800cb52:	4639      	mov	r1, r7
 800cb54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb58:	f7f3 fb42 	bl	80001e0 <__aeabi_dsub>
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	4b1f      	ldr	r3, [pc, #124]	; (800cbdc <__ieee754_rem_pio2+0x3dc>)
 800cb60:	f7f3 fcf6 	bl	8000550 <__aeabi_dmul>
 800cb64:	460f      	mov	r7, r1
 800cb66:	4606      	mov	r6, r0
 800cb68:	f7f3 ff8c 	bl	8000a84 <__aeabi_d2iz>
 800cb6c:	f7f3 fc86 	bl	800047c <__aeabi_i2d>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4630      	mov	r0, r6
 800cb76:	4639      	mov	r1, r7
 800cb78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cb7c:	f7f3 fb30 	bl	80001e0 <__aeabi_dsub>
 800cb80:	2200      	movs	r2, #0
 800cb82:	4b16      	ldr	r3, [pc, #88]	; (800cbdc <__ieee754_rem_pio2+0x3dc>)
 800cb84:	f7f3 fce4 	bl	8000550 <__aeabi_dmul>
 800cb88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cb8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800cb90:	f04f 0803 	mov.w	r8, #3
 800cb94:	2600      	movs	r6, #0
 800cb96:	2700      	movs	r7, #0
 800cb98:	4632      	mov	r2, r6
 800cb9a:	463b      	mov	r3, r7
 800cb9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cba0:	f108 3aff 	add.w	sl, r8, #4294967295
 800cba4:	f7f3 ff3c 	bl	8000a20 <__aeabi_dcmpeq>
 800cba8:	b9b0      	cbnz	r0, 800cbd8 <__ieee754_rem_pio2+0x3d8>
 800cbaa:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <__ieee754_rem_pio2+0x3e0>)
 800cbac:	9301      	str	r3, [sp, #4]
 800cbae:	2302      	movs	r3, #2
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	4643      	mov	r3, r8
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	a806      	add	r0, sp, #24
 800cbba:	f000 f8dd 	bl	800cd78 <__kernel_rem_pio2>
 800cbbe:	9b04      	ldr	r3, [sp, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	f6bf ae58 	bge.w	800c878 <__ieee754_rem_pio2+0x78>
 800cbc8:	6863      	ldr	r3, [r4, #4]
 800cbca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbce:	6063      	str	r3, [r4, #4]
 800cbd0:	68e3      	ldr	r3, [r4, #12]
 800cbd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cbd6:	e746      	b.n	800ca66 <__ieee754_rem_pio2+0x266>
 800cbd8:	46d0      	mov	r8, sl
 800cbda:	e7dd      	b.n	800cb98 <__ieee754_rem_pio2+0x398>
 800cbdc:	41700000 	.word	0x41700000
 800cbe0:	0800dc9c 	.word	0x0800dc9c
 800cbe4:	00000000 	.word	0x00000000

0800cbe8 <__kernel_cos>:
 800cbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	ec59 8b10 	vmov	r8, r9, d0
 800cbf0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800cbf4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cbf8:	ed2d 8b02 	vpush	{d8}
 800cbfc:	eeb0 8a41 	vmov.f32	s16, s2
 800cc00:	eef0 8a61 	vmov.f32	s17, s3
 800cc04:	da07      	bge.n	800cc16 <__kernel_cos+0x2e>
 800cc06:	ee10 0a10 	vmov	r0, s0
 800cc0a:	4649      	mov	r1, r9
 800cc0c:	f7f3 ff3a 	bl	8000a84 <__aeabi_d2iz>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	f000 8089 	beq.w	800cd28 <__kernel_cos+0x140>
 800cc16:	4642      	mov	r2, r8
 800cc18:	464b      	mov	r3, r9
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	f7f3 fc97 	bl	8000550 <__aeabi_dmul>
 800cc22:	2200      	movs	r2, #0
 800cc24:	4b4e      	ldr	r3, [pc, #312]	; (800cd60 <__kernel_cos+0x178>)
 800cc26:	4604      	mov	r4, r0
 800cc28:	460d      	mov	r5, r1
 800cc2a:	f7f3 fc91 	bl	8000550 <__aeabi_dmul>
 800cc2e:	a340      	add	r3, pc, #256	; (adr r3, 800cd30 <__kernel_cos+0x148>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	4682      	mov	sl, r0
 800cc36:	468b      	mov	fp, r1
 800cc38:	4620      	mov	r0, r4
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7f3 fc88 	bl	8000550 <__aeabi_dmul>
 800cc40:	a33d      	add	r3, pc, #244	; (adr r3, 800cd38 <__kernel_cos+0x150>)
 800cc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc46:	f7f3 facd 	bl	80001e4 <__adddf3>
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	f7f3 fc7f 	bl	8000550 <__aeabi_dmul>
 800cc52:	a33b      	add	r3, pc, #236	; (adr r3, 800cd40 <__kernel_cos+0x158>)
 800cc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc58:	f7f3 fac2 	bl	80001e0 <__aeabi_dsub>
 800cc5c:	4622      	mov	r2, r4
 800cc5e:	462b      	mov	r3, r5
 800cc60:	f7f3 fc76 	bl	8000550 <__aeabi_dmul>
 800cc64:	a338      	add	r3, pc, #224	; (adr r3, 800cd48 <__kernel_cos+0x160>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f7f3 fabb 	bl	80001e4 <__adddf3>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	462b      	mov	r3, r5
 800cc72:	f7f3 fc6d 	bl	8000550 <__aeabi_dmul>
 800cc76:	a336      	add	r3, pc, #216	; (adr r3, 800cd50 <__kernel_cos+0x168>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f7f3 fab0 	bl	80001e0 <__aeabi_dsub>
 800cc80:	4622      	mov	r2, r4
 800cc82:	462b      	mov	r3, r5
 800cc84:	f7f3 fc64 	bl	8000550 <__aeabi_dmul>
 800cc88:	a333      	add	r3, pc, #204	; (adr r3, 800cd58 <__kernel_cos+0x170>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 faa9 	bl	80001e4 <__adddf3>
 800cc92:	4622      	mov	r2, r4
 800cc94:	462b      	mov	r3, r5
 800cc96:	f7f3 fc5b 	bl	8000550 <__aeabi_dmul>
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	f7f3 fc57 	bl	8000550 <__aeabi_dmul>
 800cca2:	ec53 2b18 	vmov	r2, r3, d8
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4649      	mov	r1, r9
 800ccae:	f7f3 fc4f 	bl	8000550 <__aeabi_dmul>
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	4629      	mov	r1, r5
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f7f3 fa91 	bl	80001e0 <__aeabi_dsub>
 800ccbe:	4b29      	ldr	r3, [pc, #164]	; (800cd64 <__kernel_cos+0x17c>)
 800ccc0:	429e      	cmp	r6, r3
 800ccc2:	4680      	mov	r8, r0
 800ccc4:	4689      	mov	r9, r1
 800ccc6:	dc11      	bgt.n	800ccec <__kernel_cos+0x104>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4650      	mov	r0, sl
 800ccce:	4659      	mov	r1, fp
 800ccd0:	f7f3 fa86 	bl	80001e0 <__aeabi_dsub>
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4924      	ldr	r1, [pc, #144]	; (800cd68 <__kernel_cos+0x180>)
 800ccd8:	4602      	mov	r2, r0
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f7f3 fa80 	bl	80001e0 <__aeabi_dsub>
 800cce0:	ecbd 8b02 	vpop	{d8}
 800cce4:	ec41 0b10 	vmov	d0, r0, r1
 800cce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	4b1f      	ldr	r3, [pc, #124]	; (800cd6c <__kernel_cos+0x184>)
 800ccee:	491e      	ldr	r1, [pc, #120]	; (800cd68 <__kernel_cos+0x180>)
 800ccf0:	429e      	cmp	r6, r3
 800ccf2:	bfcc      	ite	gt
 800ccf4:	4d1e      	ldrgt	r5, [pc, #120]	; (800cd70 <__kernel_cos+0x188>)
 800ccf6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ccfa:	2400      	movs	r4, #0
 800ccfc:	4622      	mov	r2, r4
 800ccfe:	462b      	mov	r3, r5
 800cd00:	2000      	movs	r0, #0
 800cd02:	f7f3 fa6d 	bl	80001e0 <__aeabi_dsub>
 800cd06:	4622      	mov	r2, r4
 800cd08:	4606      	mov	r6, r0
 800cd0a:	460f      	mov	r7, r1
 800cd0c:	462b      	mov	r3, r5
 800cd0e:	4650      	mov	r0, sl
 800cd10:	4659      	mov	r1, fp
 800cd12:	f7f3 fa65 	bl	80001e0 <__aeabi_dsub>
 800cd16:	4642      	mov	r2, r8
 800cd18:	464b      	mov	r3, r9
 800cd1a:	f7f3 fa61 	bl	80001e0 <__aeabi_dsub>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	460b      	mov	r3, r1
 800cd22:	4630      	mov	r0, r6
 800cd24:	4639      	mov	r1, r7
 800cd26:	e7d9      	b.n	800ccdc <__kernel_cos+0xf4>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	490f      	ldr	r1, [pc, #60]	; (800cd68 <__kernel_cos+0x180>)
 800cd2c:	e7d8      	b.n	800cce0 <__kernel_cos+0xf8>
 800cd2e:	bf00      	nop
 800cd30:	be8838d4 	.word	0xbe8838d4
 800cd34:	bda8fae9 	.word	0xbda8fae9
 800cd38:	bdb4b1c4 	.word	0xbdb4b1c4
 800cd3c:	3e21ee9e 	.word	0x3e21ee9e
 800cd40:	809c52ad 	.word	0x809c52ad
 800cd44:	3e927e4f 	.word	0x3e927e4f
 800cd48:	19cb1590 	.word	0x19cb1590
 800cd4c:	3efa01a0 	.word	0x3efa01a0
 800cd50:	16c15177 	.word	0x16c15177
 800cd54:	3f56c16c 	.word	0x3f56c16c
 800cd58:	5555554c 	.word	0x5555554c
 800cd5c:	3fa55555 	.word	0x3fa55555
 800cd60:	3fe00000 	.word	0x3fe00000
 800cd64:	3fd33332 	.word	0x3fd33332
 800cd68:	3ff00000 	.word	0x3ff00000
 800cd6c:	3fe90000 	.word	0x3fe90000
 800cd70:	3fd20000 	.word	0x3fd20000
 800cd74:	00000000 	.word	0x00000000

0800cd78 <__kernel_rem_pio2>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	ed2d 8b02 	vpush	{d8}
 800cd80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cd84:	1ed4      	subs	r4, r2, #3
 800cd86:	9308      	str	r3, [sp, #32]
 800cd88:	9101      	str	r1, [sp, #4]
 800cd8a:	4bc5      	ldr	r3, [pc, #788]	; (800d0a0 <__kernel_rem_pio2+0x328>)
 800cd8c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800cd8e:	9009      	str	r0, [sp, #36]	; 0x24
 800cd90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd94:	9304      	str	r3, [sp, #16]
 800cd96:	9b08      	ldr	r3, [sp, #32]
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	9307      	str	r3, [sp, #28]
 800cd9c:	2318      	movs	r3, #24
 800cd9e:	fb94 f4f3 	sdiv	r4, r4, r3
 800cda2:	f06f 0317 	mvn.w	r3, #23
 800cda6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800cdaa:	fb04 3303 	mla	r3, r4, r3, r3
 800cdae:	eb03 0a02 	add.w	sl, r3, r2
 800cdb2:	9b04      	ldr	r3, [sp, #16]
 800cdb4:	9a07      	ldr	r2, [sp, #28]
 800cdb6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d090 <__kernel_rem_pio2+0x318>
 800cdba:	eb03 0802 	add.w	r8, r3, r2
 800cdbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cdc0:	1aa7      	subs	r7, r4, r2
 800cdc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cdc6:	ae22      	add	r6, sp, #136	; 0x88
 800cdc8:	2500      	movs	r5, #0
 800cdca:	4545      	cmp	r5, r8
 800cdcc:	dd13      	ble.n	800cdf6 <__kernel_rem_pio2+0x7e>
 800cdce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800d090 <__kernel_rem_pio2+0x318>
 800cdd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cdd6:	2600      	movs	r6, #0
 800cdd8:	9b04      	ldr	r3, [sp, #16]
 800cdda:	429e      	cmp	r6, r3
 800cddc:	dc32      	bgt.n	800ce44 <__kernel_rem_pio2+0xcc>
 800cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde0:	9302      	str	r3, [sp, #8]
 800cde2:	9b08      	ldr	r3, [sp, #32]
 800cde4:	199d      	adds	r5, r3, r6
 800cde6:	ab22      	add	r3, sp, #136	; 0x88
 800cde8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cdec:	9306      	str	r3, [sp, #24]
 800cdee:	ec59 8b18 	vmov	r8, r9, d8
 800cdf2:	2700      	movs	r7, #0
 800cdf4:	e01f      	b.n	800ce36 <__kernel_rem_pio2+0xbe>
 800cdf6:	42ef      	cmn	r7, r5
 800cdf8:	d407      	bmi.n	800ce0a <__kernel_rem_pio2+0x92>
 800cdfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cdfe:	f7f3 fb3d 	bl	800047c <__aeabi_i2d>
 800ce02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ce06:	3501      	adds	r5, #1
 800ce08:	e7df      	b.n	800cdca <__kernel_rem_pio2+0x52>
 800ce0a:	ec51 0b18 	vmov	r0, r1, d8
 800ce0e:	e7f8      	b.n	800ce02 <__kernel_rem_pio2+0x8a>
 800ce10:	9906      	ldr	r1, [sp, #24]
 800ce12:	9d02      	ldr	r5, [sp, #8]
 800ce14:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ce18:	9106      	str	r1, [sp, #24]
 800ce1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ce1e:	9502      	str	r5, [sp, #8]
 800ce20:	f7f3 fb96 	bl	8000550 <__aeabi_dmul>
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	4640      	mov	r0, r8
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	f7f3 f9da 	bl	80001e4 <__adddf3>
 800ce30:	3701      	adds	r7, #1
 800ce32:	4680      	mov	r8, r0
 800ce34:	4689      	mov	r9, r1
 800ce36:	9b07      	ldr	r3, [sp, #28]
 800ce38:	429f      	cmp	r7, r3
 800ce3a:	dde9      	ble.n	800ce10 <__kernel_rem_pio2+0x98>
 800ce3c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800ce40:	3601      	adds	r6, #1
 800ce42:	e7c9      	b.n	800cdd8 <__kernel_rem_pio2+0x60>
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	aa0e      	add	r2, sp, #56	; 0x38
 800ce48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce4c:	930c      	str	r3, [sp, #48]	; 0x30
 800ce4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ce50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ce54:	9c04      	ldr	r4, [sp, #16]
 800ce56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce58:	ab9a      	add	r3, sp, #616	; 0x268
 800ce5a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ce5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce66:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ce6a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ce6e:	ab9a      	add	r3, sp, #616	; 0x268
 800ce70:	445b      	add	r3, fp
 800ce72:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ce76:	2500      	movs	r5, #0
 800ce78:	1b63      	subs	r3, r4, r5
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dc78      	bgt.n	800cf70 <__kernel_rem_pio2+0x1f8>
 800ce7e:	4650      	mov	r0, sl
 800ce80:	ec49 8b10 	vmov	d0, r8, r9
 800ce84:	f000 fc00 	bl	800d688 <scalbn>
 800ce88:	ec57 6b10 	vmov	r6, r7, d0
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ce92:	ee10 0a10 	vmov	r0, s0
 800ce96:	4639      	mov	r1, r7
 800ce98:	f7f3 fb5a 	bl	8000550 <__aeabi_dmul>
 800ce9c:	ec41 0b10 	vmov	d0, r0, r1
 800cea0:	f000 fb6e 	bl	800d580 <floor>
 800cea4:	2200      	movs	r2, #0
 800cea6:	ec51 0b10 	vmov	r0, r1, d0
 800ceaa:	4b7e      	ldr	r3, [pc, #504]	; (800d0a4 <__kernel_rem_pio2+0x32c>)
 800ceac:	f7f3 fb50 	bl	8000550 <__aeabi_dmul>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 f992 	bl	80001e0 <__aeabi_dsub>
 800cebc:	460f      	mov	r7, r1
 800cebe:	4606      	mov	r6, r0
 800cec0:	f7f3 fde0 	bl	8000a84 <__aeabi_d2iz>
 800cec4:	9006      	str	r0, [sp, #24]
 800cec6:	f7f3 fad9 	bl	800047c <__aeabi_i2d>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4630      	mov	r0, r6
 800ced0:	4639      	mov	r1, r7
 800ced2:	f7f3 f985 	bl	80001e0 <__aeabi_dsub>
 800ced6:	f1ba 0f00 	cmp.w	sl, #0
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	dd6c      	ble.n	800cfba <__kernel_rem_pio2+0x242>
 800cee0:	1e62      	subs	r2, r4, #1
 800cee2:	ab0e      	add	r3, sp, #56	; 0x38
 800cee4:	f1ca 0118 	rsb	r1, sl, #24
 800cee8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ceec:	9d06      	ldr	r5, [sp, #24]
 800ceee:	fa40 f301 	asr.w	r3, r0, r1
 800cef2:	441d      	add	r5, r3
 800cef4:	408b      	lsls	r3, r1
 800cef6:	1ac0      	subs	r0, r0, r3
 800cef8:	ab0e      	add	r3, sp, #56	; 0x38
 800cefa:	9506      	str	r5, [sp, #24]
 800cefc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cf00:	f1ca 0317 	rsb	r3, sl, #23
 800cf04:	fa40 f303 	asr.w	r3, r0, r3
 800cf08:	9302      	str	r3, [sp, #8]
 800cf0a:	9b02      	ldr	r3, [sp, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd62      	ble.n	800cfd6 <__kernel_rem_pio2+0x25e>
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	2200      	movs	r2, #0
 800cf14:	3301      	adds	r3, #1
 800cf16:	9306      	str	r3, [sp, #24]
 800cf18:	4615      	mov	r5, r2
 800cf1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cf1e:	4294      	cmp	r4, r2
 800cf20:	f300 8095 	bgt.w	800d04e <__kernel_rem_pio2+0x2d6>
 800cf24:	f1ba 0f00 	cmp.w	sl, #0
 800cf28:	dd07      	ble.n	800cf3a <__kernel_rem_pio2+0x1c2>
 800cf2a:	f1ba 0f01 	cmp.w	sl, #1
 800cf2e:	f000 80a2 	beq.w	800d076 <__kernel_rem_pio2+0x2fe>
 800cf32:	f1ba 0f02 	cmp.w	sl, #2
 800cf36:	f000 80c1 	beq.w	800d0bc <__kernel_rem_pio2+0x344>
 800cf3a:	9b02      	ldr	r3, [sp, #8]
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d14a      	bne.n	800cfd6 <__kernel_rem_pio2+0x25e>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	2000      	movs	r0, #0
 800cf46:	4958      	ldr	r1, [pc, #352]	; (800d0a8 <__kernel_rem_pio2+0x330>)
 800cf48:	f7f3 f94a 	bl	80001e0 <__aeabi_dsub>
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	460f      	mov	r7, r1
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	d040      	beq.n	800cfd6 <__kernel_rem_pio2+0x25e>
 800cf54:	4650      	mov	r0, sl
 800cf56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d098 <__kernel_rem_pio2+0x320>
 800cf5a:	f000 fb95 	bl	800d688 <scalbn>
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	ec53 2b10 	vmov	r2, r3, d0
 800cf66:	f7f3 f93b 	bl	80001e0 <__aeabi_dsub>
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	e032      	b.n	800cfd6 <__kernel_rem_pio2+0x25e>
 800cf70:	2200      	movs	r2, #0
 800cf72:	4b4e      	ldr	r3, [pc, #312]	; (800d0ac <__kernel_rem_pio2+0x334>)
 800cf74:	4640      	mov	r0, r8
 800cf76:	4649      	mov	r1, r9
 800cf78:	f7f3 faea 	bl	8000550 <__aeabi_dmul>
 800cf7c:	f7f3 fd82 	bl	8000a84 <__aeabi_d2iz>
 800cf80:	f7f3 fa7c 	bl	800047c <__aeabi_i2d>
 800cf84:	2200      	movs	r2, #0
 800cf86:	4b4a      	ldr	r3, [pc, #296]	; (800d0b0 <__kernel_rem_pio2+0x338>)
 800cf88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf8c:	f7f3 fae0 	bl	8000550 <__aeabi_dmul>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	4640      	mov	r0, r8
 800cf96:	4649      	mov	r1, r9
 800cf98:	f7f3 f922 	bl	80001e0 <__aeabi_dsub>
 800cf9c:	f7f3 fd72 	bl	8000a84 <__aeabi_d2iz>
 800cfa0:	ab0e      	add	r3, sp, #56	; 0x38
 800cfa2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800cfa6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfae:	f7f3 f919 	bl	80001e4 <__adddf3>
 800cfb2:	3501      	adds	r5, #1
 800cfb4:	4680      	mov	r8, r0
 800cfb6:	4689      	mov	r9, r1
 800cfb8:	e75e      	b.n	800ce78 <__kernel_rem_pio2+0x100>
 800cfba:	d105      	bne.n	800cfc8 <__kernel_rem_pio2+0x250>
 800cfbc:	1e63      	subs	r3, r4, #1
 800cfbe:	aa0e      	add	r2, sp, #56	; 0x38
 800cfc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cfc4:	15c3      	asrs	r3, r0, #23
 800cfc6:	e79f      	b.n	800cf08 <__kernel_rem_pio2+0x190>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	4b3a      	ldr	r3, [pc, #232]	; (800d0b4 <__kernel_rem_pio2+0x33c>)
 800cfcc:	f7f3 fd46 	bl	8000a5c <__aeabi_dcmpge>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d139      	bne.n	800d048 <__kernel_rem_pio2+0x2d0>
 800cfd4:	9002      	str	r0, [sp, #8]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4630      	mov	r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	f7f3 fd1f 	bl	8000a20 <__aeabi_dcmpeq>
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	f000 80c7 	beq.w	800d176 <__kernel_rem_pio2+0x3fe>
 800cfe8:	1e65      	subs	r5, r4, #1
 800cfea:	462b      	mov	r3, r5
 800cfec:	2200      	movs	r2, #0
 800cfee:	9904      	ldr	r1, [sp, #16]
 800cff0:	428b      	cmp	r3, r1
 800cff2:	da6a      	bge.n	800d0ca <__kernel_rem_pio2+0x352>
 800cff4:	2a00      	cmp	r2, #0
 800cff6:	f000 8088 	beq.w	800d10a <__kernel_rem_pio2+0x392>
 800cffa:	ab0e      	add	r3, sp, #56	; 0x38
 800cffc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d000:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 80b4 	beq.w	800d172 <__kernel_rem_pio2+0x3fa>
 800d00a:	4650      	mov	r0, sl
 800d00c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800d098 <__kernel_rem_pio2+0x320>
 800d010:	f000 fb3a 	bl	800d688 <scalbn>
 800d014:	00ec      	lsls	r4, r5, #3
 800d016:	ab72      	add	r3, sp, #456	; 0x1c8
 800d018:	191e      	adds	r6, r3, r4
 800d01a:	ec59 8b10 	vmov	r8, r9, d0
 800d01e:	f106 0a08 	add.w	sl, r6, #8
 800d022:	462f      	mov	r7, r5
 800d024:	2f00      	cmp	r7, #0
 800d026:	f280 80df 	bge.w	800d1e8 <__kernel_rem_pio2+0x470>
 800d02a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800d090 <__kernel_rem_pio2+0x318>
 800d02e:	f04f 0a00 	mov.w	sl, #0
 800d032:	eba5 030a 	sub.w	r3, r5, sl
 800d036:	2b00      	cmp	r3, #0
 800d038:	f2c0 810a 	blt.w	800d250 <__kernel_rem_pio2+0x4d8>
 800d03c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d0b8 <__kernel_rem_pio2+0x340>
 800d040:	ec59 8b18 	vmov	r8, r9, d8
 800d044:	2700      	movs	r7, #0
 800d046:	e0f5      	b.n	800d234 <__kernel_rem_pio2+0x4bc>
 800d048:	2302      	movs	r3, #2
 800d04a:	9302      	str	r3, [sp, #8]
 800d04c:	e760      	b.n	800cf10 <__kernel_rem_pio2+0x198>
 800d04e:	ab0e      	add	r3, sp, #56	; 0x38
 800d050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d054:	b94d      	cbnz	r5, 800d06a <__kernel_rem_pio2+0x2f2>
 800d056:	b12b      	cbz	r3, 800d064 <__kernel_rem_pio2+0x2ec>
 800d058:	a80e      	add	r0, sp, #56	; 0x38
 800d05a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d05e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d062:	2301      	movs	r3, #1
 800d064:	3201      	adds	r2, #1
 800d066:	461d      	mov	r5, r3
 800d068:	e759      	b.n	800cf1e <__kernel_rem_pio2+0x1a6>
 800d06a:	a80e      	add	r0, sp, #56	; 0x38
 800d06c:	1acb      	subs	r3, r1, r3
 800d06e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d072:	462b      	mov	r3, r5
 800d074:	e7f6      	b.n	800d064 <__kernel_rem_pio2+0x2ec>
 800d076:	1e62      	subs	r2, r4, #1
 800d078:	ab0e      	add	r3, sp, #56	; 0x38
 800d07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d07e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d082:	a90e      	add	r1, sp, #56	; 0x38
 800d084:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d088:	e757      	b.n	800cf3a <__kernel_rem_pio2+0x1c2>
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w
	...
 800d09c:	3ff00000 	.word	0x3ff00000
 800d0a0:	0800dde8 	.word	0x0800dde8
 800d0a4:	40200000 	.word	0x40200000
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	3e700000 	.word	0x3e700000
 800d0b0:	41700000 	.word	0x41700000
 800d0b4:	3fe00000 	.word	0x3fe00000
 800d0b8:	0800dda8 	.word	0x0800dda8
 800d0bc:	1e62      	subs	r2, r4, #1
 800d0be:	ab0e      	add	r3, sp, #56	; 0x38
 800d0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d0c8:	e7db      	b.n	800d082 <__kernel_rem_pio2+0x30a>
 800d0ca:	a90e      	add	r1, sp, #56	; 0x38
 800d0cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	430a      	orrs	r2, r1
 800d0d4:	e78b      	b.n	800cfee <__kernel_rem_pio2+0x276>
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d0dc:	2900      	cmp	r1, #0
 800d0de:	d0fa      	beq.n	800d0d6 <__kernel_rem_pio2+0x35e>
 800d0e0:	9a08      	ldr	r2, [sp, #32]
 800d0e2:	4422      	add	r2, r4
 800d0e4:	00d2      	lsls	r2, r2, #3
 800d0e6:	a922      	add	r1, sp, #136	; 0x88
 800d0e8:	18e3      	adds	r3, r4, r3
 800d0ea:	9206      	str	r2, [sp, #24]
 800d0ec:	440a      	add	r2, r1
 800d0ee:	9302      	str	r3, [sp, #8]
 800d0f0:	f10b 0108 	add.w	r1, fp, #8
 800d0f4:	f102 0308 	add.w	r3, r2, #8
 800d0f8:	1c66      	adds	r6, r4, #1
 800d0fa:	910a      	str	r1, [sp, #40]	; 0x28
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	930d      	str	r3, [sp, #52]	; 0x34
 800d100:	9b02      	ldr	r3, [sp, #8]
 800d102:	42b3      	cmp	r3, r6
 800d104:	da04      	bge.n	800d110 <__kernel_rem_pio2+0x398>
 800d106:	461c      	mov	r4, r3
 800d108:	e6a6      	b.n	800ce58 <__kernel_rem_pio2+0xe0>
 800d10a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d10c:	2301      	movs	r3, #1
 800d10e:	e7e3      	b.n	800d0d8 <__kernel_rem_pio2+0x360>
 800d110:	9b06      	ldr	r3, [sp, #24]
 800d112:	18ef      	adds	r7, r5, r3
 800d114:	ab22      	add	r3, sp, #136	; 0x88
 800d116:	441f      	add	r7, r3
 800d118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d11a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d11e:	f7f3 f9ad 	bl	800047c <__aeabi_i2d>
 800d122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d124:	461c      	mov	r4, r3
 800d126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d128:	e9c7 0100 	strd	r0, r1, [r7]
 800d12c:	eb03 0b05 	add.w	fp, r3, r5
 800d130:	2700      	movs	r7, #0
 800d132:	f04f 0800 	mov.w	r8, #0
 800d136:	f04f 0900 	mov.w	r9, #0
 800d13a:	9b07      	ldr	r3, [sp, #28]
 800d13c:	429f      	cmp	r7, r3
 800d13e:	dd08      	ble.n	800d152 <__kernel_rem_pio2+0x3da>
 800d140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d142:	aa72      	add	r2, sp, #456	; 0x1c8
 800d144:	18eb      	adds	r3, r5, r3
 800d146:	4413      	add	r3, r2
 800d148:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800d14c:	3601      	adds	r6, #1
 800d14e:	3508      	adds	r5, #8
 800d150:	e7d6      	b.n	800d100 <__kernel_rem_pio2+0x388>
 800d152:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d156:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d15a:	f7f3 f9f9 	bl	8000550 <__aeabi_dmul>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	f7f3 f83d 	bl	80001e4 <__adddf3>
 800d16a:	3701      	adds	r7, #1
 800d16c:	4680      	mov	r8, r0
 800d16e:	4689      	mov	r9, r1
 800d170:	e7e3      	b.n	800d13a <__kernel_rem_pio2+0x3c2>
 800d172:	3d01      	subs	r5, #1
 800d174:	e741      	b.n	800cffa <__kernel_rem_pio2+0x282>
 800d176:	f1ca 0000 	rsb	r0, sl, #0
 800d17a:	ec47 6b10 	vmov	d0, r6, r7
 800d17e:	f000 fa83 	bl	800d688 <scalbn>
 800d182:	ec57 6b10 	vmov	r6, r7, d0
 800d186:	2200      	movs	r2, #0
 800d188:	4b99      	ldr	r3, [pc, #612]	; (800d3f0 <__kernel_rem_pio2+0x678>)
 800d18a:	ee10 0a10 	vmov	r0, s0
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 fc64 	bl	8000a5c <__aeabi_dcmpge>
 800d194:	b1f8      	cbz	r0, 800d1d6 <__kernel_rem_pio2+0x45e>
 800d196:	2200      	movs	r2, #0
 800d198:	4b96      	ldr	r3, [pc, #600]	; (800d3f4 <__kernel_rem_pio2+0x67c>)
 800d19a:	4630      	mov	r0, r6
 800d19c:	4639      	mov	r1, r7
 800d19e:	f7f3 f9d7 	bl	8000550 <__aeabi_dmul>
 800d1a2:	f7f3 fc6f 	bl	8000a84 <__aeabi_d2iz>
 800d1a6:	4680      	mov	r8, r0
 800d1a8:	f7f3 f968 	bl	800047c <__aeabi_i2d>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	4b90      	ldr	r3, [pc, #576]	; (800d3f0 <__kernel_rem_pio2+0x678>)
 800d1b0:	f7f3 f9ce 	bl	8000550 <__aeabi_dmul>
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	4639      	mov	r1, r7
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7f3 f810 	bl	80001e0 <__aeabi_dsub>
 800d1c0:	f7f3 fc60 	bl	8000a84 <__aeabi_d2iz>
 800d1c4:	1c65      	adds	r5, r4, #1
 800d1c6:	ab0e      	add	r3, sp, #56	; 0x38
 800d1c8:	f10a 0a18 	add.w	sl, sl, #24
 800d1cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d1d0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d1d4:	e719      	b.n	800d00a <__kernel_rem_pio2+0x292>
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4639      	mov	r1, r7
 800d1da:	f7f3 fc53 	bl	8000a84 <__aeabi_d2iz>
 800d1de:	ab0e      	add	r3, sp, #56	; 0x38
 800d1e0:	4625      	mov	r5, r4
 800d1e2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d1e6:	e710      	b.n	800d00a <__kernel_rem_pio2+0x292>
 800d1e8:	ab0e      	add	r3, sp, #56	; 0x38
 800d1ea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d1ee:	f7f3 f945 	bl	800047c <__aeabi_i2d>
 800d1f2:	4642      	mov	r2, r8
 800d1f4:	464b      	mov	r3, r9
 800d1f6:	f7f3 f9ab 	bl	8000550 <__aeabi_dmul>
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d200:	4b7c      	ldr	r3, [pc, #496]	; (800d3f4 <__kernel_rem_pio2+0x67c>)
 800d202:	4640      	mov	r0, r8
 800d204:	4649      	mov	r1, r9
 800d206:	f7f3 f9a3 	bl	8000550 <__aeabi_dmul>
 800d20a:	3f01      	subs	r7, #1
 800d20c:	4680      	mov	r8, r0
 800d20e:	4689      	mov	r9, r1
 800d210:	e708      	b.n	800d024 <__kernel_rem_pio2+0x2ac>
 800d212:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d21e:	f7f3 f997 	bl	8000550 <__aeabi_dmul>
 800d222:	4602      	mov	r2, r0
 800d224:	460b      	mov	r3, r1
 800d226:	4640      	mov	r0, r8
 800d228:	4649      	mov	r1, r9
 800d22a:	f7f2 ffdb 	bl	80001e4 <__adddf3>
 800d22e:	3701      	adds	r7, #1
 800d230:	4680      	mov	r8, r0
 800d232:	4689      	mov	r9, r1
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	429f      	cmp	r7, r3
 800d238:	dc01      	bgt.n	800d23e <__kernel_rem_pio2+0x4c6>
 800d23a:	45ba      	cmp	sl, r7
 800d23c:	dae9      	bge.n	800d212 <__kernel_rem_pio2+0x49a>
 800d23e:	ab4a      	add	r3, sp, #296	; 0x128
 800d240:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d244:	e9c3 8900 	strd	r8, r9, [r3]
 800d248:	f10a 0a01 	add.w	sl, sl, #1
 800d24c:	3e08      	subs	r6, #8
 800d24e:	e6f0      	b.n	800d032 <__kernel_rem_pio2+0x2ba>
 800d250:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d252:	2b03      	cmp	r3, #3
 800d254:	d85b      	bhi.n	800d30e <__kernel_rem_pio2+0x596>
 800d256:	e8df f003 	tbb	[pc, r3]
 800d25a:	264a      	.short	0x264a
 800d25c:	0226      	.short	0x0226
 800d25e:	ab9a      	add	r3, sp, #616	; 0x268
 800d260:	441c      	add	r4, r3
 800d262:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d266:	46a2      	mov	sl, r4
 800d268:	46ab      	mov	fp, r5
 800d26a:	f1bb 0f00 	cmp.w	fp, #0
 800d26e:	dc6c      	bgt.n	800d34a <__kernel_rem_pio2+0x5d2>
 800d270:	46a2      	mov	sl, r4
 800d272:	46ab      	mov	fp, r5
 800d274:	f1bb 0f01 	cmp.w	fp, #1
 800d278:	f300 8086 	bgt.w	800d388 <__kernel_rem_pio2+0x610>
 800d27c:	2000      	movs	r0, #0
 800d27e:	2100      	movs	r1, #0
 800d280:	2d01      	cmp	r5, #1
 800d282:	f300 80a0 	bgt.w	800d3c6 <__kernel_rem_pio2+0x64e>
 800d286:	9b02      	ldr	r3, [sp, #8]
 800d288:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d28c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 809e 	bne.w	800d3d2 <__kernel_rem_pio2+0x65a>
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	e9c3 7800 	strd	r7, r8, [r3]
 800d29c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d2a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d2a4:	e033      	b.n	800d30e <__kernel_rem_pio2+0x596>
 800d2a6:	3408      	adds	r4, #8
 800d2a8:	ab4a      	add	r3, sp, #296	; 0x128
 800d2aa:	441c      	add	r4, r3
 800d2ac:	462e      	mov	r6, r5
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	2e00      	cmp	r6, #0
 800d2b4:	da3a      	bge.n	800d32c <__kernel_rem_pio2+0x5b4>
 800d2b6:	9b02      	ldr	r3, [sp, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d03d      	beq.n	800d338 <__kernel_rem_pio2+0x5c0>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2c2:	9c01      	ldr	r4, [sp, #4]
 800d2c4:	e9c4 2300 	strd	r2, r3, [r4]
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d2d0:	f7f2 ff86 	bl	80001e0 <__aeabi_dsub>
 800d2d4:	ae4c      	add	r6, sp, #304	; 0x130
 800d2d6:	2401      	movs	r4, #1
 800d2d8:	42a5      	cmp	r5, r4
 800d2da:	da30      	bge.n	800d33e <__kernel_rem_pio2+0x5c6>
 800d2dc:	9b02      	ldr	r3, [sp, #8]
 800d2de:	b113      	cbz	r3, 800d2e6 <__kernel_rem_pio2+0x56e>
 800d2e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	9b01      	ldr	r3, [sp, #4]
 800d2e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d2ec:	e00f      	b.n	800d30e <__kernel_rem_pio2+0x596>
 800d2ee:	ab9a      	add	r3, sp, #616	; 0x268
 800d2f0:	441c      	add	r4, r3
 800d2f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	2d00      	cmp	r5, #0
 800d2fc:	da10      	bge.n	800d320 <__kernel_rem_pio2+0x5a8>
 800d2fe:	9b02      	ldr	r3, [sp, #8]
 800d300:	b113      	cbz	r3, 800d308 <__kernel_rem_pio2+0x590>
 800d302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d306:	4619      	mov	r1, r3
 800d308:	9b01      	ldr	r3, [sp, #4]
 800d30a:	e9c3 0100 	strd	r0, r1, [r3]
 800d30e:	9b06      	ldr	r3, [sp, #24]
 800d310:	f003 0007 	and.w	r0, r3, #7
 800d314:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d318:	ecbd 8b02 	vpop	{d8}
 800d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d320:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d324:	f7f2 ff5e 	bl	80001e4 <__adddf3>
 800d328:	3d01      	subs	r5, #1
 800d32a:	e7e6      	b.n	800d2fa <__kernel_rem_pio2+0x582>
 800d32c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d330:	f7f2 ff58 	bl	80001e4 <__adddf3>
 800d334:	3e01      	subs	r6, #1
 800d336:	e7bc      	b.n	800d2b2 <__kernel_rem_pio2+0x53a>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	e7c1      	b.n	800d2c2 <__kernel_rem_pio2+0x54a>
 800d33e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d342:	f7f2 ff4f 	bl	80001e4 <__adddf3>
 800d346:	3401      	adds	r4, #1
 800d348:	e7c6      	b.n	800d2d8 <__kernel_rem_pio2+0x560>
 800d34a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d34e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d352:	4640      	mov	r0, r8
 800d354:	ec53 2b17 	vmov	r2, r3, d7
 800d358:	4649      	mov	r1, r9
 800d35a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d35e:	f7f2 ff41 	bl	80001e4 <__adddf3>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	4606      	mov	r6, r0
 800d368:	460f      	mov	r7, r1
 800d36a:	4640      	mov	r0, r8
 800d36c:	4649      	mov	r1, r9
 800d36e:	f7f2 ff37 	bl	80001e0 <__aeabi_dsub>
 800d372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d376:	f7f2 ff35 	bl	80001e4 <__adddf3>
 800d37a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d37e:	e9ca 0100 	strd	r0, r1, [sl]
 800d382:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d386:	e770      	b.n	800d26a <__kernel_rem_pio2+0x4f2>
 800d388:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d38c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d390:	4630      	mov	r0, r6
 800d392:	ec53 2b17 	vmov	r2, r3, d7
 800d396:	4639      	mov	r1, r7
 800d398:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d39c:	f7f2 ff22 	bl	80001e4 <__adddf3>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	4639      	mov	r1, r7
 800d3ac:	f7f2 ff18 	bl	80001e0 <__aeabi_dsub>
 800d3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3b4:	f7f2 ff16 	bl	80001e4 <__adddf3>
 800d3b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3bc:	e9ca 0100 	strd	r0, r1, [sl]
 800d3c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d3c4:	e756      	b.n	800d274 <__kernel_rem_pio2+0x4fc>
 800d3c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3ca:	f7f2 ff0b 	bl	80001e4 <__adddf3>
 800d3ce:	3d01      	subs	r5, #1
 800d3d0:	e756      	b.n	800d280 <__kernel_rem_pio2+0x508>
 800d3d2:	9b01      	ldr	r3, [sp, #4]
 800d3d4:	9a01      	ldr	r2, [sp, #4]
 800d3d6:	601f      	str	r7, [r3, #0]
 800d3d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d3dc:	605c      	str	r4, [r3, #4]
 800d3de:	609d      	str	r5, [r3, #8]
 800d3e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d3e4:	60d3      	str	r3, [r2, #12]
 800d3e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3ea:	6110      	str	r0, [r2, #16]
 800d3ec:	6153      	str	r3, [r2, #20]
 800d3ee:	e78e      	b.n	800d30e <__kernel_rem_pio2+0x596>
 800d3f0:	41700000 	.word	0x41700000
 800d3f4:	3e700000 	.word	0x3e700000

0800d3f8 <__kernel_sin>:
 800d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	ec55 4b10 	vmov	r4, r5, d0
 800d400:	b085      	sub	sp, #20
 800d402:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d406:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d40a:	ed8d 1b00 	vstr	d1, [sp]
 800d40e:	9002      	str	r0, [sp, #8]
 800d410:	da06      	bge.n	800d420 <__kernel_sin+0x28>
 800d412:	ee10 0a10 	vmov	r0, s0
 800d416:	4629      	mov	r1, r5
 800d418:	f7f3 fb34 	bl	8000a84 <__aeabi_d2iz>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d051      	beq.n	800d4c4 <__kernel_sin+0xcc>
 800d420:	4622      	mov	r2, r4
 800d422:	462b      	mov	r3, r5
 800d424:	4620      	mov	r0, r4
 800d426:	4629      	mov	r1, r5
 800d428:	f7f3 f892 	bl	8000550 <__aeabi_dmul>
 800d42c:	4682      	mov	sl, r0
 800d42e:	468b      	mov	fp, r1
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4620      	mov	r0, r4
 800d436:	4629      	mov	r1, r5
 800d438:	f7f3 f88a 	bl	8000550 <__aeabi_dmul>
 800d43c:	a341      	add	r3, pc, #260	; (adr r3, 800d544 <__kernel_sin+0x14c>)
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	4680      	mov	r8, r0
 800d444:	4689      	mov	r9, r1
 800d446:	4650      	mov	r0, sl
 800d448:	4659      	mov	r1, fp
 800d44a:	f7f3 f881 	bl	8000550 <__aeabi_dmul>
 800d44e:	a33f      	add	r3, pc, #252	; (adr r3, 800d54c <__kernel_sin+0x154>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	f7f2 fec4 	bl	80001e0 <__aeabi_dsub>
 800d458:	4652      	mov	r2, sl
 800d45a:	465b      	mov	r3, fp
 800d45c:	f7f3 f878 	bl	8000550 <__aeabi_dmul>
 800d460:	a33c      	add	r3, pc, #240	; (adr r3, 800d554 <__kernel_sin+0x15c>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7f2 febd 	bl	80001e4 <__adddf3>
 800d46a:	4652      	mov	r2, sl
 800d46c:	465b      	mov	r3, fp
 800d46e:	f7f3 f86f 	bl	8000550 <__aeabi_dmul>
 800d472:	a33a      	add	r3, pc, #232	; (adr r3, 800d55c <__kernel_sin+0x164>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	f7f2 feb2 	bl	80001e0 <__aeabi_dsub>
 800d47c:	4652      	mov	r2, sl
 800d47e:	465b      	mov	r3, fp
 800d480:	f7f3 f866 	bl	8000550 <__aeabi_dmul>
 800d484:	a337      	add	r3, pc, #220	; (adr r3, 800d564 <__kernel_sin+0x16c>)
 800d486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48a:	f7f2 feab 	bl	80001e4 <__adddf3>
 800d48e:	9b02      	ldr	r3, [sp, #8]
 800d490:	4606      	mov	r6, r0
 800d492:	460f      	mov	r7, r1
 800d494:	b9db      	cbnz	r3, 800d4ce <__kernel_sin+0xd6>
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4650      	mov	r0, sl
 800d49c:	4659      	mov	r1, fp
 800d49e:	f7f3 f857 	bl	8000550 <__aeabi_dmul>
 800d4a2:	a325      	add	r3, pc, #148	; (adr r3, 800d538 <__kernel_sin+0x140>)
 800d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a8:	f7f2 fe9a 	bl	80001e0 <__aeabi_dsub>
 800d4ac:	4642      	mov	r2, r8
 800d4ae:	464b      	mov	r3, r9
 800d4b0:	f7f3 f84e 	bl	8000550 <__aeabi_dmul>
 800d4b4:	4602      	mov	r2, r0
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	f7f2 fe92 	bl	80001e4 <__adddf3>
 800d4c0:	4604      	mov	r4, r0
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	ec45 4b10 	vmov	d0, r4, r5
 800d4c8:	b005      	add	sp, #20
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4b1b      	ldr	r3, [pc, #108]	; (800d540 <__kernel_sin+0x148>)
 800d4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4d6:	f7f3 f83b 	bl	8000550 <__aeabi_dmul>
 800d4da:	4632      	mov	r2, r6
 800d4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4e0:	463b      	mov	r3, r7
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4649      	mov	r1, r9
 800d4e6:	f7f3 f833 	bl	8000550 <__aeabi_dmul>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4f2:	f7f2 fe75 	bl	80001e0 <__aeabi_dsub>
 800d4f6:	4652      	mov	r2, sl
 800d4f8:	465b      	mov	r3, fp
 800d4fa:	f7f3 f829 	bl	8000550 <__aeabi_dmul>
 800d4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d502:	f7f2 fe6d 	bl	80001e0 <__aeabi_dsub>
 800d506:	a30c      	add	r3, pc, #48	; (adr r3, 800d538 <__kernel_sin+0x140>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4606      	mov	r6, r0
 800d50e:	460f      	mov	r7, r1
 800d510:	4640      	mov	r0, r8
 800d512:	4649      	mov	r1, r9
 800d514:	f7f3 f81c 	bl	8000550 <__aeabi_dmul>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f2 fe60 	bl	80001e4 <__adddf3>
 800d524:	4602      	mov	r2, r0
 800d526:	460b      	mov	r3, r1
 800d528:	4620      	mov	r0, r4
 800d52a:	4629      	mov	r1, r5
 800d52c:	f7f2 fe58 	bl	80001e0 <__aeabi_dsub>
 800d530:	e7c6      	b.n	800d4c0 <__kernel_sin+0xc8>
 800d532:	bf00      	nop
 800d534:	f3af 8000 	nop.w
 800d538:	55555549 	.word	0x55555549
 800d53c:	3fc55555 	.word	0x3fc55555
 800d540:	3fe00000 	.word	0x3fe00000
 800d544:	5acfd57c 	.word	0x5acfd57c
 800d548:	3de5d93a 	.word	0x3de5d93a
 800d54c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d550:	3e5ae5e6 	.word	0x3e5ae5e6
 800d554:	57b1fe7d 	.word	0x57b1fe7d
 800d558:	3ec71de3 	.word	0x3ec71de3
 800d55c:	19c161d5 	.word	0x19c161d5
 800d560:	3f2a01a0 	.word	0x3f2a01a0
 800d564:	1110f8a6 	.word	0x1110f8a6
 800d568:	3f811111 	.word	0x3f811111

0800d56c <fabs>:
 800d56c:	ec51 0b10 	vmov	r0, r1, d0
 800d570:	ee10 2a10 	vmov	r2, s0
 800d574:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d578:	ec43 2b10 	vmov	d0, r2, r3
 800d57c:	4770      	bx	lr
	...

0800d580 <floor>:
 800d580:	ec51 0b10 	vmov	r0, r1, d0
 800d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d588:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d58c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d590:	2e13      	cmp	r6, #19
 800d592:	460c      	mov	r4, r1
 800d594:	ee10 5a10 	vmov	r5, s0
 800d598:	4680      	mov	r8, r0
 800d59a:	dc34      	bgt.n	800d606 <floor+0x86>
 800d59c:	2e00      	cmp	r6, #0
 800d59e:	da16      	bge.n	800d5ce <floor+0x4e>
 800d5a0:	a335      	add	r3, pc, #212	; (adr r3, 800d678 <floor+0xf8>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f2 fe1d 	bl	80001e4 <__adddf3>
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f7f3 fa5f 	bl	8000a70 <__aeabi_dcmpgt>
 800d5b2:	b148      	cbz	r0, 800d5c8 <floor+0x48>
 800d5b4:	2c00      	cmp	r4, #0
 800d5b6:	da59      	bge.n	800d66c <floor+0xec>
 800d5b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d5bc:	4a30      	ldr	r2, [pc, #192]	; (800d680 <floor+0x100>)
 800d5be:	432b      	orrs	r3, r5
 800d5c0:	2500      	movs	r5, #0
 800d5c2:	42ab      	cmp	r3, r5
 800d5c4:	bf18      	it	ne
 800d5c6:	4614      	movne	r4, r2
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	e025      	b.n	800d61a <floor+0x9a>
 800d5ce:	4f2d      	ldr	r7, [pc, #180]	; (800d684 <floor+0x104>)
 800d5d0:	4137      	asrs	r7, r6
 800d5d2:	ea01 0307 	and.w	r3, r1, r7
 800d5d6:	4303      	orrs	r3, r0
 800d5d8:	d01f      	beq.n	800d61a <floor+0x9a>
 800d5da:	a327      	add	r3, pc, #156	; (adr r3, 800d678 <floor+0xf8>)
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f7f2 fe00 	bl	80001e4 <__adddf3>
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f7f3 fa42 	bl	8000a70 <__aeabi_dcmpgt>
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d0eb      	beq.n	800d5c8 <floor+0x48>
 800d5f0:	2c00      	cmp	r4, #0
 800d5f2:	bfbe      	ittt	lt
 800d5f4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d5f8:	fa43 f606 	asrlt.w	r6, r3, r6
 800d5fc:	19a4      	addlt	r4, r4, r6
 800d5fe:	ea24 0407 	bic.w	r4, r4, r7
 800d602:	2500      	movs	r5, #0
 800d604:	e7e0      	b.n	800d5c8 <floor+0x48>
 800d606:	2e33      	cmp	r6, #51	; 0x33
 800d608:	dd0b      	ble.n	800d622 <floor+0xa2>
 800d60a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d60e:	d104      	bne.n	800d61a <floor+0x9a>
 800d610:	ee10 2a10 	vmov	r2, s0
 800d614:	460b      	mov	r3, r1
 800d616:	f7f2 fde5 	bl	80001e4 <__adddf3>
 800d61a:	ec41 0b10 	vmov	d0, r0, r1
 800d61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d622:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d626:	f04f 33ff 	mov.w	r3, #4294967295
 800d62a:	fa23 f707 	lsr.w	r7, r3, r7
 800d62e:	4207      	tst	r7, r0
 800d630:	d0f3      	beq.n	800d61a <floor+0x9a>
 800d632:	a311      	add	r3, pc, #68	; (adr r3, 800d678 <floor+0xf8>)
 800d634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d638:	f7f2 fdd4 	bl	80001e4 <__adddf3>
 800d63c:	2200      	movs	r2, #0
 800d63e:	2300      	movs	r3, #0
 800d640:	f7f3 fa16 	bl	8000a70 <__aeabi_dcmpgt>
 800d644:	2800      	cmp	r0, #0
 800d646:	d0bf      	beq.n	800d5c8 <floor+0x48>
 800d648:	2c00      	cmp	r4, #0
 800d64a:	da02      	bge.n	800d652 <floor+0xd2>
 800d64c:	2e14      	cmp	r6, #20
 800d64e:	d103      	bne.n	800d658 <floor+0xd8>
 800d650:	3401      	adds	r4, #1
 800d652:	ea25 0507 	bic.w	r5, r5, r7
 800d656:	e7b7      	b.n	800d5c8 <floor+0x48>
 800d658:	2301      	movs	r3, #1
 800d65a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d65e:	fa03 f606 	lsl.w	r6, r3, r6
 800d662:	4435      	add	r5, r6
 800d664:	4545      	cmp	r5, r8
 800d666:	bf38      	it	cc
 800d668:	18e4      	addcc	r4, r4, r3
 800d66a:	e7f2      	b.n	800d652 <floor+0xd2>
 800d66c:	2500      	movs	r5, #0
 800d66e:	462c      	mov	r4, r5
 800d670:	e7aa      	b.n	800d5c8 <floor+0x48>
 800d672:	bf00      	nop
 800d674:	f3af 8000 	nop.w
 800d678:	8800759c 	.word	0x8800759c
 800d67c:	7e37e43c 	.word	0x7e37e43c
 800d680:	bff00000 	.word	0xbff00000
 800d684:	000fffff 	.word	0x000fffff

0800d688 <scalbn>:
 800d688:	b570      	push	{r4, r5, r6, lr}
 800d68a:	ec55 4b10 	vmov	r4, r5, d0
 800d68e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d692:	4606      	mov	r6, r0
 800d694:	462b      	mov	r3, r5
 800d696:	b9aa      	cbnz	r2, 800d6c4 <scalbn+0x3c>
 800d698:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d69c:	4323      	orrs	r3, r4
 800d69e:	d03b      	beq.n	800d718 <scalbn+0x90>
 800d6a0:	4b31      	ldr	r3, [pc, #196]	; (800d768 <scalbn+0xe0>)
 800d6a2:	4629      	mov	r1, r5
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	ee10 0a10 	vmov	r0, s0
 800d6aa:	f7f2 ff51 	bl	8000550 <__aeabi_dmul>
 800d6ae:	4b2f      	ldr	r3, [pc, #188]	; (800d76c <scalbn+0xe4>)
 800d6b0:	429e      	cmp	r6, r3
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	460d      	mov	r5, r1
 800d6b6:	da12      	bge.n	800d6de <scalbn+0x56>
 800d6b8:	a327      	add	r3, pc, #156	; (adr r3, 800d758 <scalbn+0xd0>)
 800d6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6be:	f7f2 ff47 	bl	8000550 <__aeabi_dmul>
 800d6c2:	e009      	b.n	800d6d8 <scalbn+0x50>
 800d6c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d6c8:	428a      	cmp	r2, r1
 800d6ca:	d10c      	bne.n	800d6e6 <scalbn+0x5e>
 800d6cc:	ee10 2a10 	vmov	r2, s0
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	4629      	mov	r1, r5
 800d6d4:	f7f2 fd86 	bl	80001e4 <__adddf3>
 800d6d8:	4604      	mov	r4, r0
 800d6da:	460d      	mov	r5, r1
 800d6dc:	e01c      	b.n	800d718 <scalbn+0x90>
 800d6de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	3a36      	subs	r2, #54	; 0x36
 800d6e6:	4432      	add	r2, r6
 800d6e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d6ec:	428a      	cmp	r2, r1
 800d6ee:	dd0b      	ble.n	800d708 <scalbn+0x80>
 800d6f0:	ec45 4b11 	vmov	d1, r4, r5
 800d6f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d760 <scalbn+0xd8>
 800d6f8:	f000 f83c 	bl	800d774 <copysign>
 800d6fc:	a318      	add	r3, pc, #96	; (adr r3, 800d760 <scalbn+0xd8>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	ec51 0b10 	vmov	r0, r1, d0
 800d706:	e7da      	b.n	800d6be <scalbn+0x36>
 800d708:	2a00      	cmp	r2, #0
 800d70a:	dd08      	ble.n	800d71e <scalbn+0x96>
 800d70c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d710:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d714:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d718:	ec45 4b10 	vmov	d0, r4, r5
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d722:	da0d      	bge.n	800d740 <scalbn+0xb8>
 800d724:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d728:	429e      	cmp	r6, r3
 800d72a:	ec45 4b11 	vmov	d1, r4, r5
 800d72e:	dce1      	bgt.n	800d6f4 <scalbn+0x6c>
 800d730:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800d758 <scalbn+0xd0>
 800d734:	f000 f81e 	bl	800d774 <copysign>
 800d738:	a307      	add	r3, pc, #28	; (adr r3, 800d758 <scalbn+0xd0>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	e7e0      	b.n	800d702 <scalbn+0x7a>
 800d740:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d744:	3236      	adds	r2, #54	; 0x36
 800d746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d74a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d74e:	4620      	mov	r0, r4
 800d750:	4629      	mov	r1, r5
 800d752:	2200      	movs	r2, #0
 800d754:	4b06      	ldr	r3, [pc, #24]	; (800d770 <scalbn+0xe8>)
 800d756:	e7b2      	b.n	800d6be <scalbn+0x36>
 800d758:	c2f8f359 	.word	0xc2f8f359
 800d75c:	01a56e1f 	.word	0x01a56e1f
 800d760:	8800759c 	.word	0x8800759c
 800d764:	7e37e43c 	.word	0x7e37e43c
 800d768:	43500000 	.word	0x43500000
 800d76c:	ffff3cb0 	.word	0xffff3cb0
 800d770:	3c900000 	.word	0x3c900000

0800d774 <copysign>:
 800d774:	ec51 0b10 	vmov	r0, r1, d0
 800d778:	ee11 0a90 	vmov	r0, s3
 800d77c:	ee10 2a10 	vmov	r2, s0
 800d780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d784:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800d788:	ea41 0300 	orr.w	r3, r1, r0
 800d78c:	ec43 2b10 	vmov	d0, r2, r3
 800d790:	4770      	bx	lr

0800d792 <abort>:
 800d792:	b508      	push	{r3, lr}
 800d794:	2006      	movs	r0, #6
 800d796:	f000 f949 	bl	800da2c <raise>
 800d79a:	2001      	movs	r0, #1
 800d79c:	f7f5 fdd4 	bl	8003348 <_exit>

0800d7a0 <__errno>:
 800d7a0:	4b01      	ldr	r3, [pc, #4]	; (800d7a8 <__errno+0x8>)
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	200001b0 	.word	0x200001b0

0800d7ac <__libc_init_array>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	4e0d      	ldr	r6, [pc, #52]	; (800d7e4 <__libc_init_array+0x38>)
 800d7b0:	4c0d      	ldr	r4, [pc, #52]	; (800d7e8 <__libc_init_array+0x3c>)
 800d7b2:	1ba4      	subs	r4, r4, r6
 800d7b4:	10a4      	asrs	r4, r4, #2
 800d7b6:	2500      	movs	r5, #0
 800d7b8:	42a5      	cmp	r5, r4
 800d7ba:	d109      	bne.n	800d7d0 <__libc_init_array+0x24>
 800d7bc:	4e0b      	ldr	r6, [pc, #44]	; (800d7ec <__libc_init_array+0x40>)
 800d7be:	4c0c      	ldr	r4, [pc, #48]	; (800d7f0 <__libc_init_array+0x44>)
 800d7c0:	f000 f952 	bl	800da68 <_init>
 800d7c4:	1ba4      	subs	r4, r4, r6
 800d7c6:	10a4      	asrs	r4, r4, #2
 800d7c8:	2500      	movs	r5, #0
 800d7ca:	42a5      	cmp	r5, r4
 800d7cc:	d105      	bne.n	800d7da <__libc_init_array+0x2e>
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7d4:	4798      	blx	r3
 800d7d6:	3501      	adds	r5, #1
 800d7d8:	e7ee      	b.n	800d7b8 <__libc_init_array+0xc>
 800d7da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7de:	4798      	blx	r3
 800d7e0:	3501      	adds	r5, #1
 800d7e2:	e7f2      	b.n	800d7ca <__libc_init_array+0x1e>
 800d7e4:	0800de00 	.word	0x0800de00
 800d7e8:	0800de00 	.word	0x0800de00
 800d7ec:	0800de00 	.word	0x0800de00
 800d7f0:	0800de0c 	.word	0x0800de0c

0800d7f4 <malloc>:
 800d7f4:	4b02      	ldr	r3, [pc, #8]	; (800d800 <malloc+0xc>)
 800d7f6:	4601      	mov	r1, r0
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	f000 b885 	b.w	800d908 <_malloc_r>
 800d7fe:	bf00      	nop
 800d800:	200001b0 	.word	0x200001b0

0800d804 <free>:
 800d804:	4b02      	ldr	r3, [pc, #8]	; (800d810 <free+0xc>)
 800d806:	4601      	mov	r1, r0
 800d808:	6818      	ldr	r0, [r3, #0]
 800d80a:	f000 b82f 	b.w	800d86c <_free_r>
 800d80e:	bf00      	nop
 800d810:	200001b0 	.word	0x200001b0

0800d814 <memcpy>:
 800d814:	b510      	push	{r4, lr}
 800d816:	1e43      	subs	r3, r0, #1
 800d818:	440a      	add	r2, r1
 800d81a:	4291      	cmp	r1, r2
 800d81c:	d100      	bne.n	800d820 <memcpy+0xc>
 800d81e:	bd10      	pop	{r4, pc}
 800d820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d828:	e7f7      	b.n	800d81a <memcpy+0x6>

0800d82a <memmove>:
 800d82a:	4288      	cmp	r0, r1
 800d82c:	b510      	push	{r4, lr}
 800d82e:	eb01 0302 	add.w	r3, r1, r2
 800d832:	d807      	bhi.n	800d844 <memmove+0x1a>
 800d834:	1e42      	subs	r2, r0, #1
 800d836:	4299      	cmp	r1, r3
 800d838:	d00a      	beq.n	800d850 <memmove+0x26>
 800d83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d83e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d842:	e7f8      	b.n	800d836 <memmove+0xc>
 800d844:	4283      	cmp	r3, r0
 800d846:	d9f5      	bls.n	800d834 <memmove+0xa>
 800d848:	1881      	adds	r1, r0, r2
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	42d3      	cmn	r3, r2
 800d84e:	d100      	bne.n	800d852 <memmove+0x28>
 800d850:	bd10      	pop	{r4, pc}
 800d852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d856:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d85a:	e7f7      	b.n	800d84c <memmove+0x22>

0800d85c <memset>:
 800d85c:	4402      	add	r2, r0
 800d85e:	4603      	mov	r3, r0
 800d860:	4293      	cmp	r3, r2
 800d862:	d100      	bne.n	800d866 <memset+0xa>
 800d864:	4770      	bx	lr
 800d866:	f803 1b01 	strb.w	r1, [r3], #1
 800d86a:	e7f9      	b.n	800d860 <memset+0x4>

0800d86c <_free_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4605      	mov	r5, r0
 800d870:	2900      	cmp	r1, #0
 800d872:	d045      	beq.n	800d900 <_free_r+0x94>
 800d874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d878:	1f0c      	subs	r4, r1, #4
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	bfb8      	it	lt
 800d87e:	18e4      	addlt	r4, r4, r3
 800d880:	f000 f8f0 	bl	800da64 <__malloc_lock>
 800d884:	4a1f      	ldr	r2, [pc, #124]	; (800d904 <_free_r+0x98>)
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	4610      	mov	r0, r2
 800d88a:	b933      	cbnz	r3, 800d89a <_free_r+0x2e>
 800d88c:	6063      	str	r3, [r4, #4]
 800d88e:	6014      	str	r4, [r2, #0]
 800d890:	4628      	mov	r0, r5
 800d892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d896:	f000 b8e6 	b.w	800da66 <__malloc_unlock>
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	d90c      	bls.n	800d8b8 <_free_r+0x4c>
 800d89e:	6821      	ldr	r1, [r4, #0]
 800d8a0:	1862      	adds	r2, r4, r1
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	bf04      	itt	eq
 800d8a6:	681a      	ldreq	r2, [r3, #0]
 800d8a8:	685b      	ldreq	r3, [r3, #4]
 800d8aa:	6063      	str	r3, [r4, #4]
 800d8ac:	bf04      	itt	eq
 800d8ae:	1852      	addeq	r2, r2, r1
 800d8b0:	6022      	streq	r2, [r4, #0]
 800d8b2:	6004      	str	r4, [r0, #0]
 800d8b4:	e7ec      	b.n	800d890 <_free_r+0x24>
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	685a      	ldr	r2, [r3, #4]
 800d8ba:	b10a      	cbz	r2, 800d8c0 <_free_r+0x54>
 800d8bc:	42a2      	cmp	r2, r4
 800d8be:	d9fa      	bls.n	800d8b6 <_free_r+0x4a>
 800d8c0:	6819      	ldr	r1, [r3, #0]
 800d8c2:	1858      	adds	r0, r3, r1
 800d8c4:	42a0      	cmp	r0, r4
 800d8c6:	d10b      	bne.n	800d8e0 <_free_r+0x74>
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	4401      	add	r1, r0
 800d8cc:	1858      	adds	r0, r3, r1
 800d8ce:	4282      	cmp	r2, r0
 800d8d0:	6019      	str	r1, [r3, #0]
 800d8d2:	d1dd      	bne.n	800d890 <_free_r+0x24>
 800d8d4:	6810      	ldr	r0, [r2, #0]
 800d8d6:	6852      	ldr	r2, [r2, #4]
 800d8d8:	605a      	str	r2, [r3, #4]
 800d8da:	4401      	add	r1, r0
 800d8dc:	6019      	str	r1, [r3, #0]
 800d8de:	e7d7      	b.n	800d890 <_free_r+0x24>
 800d8e0:	d902      	bls.n	800d8e8 <_free_r+0x7c>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	602b      	str	r3, [r5, #0]
 800d8e6:	e7d3      	b.n	800d890 <_free_r+0x24>
 800d8e8:	6820      	ldr	r0, [r4, #0]
 800d8ea:	1821      	adds	r1, r4, r0
 800d8ec:	428a      	cmp	r2, r1
 800d8ee:	bf04      	itt	eq
 800d8f0:	6811      	ldreq	r1, [r2, #0]
 800d8f2:	6852      	ldreq	r2, [r2, #4]
 800d8f4:	6062      	str	r2, [r4, #4]
 800d8f6:	bf04      	itt	eq
 800d8f8:	1809      	addeq	r1, r1, r0
 800d8fa:	6021      	streq	r1, [r4, #0]
 800d8fc:	605c      	str	r4, [r3, #4]
 800d8fe:	e7c7      	b.n	800d890 <_free_r+0x24>
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	200002d8 	.word	0x200002d8

0800d908 <_malloc_r>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	1ccd      	adds	r5, r1, #3
 800d90c:	f025 0503 	bic.w	r5, r5, #3
 800d910:	3508      	adds	r5, #8
 800d912:	2d0c      	cmp	r5, #12
 800d914:	bf38      	it	cc
 800d916:	250c      	movcc	r5, #12
 800d918:	2d00      	cmp	r5, #0
 800d91a:	4606      	mov	r6, r0
 800d91c:	db01      	blt.n	800d922 <_malloc_r+0x1a>
 800d91e:	42a9      	cmp	r1, r5
 800d920:	d903      	bls.n	800d92a <_malloc_r+0x22>
 800d922:	230c      	movs	r3, #12
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	2000      	movs	r0, #0
 800d928:	bd70      	pop	{r4, r5, r6, pc}
 800d92a:	f000 f89b 	bl	800da64 <__malloc_lock>
 800d92e:	4a21      	ldr	r2, [pc, #132]	; (800d9b4 <_malloc_r+0xac>)
 800d930:	6814      	ldr	r4, [r2, #0]
 800d932:	4621      	mov	r1, r4
 800d934:	b991      	cbnz	r1, 800d95c <_malloc_r+0x54>
 800d936:	4c20      	ldr	r4, [pc, #128]	; (800d9b8 <_malloc_r+0xb0>)
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	b91b      	cbnz	r3, 800d944 <_malloc_r+0x3c>
 800d93c:	4630      	mov	r0, r6
 800d93e:	f000 f83d 	bl	800d9bc <_sbrk_r>
 800d942:	6020      	str	r0, [r4, #0]
 800d944:	4629      	mov	r1, r5
 800d946:	4630      	mov	r0, r6
 800d948:	f000 f838 	bl	800d9bc <_sbrk_r>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d124      	bne.n	800d99a <_malloc_r+0x92>
 800d950:	230c      	movs	r3, #12
 800d952:	6033      	str	r3, [r6, #0]
 800d954:	4630      	mov	r0, r6
 800d956:	f000 f886 	bl	800da66 <__malloc_unlock>
 800d95a:	e7e4      	b.n	800d926 <_malloc_r+0x1e>
 800d95c:	680b      	ldr	r3, [r1, #0]
 800d95e:	1b5b      	subs	r3, r3, r5
 800d960:	d418      	bmi.n	800d994 <_malloc_r+0x8c>
 800d962:	2b0b      	cmp	r3, #11
 800d964:	d90f      	bls.n	800d986 <_malloc_r+0x7e>
 800d966:	600b      	str	r3, [r1, #0]
 800d968:	50cd      	str	r5, [r1, r3]
 800d96a:	18cc      	adds	r4, r1, r3
 800d96c:	4630      	mov	r0, r6
 800d96e:	f000 f87a 	bl	800da66 <__malloc_unlock>
 800d972:	f104 000b 	add.w	r0, r4, #11
 800d976:	1d23      	adds	r3, r4, #4
 800d978:	f020 0007 	bic.w	r0, r0, #7
 800d97c:	1ac3      	subs	r3, r0, r3
 800d97e:	d0d3      	beq.n	800d928 <_malloc_r+0x20>
 800d980:	425a      	negs	r2, r3
 800d982:	50e2      	str	r2, [r4, r3]
 800d984:	e7d0      	b.n	800d928 <_malloc_r+0x20>
 800d986:	428c      	cmp	r4, r1
 800d988:	684b      	ldr	r3, [r1, #4]
 800d98a:	bf16      	itet	ne
 800d98c:	6063      	strne	r3, [r4, #4]
 800d98e:	6013      	streq	r3, [r2, #0]
 800d990:	460c      	movne	r4, r1
 800d992:	e7eb      	b.n	800d96c <_malloc_r+0x64>
 800d994:	460c      	mov	r4, r1
 800d996:	6849      	ldr	r1, [r1, #4]
 800d998:	e7cc      	b.n	800d934 <_malloc_r+0x2c>
 800d99a:	1cc4      	adds	r4, r0, #3
 800d99c:	f024 0403 	bic.w	r4, r4, #3
 800d9a0:	42a0      	cmp	r0, r4
 800d9a2:	d005      	beq.n	800d9b0 <_malloc_r+0xa8>
 800d9a4:	1a21      	subs	r1, r4, r0
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	f000 f808 	bl	800d9bc <_sbrk_r>
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d0cf      	beq.n	800d950 <_malloc_r+0x48>
 800d9b0:	6025      	str	r5, [r4, #0]
 800d9b2:	e7db      	b.n	800d96c <_malloc_r+0x64>
 800d9b4:	200002d8 	.word	0x200002d8
 800d9b8:	200002dc 	.word	0x200002dc

0800d9bc <_sbrk_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4c06      	ldr	r4, [pc, #24]	; (800d9d8 <_sbrk_r+0x1c>)
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	4608      	mov	r0, r1
 800d9c6:	6023      	str	r3, [r4, #0]
 800d9c8:	f7f5 fcc8 	bl	800335c <_sbrk>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_sbrk_r+0x1a>
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_sbrk_r+0x1a>
 800d9d4:	602b      	str	r3, [r5, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	20001df0 	.word	0x20001df0

0800d9dc <_raise_r>:
 800d9dc:	291f      	cmp	r1, #31
 800d9de:	b538      	push	{r3, r4, r5, lr}
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	460d      	mov	r5, r1
 800d9e4:	d904      	bls.n	800d9f0 <_raise_r+0x14>
 800d9e6:	2316      	movs	r3, #22
 800d9e8:	6003      	str	r3, [r0, #0]
 800d9ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ee:	bd38      	pop	{r3, r4, r5, pc}
 800d9f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9f2:	b112      	cbz	r2, 800d9fa <_raise_r+0x1e>
 800d9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9f8:	b94b      	cbnz	r3, 800da0e <_raise_r+0x32>
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 f830 	bl	800da60 <_getpid_r>
 800da00:	462a      	mov	r2, r5
 800da02:	4601      	mov	r1, r0
 800da04:	4620      	mov	r0, r4
 800da06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da0a:	f000 b817 	b.w	800da3c <_kill_r>
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d00a      	beq.n	800da28 <_raise_r+0x4c>
 800da12:	1c59      	adds	r1, r3, #1
 800da14:	d103      	bne.n	800da1e <_raise_r+0x42>
 800da16:	2316      	movs	r3, #22
 800da18:	6003      	str	r3, [r0, #0]
 800da1a:	2001      	movs	r0, #1
 800da1c:	e7e7      	b.n	800d9ee <_raise_r+0x12>
 800da1e:	2400      	movs	r4, #0
 800da20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da24:	4628      	mov	r0, r5
 800da26:	4798      	blx	r3
 800da28:	2000      	movs	r0, #0
 800da2a:	e7e0      	b.n	800d9ee <_raise_r+0x12>

0800da2c <raise>:
 800da2c:	4b02      	ldr	r3, [pc, #8]	; (800da38 <raise+0xc>)
 800da2e:	4601      	mov	r1, r0
 800da30:	6818      	ldr	r0, [r3, #0]
 800da32:	f7ff bfd3 	b.w	800d9dc <_raise_r>
 800da36:	bf00      	nop
 800da38:	200001b0 	.word	0x200001b0

0800da3c <_kill_r>:
 800da3c:	b538      	push	{r3, r4, r5, lr}
 800da3e:	4c07      	ldr	r4, [pc, #28]	; (800da5c <_kill_r+0x20>)
 800da40:	2300      	movs	r3, #0
 800da42:	4605      	mov	r5, r0
 800da44:	4608      	mov	r0, r1
 800da46:	4611      	mov	r1, r2
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	f7f5 fc6d 	bl	8003328 <_kill>
 800da4e:	1c43      	adds	r3, r0, #1
 800da50:	d102      	bne.n	800da58 <_kill_r+0x1c>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	b103      	cbz	r3, 800da58 <_kill_r+0x1c>
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	bd38      	pop	{r3, r4, r5, pc}
 800da5a:	bf00      	nop
 800da5c:	20001df0 	.word	0x20001df0

0800da60 <_getpid_r>:
 800da60:	f7f5 bc5a 	b.w	8003318 <_getpid>

0800da64 <__malloc_lock>:
 800da64:	4770      	bx	lr

0800da66 <__malloc_unlock>:
 800da66:	4770      	bx	lr

0800da68 <_init>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	bf00      	nop
 800da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6e:	bc08      	pop	{r3}
 800da70:	469e      	mov	lr, r3
 800da72:	4770      	bx	lr

0800da74 <_fini>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	bf00      	nop
 800da78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7a:	bc08      	pop	{r3}
 800da7c:	469e      	mov	lr, r3
 800da7e:	4770      	bx	lr
